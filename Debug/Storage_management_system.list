
Storage_management_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbe0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800bd70  0800bd70  0001bd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c048  0800c048  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c048  0800c048  0001c048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c050  0800c050  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c050  0800c050  0001c050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c054  0800c054  0001c054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003100  20000094  0800c0ec  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003194  0800c0ec  00023194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d440  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000536d  00000000  00000000  0004d504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002440  00000000  00000000  00052878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002228  00000000  00000000  00054cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c5c6  00000000  00000000  00056ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027037  00000000  00000000  000834a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a18f  00000000  00000000  000aa4dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b466c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ec8  00000000  00000000  001b46c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd58 	.word	0x0800bd58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800bd58 	.word	0x0800bd58

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b96e 	b.w	800093c <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	468c      	mov	ip, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	f040 8083 	bne.w	800078e <__udivmoddi4+0x116>
 8000688:	428a      	cmp	r2, r1
 800068a:	4617      	mov	r7, r2
 800068c:	d947      	bls.n	800071e <__udivmoddi4+0xa6>
 800068e:	fab2 f282 	clz	r2, r2
 8000692:	b142      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000694:	f1c2 0020 	rsb	r0, r2, #32
 8000698:	fa24 f000 	lsr.w	r0, r4, r0
 800069c:	4091      	lsls	r1, r2
 800069e:	4097      	lsls	r7, r2
 80006a0:	ea40 0c01 	orr.w	ip, r0, r1
 80006a4:	4094      	lsls	r4, r2
 80006a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006aa:	0c23      	lsrs	r3, r4, #16
 80006ac:	fbbc f6f8 	udiv	r6, ip, r8
 80006b0:	fa1f fe87 	uxth.w	lr, r7
 80006b4:	fb08 c116 	mls	r1, r8, r6, ip
 80006b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006bc:	fb06 f10e 	mul.w	r1, r6, lr
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d909      	bls.n	80006d8 <__udivmoddi4+0x60>
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ca:	f080 8119 	bcs.w	8000900 <__udivmoddi4+0x288>
 80006ce:	4299      	cmp	r1, r3
 80006d0:	f240 8116 	bls.w	8000900 <__udivmoddi4+0x288>
 80006d4:	3e02      	subs	r6, #2
 80006d6:	443b      	add	r3, r7
 80006d8:	1a5b      	subs	r3, r3, r1
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e0:	fb08 3310 	mls	r3, r8, r0, r3
 80006e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ec:	45a6      	cmp	lr, r4
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x8c>
 80006f0:	193c      	adds	r4, r7, r4
 80006f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006f6:	f080 8105 	bcs.w	8000904 <__udivmoddi4+0x28c>
 80006fa:	45a6      	cmp	lr, r4
 80006fc:	f240 8102 	bls.w	8000904 <__udivmoddi4+0x28c>
 8000700:	3802      	subs	r0, #2
 8000702:	443c      	add	r4, r7
 8000704:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000708:	eba4 040e 	sub.w	r4, r4, lr
 800070c:	2600      	movs	r6, #0
 800070e:	b11d      	cbz	r5, 8000718 <__udivmoddi4+0xa0>
 8000710:	40d4      	lsrs	r4, r2
 8000712:	2300      	movs	r3, #0
 8000714:	e9c5 4300 	strd	r4, r3, [r5]
 8000718:	4631      	mov	r1, r6
 800071a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071e:	b902      	cbnz	r2, 8000722 <__udivmoddi4+0xaa>
 8000720:	deff      	udf	#255	; 0xff
 8000722:	fab2 f282 	clz	r2, r2
 8000726:	2a00      	cmp	r2, #0
 8000728:	d150      	bne.n	80007cc <__udivmoddi4+0x154>
 800072a:	1bcb      	subs	r3, r1, r7
 800072c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000730:	fa1f f887 	uxth.w	r8, r7
 8000734:	2601      	movs	r6, #1
 8000736:	fbb3 fcfe 	udiv	ip, r3, lr
 800073a:	0c21      	lsrs	r1, r4, #16
 800073c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000740:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000744:	fb08 f30c 	mul.w	r3, r8, ip
 8000748:	428b      	cmp	r3, r1
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0xe4>
 800074c:	1879      	adds	r1, r7, r1
 800074e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0xe2>
 8000754:	428b      	cmp	r3, r1
 8000756:	f200 80e9 	bhi.w	800092c <__udivmoddi4+0x2b4>
 800075a:	4684      	mov	ip, r0
 800075c:	1ac9      	subs	r1, r1, r3
 800075e:	b2a3      	uxth	r3, r4
 8000760:	fbb1 f0fe 	udiv	r0, r1, lr
 8000764:	fb0e 1110 	mls	r1, lr, r0, r1
 8000768:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800076c:	fb08 f800 	mul.w	r8, r8, r0
 8000770:	45a0      	cmp	r8, r4
 8000772:	d907      	bls.n	8000784 <__udivmoddi4+0x10c>
 8000774:	193c      	adds	r4, r7, r4
 8000776:	f100 33ff 	add.w	r3, r0, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x10a>
 800077c:	45a0      	cmp	r8, r4
 800077e:	f200 80d9 	bhi.w	8000934 <__udivmoddi4+0x2bc>
 8000782:	4618      	mov	r0, r3
 8000784:	eba4 0408 	sub.w	r4, r4, r8
 8000788:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078c:	e7bf      	b.n	800070e <__udivmoddi4+0x96>
 800078e:	428b      	cmp	r3, r1
 8000790:	d909      	bls.n	80007a6 <__udivmoddi4+0x12e>
 8000792:	2d00      	cmp	r5, #0
 8000794:	f000 80b1 	beq.w	80008fa <__udivmoddi4+0x282>
 8000798:	2600      	movs	r6, #0
 800079a:	e9c5 0100 	strd	r0, r1, [r5]
 800079e:	4630      	mov	r0, r6
 80007a0:	4631      	mov	r1, r6
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	fab3 f683 	clz	r6, r3
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d14a      	bne.n	8000844 <__udivmoddi4+0x1cc>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d302      	bcc.n	80007b8 <__udivmoddi4+0x140>
 80007b2:	4282      	cmp	r2, r0
 80007b4:	f200 80b8 	bhi.w	8000928 <__udivmoddi4+0x2b0>
 80007b8:	1a84      	subs	r4, r0, r2
 80007ba:	eb61 0103 	sbc.w	r1, r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	468c      	mov	ip, r1
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	d0a8      	beq.n	8000718 <__udivmoddi4+0xa0>
 80007c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ca:	e7a5      	b.n	8000718 <__udivmoddi4+0xa0>
 80007cc:	f1c2 0320 	rsb	r3, r2, #32
 80007d0:	fa20 f603 	lsr.w	r6, r0, r3
 80007d4:	4097      	lsls	r7, r2
 80007d6:	fa01 f002 	lsl.w	r0, r1, r2
 80007da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007de:	40d9      	lsrs	r1, r3
 80007e0:	4330      	orrs	r0, r6
 80007e2:	0c03      	lsrs	r3, r0, #16
 80007e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007e8:	fa1f f887 	uxth.w	r8, r7
 80007ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80007f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f4:	fb06 f108 	mul.w	r1, r6, r8
 80007f8:	4299      	cmp	r1, r3
 80007fa:	fa04 f402 	lsl.w	r4, r4, r2
 80007fe:	d909      	bls.n	8000814 <__udivmoddi4+0x19c>
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	f106 3cff 	add.w	ip, r6, #4294967295
 8000806:	f080 808d 	bcs.w	8000924 <__udivmoddi4+0x2ac>
 800080a:	4299      	cmp	r1, r3
 800080c:	f240 808a 	bls.w	8000924 <__udivmoddi4+0x2ac>
 8000810:	3e02      	subs	r6, #2
 8000812:	443b      	add	r3, r7
 8000814:	1a5b      	subs	r3, r3, r1
 8000816:	b281      	uxth	r1, r0
 8000818:	fbb3 f0fe 	udiv	r0, r3, lr
 800081c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000820:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000824:	fb00 f308 	mul.w	r3, r0, r8
 8000828:	428b      	cmp	r3, r1
 800082a:	d907      	bls.n	800083c <__udivmoddi4+0x1c4>
 800082c:	1879      	adds	r1, r7, r1
 800082e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000832:	d273      	bcs.n	800091c <__udivmoddi4+0x2a4>
 8000834:	428b      	cmp	r3, r1
 8000836:	d971      	bls.n	800091c <__udivmoddi4+0x2a4>
 8000838:	3802      	subs	r0, #2
 800083a:	4439      	add	r1, r7
 800083c:	1acb      	subs	r3, r1, r3
 800083e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000842:	e778      	b.n	8000736 <__udivmoddi4+0xbe>
 8000844:	f1c6 0c20 	rsb	ip, r6, #32
 8000848:	fa03 f406 	lsl.w	r4, r3, r6
 800084c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000850:	431c      	orrs	r4, r3
 8000852:	fa20 f70c 	lsr.w	r7, r0, ip
 8000856:	fa01 f306 	lsl.w	r3, r1, r6
 800085a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800085e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000862:	431f      	orrs	r7, r3
 8000864:	0c3b      	lsrs	r3, r7, #16
 8000866:	fbb1 f9fe 	udiv	r9, r1, lr
 800086a:	fa1f f884 	uxth.w	r8, r4
 800086e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000872:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000876:	fb09 fa08 	mul.w	sl, r9, r8
 800087a:	458a      	cmp	sl, r1
 800087c:	fa02 f206 	lsl.w	r2, r2, r6
 8000880:	fa00 f306 	lsl.w	r3, r0, r6
 8000884:	d908      	bls.n	8000898 <__udivmoddi4+0x220>
 8000886:	1861      	adds	r1, r4, r1
 8000888:	f109 30ff 	add.w	r0, r9, #4294967295
 800088c:	d248      	bcs.n	8000920 <__udivmoddi4+0x2a8>
 800088e:	458a      	cmp	sl, r1
 8000890:	d946      	bls.n	8000920 <__udivmoddi4+0x2a8>
 8000892:	f1a9 0902 	sub.w	r9, r9, #2
 8000896:	4421      	add	r1, r4
 8000898:	eba1 010a 	sub.w	r1, r1, sl
 800089c:	b2bf      	uxth	r7, r7
 800089e:	fbb1 f0fe 	udiv	r0, r1, lr
 80008a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008aa:	fb00 f808 	mul.w	r8, r0, r8
 80008ae:	45b8      	cmp	r8, r7
 80008b0:	d907      	bls.n	80008c2 <__udivmoddi4+0x24a>
 80008b2:	19e7      	adds	r7, r4, r7
 80008b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b8:	d22e      	bcs.n	8000918 <__udivmoddi4+0x2a0>
 80008ba:	45b8      	cmp	r8, r7
 80008bc:	d92c      	bls.n	8000918 <__udivmoddi4+0x2a0>
 80008be:	3802      	subs	r0, #2
 80008c0:	4427      	add	r7, r4
 80008c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008c6:	eba7 0708 	sub.w	r7, r7, r8
 80008ca:	fba0 8902 	umull	r8, r9, r0, r2
 80008ce:	454f      	cmp	r7, r9
 80008d0:	46c6      	mov	lr, r8
 80008d2:	4649      	mov	r1, r9
 80008d4:	d31a      	bcc.n	800090c <__udivmoddi4+0x294>
 80008d6:	d017      	beq.n	8000908 <__udivmoddi4+0x290>
 80008d8:	b15d      	cbz	r5, 80008f2 <__udivmoddi4+0x27a>
 80008da:	ebb3 020e 	subs.w	r2, r3, lr
 80008de:	eb67 0701 	sbc.w	r7, r7, r1
 80008e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008e6:	40f2      	lsrs	r2, r6
 80008e8:	ea4c 0202 	orr.w	r2, ip, r2
 80008ec:	40f7      	lsrs	r7, r6
 80008ee:	e9c5 2700 	strd	r2, r7, [r5]
 80008f2:	2600      	movs	r6, #0
 80008f4:	4631      	mov	r1, r6
 80008f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e70b      	b.n	8000718 <__udivmoddi4+0xa0>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e9      	b.n	80006d8 <__udivmoddi4+0x60>
 8000904:	4618      	mov	r0, r3
 8000906:	e6fd      	b.n	8000704 <__udivmoddi4+0x8c>
 8000908:	4543      	cmp	r3, r8
 800090a:	d2e5      	bcs.n	80008d8 <__udivmoddi4+0x260>
 800090c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000910:	eb69 0104 	sbc.w	r1, r9, r4
 8000914:	3801      	subs	r0, #1
 8000916:	e7df      	b.n	80008d8 <__udivmoddi4+0x260>
 8000918:	4608      	mov	r0, r1
 800091a:	e7d2      	b.n	80008c2 <__udivmoddi4+0x24a>
 800091c:	4660      	mov	r0, ip
 800091e:	e78d      	b.n	800083c <__udivmoddi4+0x1c4>
 8000920:	4681      	mov	r9, r0
 8000922:	e7b9      	b.n	8000898 <__udivmoddi4+0x220>
 8000924:	4666      	mov	r6, ip
 8000926:	e775      	b.n	8000814 <__udivmoddi4+0x19c>
 8000928:	4630      	mov	r0, r6
 800092a:	e74a      	b.n	80007c2 <__udivmoddi4+0x14a>
 800092c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000930:	4439      	add	r1, r7
 8000932:	e713      	b.n	800075c <__udivmoddi4+0xe4>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	e724      	b.n	8000784 <__udivmoddi4+0x10c>
 800093a:	bf00      	nop

0800093c <__aeabi_idiv0>:
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4a07      	ldr	r2, [pc, #28]	; (800096c <vApplicationGetIdleTaskMemory+0x2c>)
 8000950:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	4a06      	ldr	r2, [pc, #24]	; (8000970 <vApplicationGetIdleTaskMemory+0x30>)
 8000956:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	200000b0 	.word	0x200000b0
 8000970:	20000104 	.word	0x20000104

08000974 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8000984:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <vApplicationGetTimerTaskMemory+0x30>)
 800098a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000992:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	20000304 	.word	0x20000304
 80009a4:	20000358 	.word	0x20000358

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b5b0      	push	{r4, r5, r7, lr}
 80009aa:	b0e2      	sub	sp, #392	; 0x188
 80009ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ae:	f002 fa75 	bl	8002e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b2:	f000 f9a3 	bl	8000cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f000 fbf5 	bl	80011a4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80009ba:	f000 fa31 	bl	8000e20 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80009be:	f000 fa67 	bl	8000e90 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80009c2:	f000 faa3 	bl	8000f0c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80009c6:	f000 fac7 	bl	8000f58 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80009ca:	f000 fb5d 	bl	8001088 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80009ce:	f000 fb8b 	bl	80010e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009d2:	f000 fbb9 	bl	8001148 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80009d6:	f000 fafd 	bl	8000fd4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80009da:	210c      	movs	r1, #12
 80009dc:	48a5      	ldr	r0, [pc, #660]	; (8000c74 <main+0x2cc>)
 80009de:	f005 fc71 	bl	80062c4 <HAL_TIM_PWM_Start>
	BSP_TSENSOR_Init();
 80009e2:	f001 fced 	bl	80023c0 <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 80009e6:	f001 fcbd 	bl	8002364 <BSP_HSENSOR_Init>
	LiquidCrystal(GPIOC, LCD_RS_Pin, LCD_E_Pin, LCD_E_Pin, LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin); //Initialize the LCD
 80009ea:	2301      	movs	r3, #1
 80009ec:	9303      	str	r3, [sp, #12]
 80009ee:	2302      	movs	r3, #2
 80009f0:	9302      	str	r3, [sp, #8]
 80009f2:	2304      	movs	r3, #4
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	2308      	movs	r3, #8
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2310      	movs	r3, #16
 80009fc:	2210      	movs	r2, #16
 80009fe:	2120      	movs	r1, #32
 8000a00:	489d      	ldr	r0, [pc, #628]	; (8000c78 <main+0x2d0>)
 8000a02:	f001 fd07 	bl	8002414 <LiquidCrystal>
	print("Caricamento..");
 8000a06:	489d      	ldr	r0, [pc, #628]	; (8000c7c <main+0x2d4>)
 8000a08:	f001 ffb2 	bl	8002970 <print>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex_temp */
  osMutexDef(myMutex_temp);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  myMutex_tempHandle = osMutexCreate(osMutex(myMutex_temp));
 8000a18:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f007 fbd9 	bl	80081d4 <osMutexCreate>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a96      	ldr	r2, [pc, #600]	; (8000c80 <main+0x2d8>)
 8000a26:	6013      	str	r3, [r2, #0]

  /* definition and creation of myMutex_hum */
  osMutexDef(myMutex_hum);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  myMutex_humHandle = osMutexCreate(osMutex(myMutex_hum));
 8000a34:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f007 fbcb 	bl	80081d4 <osMutexCreate>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4a90      	ldr	r2, [pc, #576]	; (8000c84 <main+0x2dc>)
 8000a42:	6013      	str	r3, [r2, #0]

  /* definition and creation of myMutex_LCD */
  osMutexDef(myMutex_LCD);
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  myMutex_LCDHandle = osMutexCreate(osMutex(myMutex_LCD));
 8000a50:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000a54:	4618      	mov	r0, r3
 8000a56:	f007 fbbd 	bl	80081d4 <osMutexCreate>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a8a      	ldr	r2, [pc, #552]	; (8000c88 <main+0x2e0>)
 8000a5e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimerLed1 */
  osTimerDef(myTimerLed1, CallbackLed1);
 8000a60:	4b8a      	ldr	r3, [pc, #552]	; (8000c8c <main+0x2e4>)
 8000a62:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000a66:	2300      	movs	r3, #0
 8000a68:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  myTimerLed1Handle = osTimerCreate(osTimer(myTimerLed1), osTimerPeriodic, NULL);
 8000a6c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000a70:	2200      	movs	r2, #0
 8000a72:	2101      	movs	r1, #1
 8000a74:	4618      	mov	r0, r3
 8000a76:	f007 faf9 	bl	800806c <osTimerCreate>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4a84      	ldr	r2, [pc, #528]	; (8000c90 <main+0x2e8>)
 8000a7e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimerLed2 */
  osTimerDef(myTimerLed2, CallbackLed2);
 8000a80:	4b84      	ldr	r3, [pc, #528]	; (8000c94 <main+0x2ec>)
 8000a82:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  myTimerLed2Handle = osTimerCreate(osTimer(myTimerLed2), osTimerPeriodic, NULL);
 8000a8c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000a90:	2200      	movs	r2, #0
 8000a92:	2101      	movs	r1, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f007 fae9 	bl	800806c <osTimerCreate>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4a7e      	ldr	r2, [pc, #504]	; (8000c98 <main+0x2f0>)
 8000a9e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Temp_monitor */
  osThreadDef(Temp_monitor, StartTemp_monitor, osPriorityAboveNormal, 0, 128);
 8000aa0:	4b7e      	ldr	r3, [pc, #504]	; (8000c9c <main+0x2f4>)
 8000aa2:	f507 749a 	add.w	r4, r7, #308	; 0x134
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Temp_monitorHandle = osThreadCreate(osThread(Temp_monitor), NULL);
 8000ab4:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f007 fa75 	bl	8007faa <osThreadCreate>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4a77      	ldr	r2, [pc, #476]	; (8000ca0 <main+0x2f8>)
 8000ac4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Hum_monitor */
  osThreadDef(Hum_monitor, StartHum_monitor, osPriorityAboveNormal, 0, 128);
 8000ac6:	4b77      	ldr	r3, [pc, #476]	; (8000ca4 <main+0x2fc>)
 8000ac8:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8000acc:	461d      	mov	r5, r3
 8000ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ad6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Hum_monitorHandle = osThreadCreate(osThread(Hum_monitor), NULL);
 8000ada:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f007 fa62 	bl	8007faa <osThreadCreate>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4a6f      	ldr	r2, [pc, #444]	; (8000ca8 <main+0x300>)
 8000aea:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD_temp */
  osThreadDef(LCD_temp, StartLCD_temp, osPriorityBelowNormal, 0, 128);
 8000aec:	4b6f      	ldr	r3, [pc, #444]	; (8000cac <main+0x304>)
 8000aee:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8000af2:	461d      	mov	r5, r3
 8000af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000afc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCD_tempHandle = osThreadCreate(osThread(LCD_temp), NULL);
 8000b00:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f007 fa4f 	bl	8007faa <osThreadCreate>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a68      	ldr	r2, [pc, #416]	; (8000cb0 <main+0x308>)
 8000b10:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD_hum */
  osThreadDef(LCD_hum, StartLCD_hum, osPriorityBelowNormal, 0, 128);
 8000b12:	4b68      	ldr	r3, [pc, #416]	; (8000cb4 <main+0x30c>)
 8000b14:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8000b18:	461d      	mov	r5, r3
 8000b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCD_humHandle = osThreadCreate(osThread(LCD_hum), NULL);
 8000b26:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f007 fa3c 	bl	8007faa <osThreadCreate>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4a60      	ldr	r2, [pc, #384]	; (8000cb8 <main+0x310>)
 8000b36:	6013      	str	r3, [r2, #0]

  /* definition and creation of Servo_manager */
  osThreadDef(Servo_manager, StartServo_manager, osPriorityIdle, 0, 128);
 8000b38:	4b60      	ldr	r3, [pc, #384]	; (8000cbc <main+0x314>)
 8000b3a:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000b3e:	461d      	mov	r5, r3
 8000b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Servo_managerHandle = osThreadCreate(osThread(Servo_manager), NULL);
 8000b4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f007 fa29 	bl	8007faa <osThreadCreate>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	4a59      	ldr	r2, [pc, #356]	; (8000cc0 <main+0x318>)
 8000b5c:	6013      	str	r3, [r2, #0]

  /* definition and creation of T_ProblemDetect */
  osThreadDef(T_ProblemDetect, StartT_ProblemDetect, osPriorityIdle, 0, 128);
 8000b5e:	4b59      	ldr	r3, [pc, #356]	; (8000cc4 <main+0x31c>)
 8000b60:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000b64:	461d      	mov	r5, r3
 8000b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  T_ProblemDetectHandle = osThreadCreate(osThread(T_ProblemDetect), NULL);
 8000b72:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f007 fa16 	bl	8007faa <osThreadCreate>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a51      	ldr	r2, [pc, #324]	; (8000cc8 <main+0x320>)
 8000b82:	6013      	str	r3, [r2, #0]

  /* definition and creation of H_ProblemDetect */
  osThreadDef(H_ProblemDetect, StartH_ProblemDetect, osPriorityIdle, 0, 128);
 8000b84:	4b51      	ldr	r3, [pc, #324]	; (8000ccc <main+0x324>)
 8000b86:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000b8a:	461d      	mov	r5, r3
 8000b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  H_ProblemDetectHandle = osThreadCreate(osThread(H_ProblemDetect), NULL);
 8000b98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f007 fa03 	bl	8007faa <osThreadCreate>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	4a4a      	ldr	r2, [pc, #296]	; (8000cd0 <main+0x328>)
 8000ba8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Buzzer_manager */
  osThreadDef(Buzzer_manager, StartBuzzer_manager, osPriorityIdle, 0, 128);
 8000baa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bae:	4a49      	ldr	r2, [pc, #292]	; (8000cd4 <main+0x32c>)
 8000bb0:	461c      	mov	r4, r3
 8000bb2:	4615      	mov	r5, r2
 8000bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Buzzer_managerHandle = osThreadCreate(osThread(Buzzer_manager), NULL);
 8000bc0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f007 f9ef 	bl	8007faa <osThreadCreate>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4a42      	ldr	r2, [pc, #264]	; (8000cd8 <main+0x330>)
 8000bd0:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD_TempProblem */
  osThreadDef(LCD_TempProblem, StartLCD_TempProblem, osPriorityIdle, 0, 128);
 8000bd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bd6:	4a41      	ldr	r2, [pc, #260]	; (8000cdc <main+0x334>)
 8000bd8:	461c      	mov	r4, r3
 8000bda:	4615      	mov	r5, r2
 8000bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCD_TempProblemHandle = osThreadCreate(osThread(LCD_TempProblem), NULL);
 8000be8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f007 f9db 	bl	8007faa <osThreadCreate>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4a3a      	ldr	r2, [pc, #232]	; (8000ce0 <main+0x338>)
 8000bf8:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD_HumProblem */
  osThreadDef(LCD_HumProblem, StartLCD_HumProblem, osPriorityIdle, 0, 128);
 8000bfa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bfe:	4a39      	ldr	r2, [pc, #228]	; (8000ce4 <main+0x33c>)
 8000c00:	461c      	mov	r4, r3
 8000c02:	4615      	mov	r5, r2
 8000c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCD_HumProblemHandle = osThreadCreate(osThread(LCD_HumProblem), NULL);
 8000c10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f007 f9c7 	bl	8007faa <osThreadCreate>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4a32      	ldr	r2, [pc, #200]	; (8000ce8 <main+0x340>)
 8000c20:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_manager */
  osThreadDef(LED_manager, StartLED_manager, osPriorityIdle, 0, 128);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4a31      	ldr	r2, [pc, #196]	; (8000cec <main+0x344>)
 8000c28:	461c      	mov	r4, r3
 8000c2a:	4615      	mov	r5, r2
 8000c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_managerHandle = osThreadCreate(osThread(LED_manager), NULL);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f007 f9b3 	bl	8007faa <osThreadCreate>
 8000c44:	4603      	mov	r3, r0
 8000c46:	4a2a      	ldr	r2, [pc, #168]	; (8000cf0 <main+0x348>)
 8000c48:	6013      	str	r3, [r2, #0]

  /* definition and creation of Button_manager */
  osThreadDef(Button_manager, StartButton_manager, osPriorityIdle, 0, 128);
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <main+0x34c>)
 8000c4e:	461c      	mov	r4, r3
 8000c50:	4615      	mov	r5, r2
 8000c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Button_managerHandle = osThreadCreate(osThread(Button_manager), NULL);
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f007 f9a1 	bl	8007faa <osThreadCreate>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <main+0x350>)
 8000c6c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c6e:	f007 f995 	bl	8007f9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <main+0x2ca>
 8000c74:	20002f58 	.word	0x20002f58
 8000c78:	48000800 	.word	0x48000800
 8000c7c:	0800be1c 	.word	0x0800be1c
 8000c80:	20002fb0 	.word	0x20002fb0
 8000c84:	20002974 	.word	0x20002974
 8000c88:	20002fa8 	.word	0x20002fa8
 8000c8c:	080018c9 	.word	0x080018c9
 8000c90:	20002e50 	.word	0x20002e50
 8000c94:	080018e9 	.word	0x080018e9
 8000c98:	20002968 	.word	0x20002968
 8000c9c:	0800be2c 	.word	0x0800be2c
 8000ca0:	20002e54 	.word	0x20002e54
 8000ca4:	0800be48 	.word	0x0800be48
 8000ca8:	20002f54 	.word	0x20002f54
 8000cac:	0800be64 	.word	0x0800be64
 8000cb0:	20002e58 	.word	0x20002e58
 8000cb4:	0800be80 	.word	0x0800be80
 8000cb8:	20002ec4 	.word	0x20002ec4
 8000cbc:	0800be9c 	.word	0x0800be9c
 8000cc0:	2000296c 	.word	0x2000296c
 8000cc4:	0800beb8 	.word	0x0800beb8
 8000cc8:	20002ec0 	.word	0x20002ec0
 8000ccc:	0800bed4 	.word	0x0800bed4
 8000cd0:	20002fac 	.word	0x20002fac
 8000cd4:	0800bef0 	.word	0x0800bef0
 8000cd8:	20002fa4 	.word	0x20002fa4
 8000cdc:	0800bf0c 	.word	0x0800bf0c
 8000ce0:	20002970 	.word	0x20002970
 8000ce4:	0800bf28 	.word	0x0800bf28
 8000ce8:	20002f50 	.word	0x20002f50
 8000cec:	0800bf44 	.word	0x0800bf44
 8000cf0:	20002ff8 	.word	0x20002ff8
 8000cf4:	0800bf60 	.word	0x0800bf60
 8000cf8:	20002ec8 	.word	0x20002ec8

08000cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0b8      	sub	sp, #224	; 0xe0
 8000d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d06:	2244      	movs	r2, #68	; 0x44
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f00a fbb6 	bl	800b47c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d10:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	463b      	mov	r3, r7
 8000d22:	2288      	movs	r2, #136	; 0x88
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f00a fba8 	bl	800b47c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d2c:	2310      	movs	r3, #16
 8000d2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d32:	2301      	movs	r3, #1
 8000d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d3e:	2360      	movs	r3, #96	; 0x60
 8000d40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d44:	2302      	movs	r3, #2
 8000d46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d50:	2301      	movs	r3, #1
 8000d52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d56:	2328      	movs	r3, #40	; 0x28
 8000d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 fe00 	bl	8004978 <HAL_RCC_OscConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000d7e:	f000 fdd5 	bl	800192c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d82:	230f      	movs	r3, #15
 8000d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000da0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000da4:	2104      	movs	r1, #4
 8000da6:	4618      	mov	r0, r3
 8000da8:	f004 f9cc 	bl	8005144 <HAL_RCC_ClockConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000db2:	f000 fdbb 	bl	800192c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <SystemClock_Config+0x120>)
 8000db8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000dcc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000dd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000dda:	2318      	movs	r3, #24
 8000ddc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000dde:	2307      	movs	r3, #7
 8000de0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000de2:	2302      	movs	r3, #2
 8000de4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000dea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dee:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df0:	463b      	mov	r3, r7
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 fbde 	bl	80055b4 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000dfe:	f000 fd95 	bl	800192c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e06:	f003 fc95 	bl	8004734 <HAL_PWREx_ControlVoltageScaling>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000e10:	f000 fd8c 	bl	800192c <Error_Handler>
  }
}
 8000e14:	bf00      	nop
 8000e16:	37e0      	adds	r7, #224	; 0xe0
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	00012085 	.word	0x00012085

08000e20 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <MX_DFSDM1_Init+0x68>)
 8000e26:	4a19      	ldr	r2, [pc, #100]	; (8000e8c <MX_DFSDM1_Init+0x6c>)
 8000e28:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_DFSDM1_Init+0x68>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_DFSDM1_Init+0x68>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_DFSDM1_Init+0x68>)
 8000e38:	2202      	movs	r2, #2
 8000e3a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_DFSDM1_Init+0x68>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_DFSDM1_Init+0x68>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_DFSDM1_Init+0x68>)
 8000e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <MX_DFSDM1_Init+0x68>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_DFSDM1_Init+0x68>)
 8000e58:	2204      	movs	r2, #4
 8000e5a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <MX_DFSDM1_Init+0x68>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_DFSDM1_Init+0x68>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <MX_DFSDM1_Init+0x68>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_DFSDM1_Init+0x68>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_DFSDM1_Init+0x68>)
 8000e76:	f002 f94f 	bl	8003118 <HAL_DFSDM_ChannelInit>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000e80:	f000 fd54 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20002930 	.word	0x20002930
 8000e8c:	40016020 	.word	0x40016020

08000e90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000e96:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <MX_I2C2_Init+0x78>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000e9c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000ea0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000ece:	f002 fd3a 	bl	8003946 <HAL_I2C_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ed8:	f000 fd28 	bl	800192c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	4809      	ldr	r0, [pc, #36]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000ee0:	f003 fa3a 	bl	8004358 <HAL_I2CEx_ConfigAnalogFilter>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000eea:	f000 fd1f 	bl	800192c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4804      	ldr	r0, [pc, #16]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000ef2:	f003 fa7c 	bl	80043ee <HAL_I2CEx_ConfigDigitalFilter>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000efc:	f000 fd16 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20002e04 	.word	0x20002e04
 8000f08:	40005800 	.word	0x40005800

08000f0c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_QUADSPI_Init+0x44>)
 8000f12:	4a10      	ldr	r2, [pc, #64]	; (8000f54 <MX_QUADSPI_Init+0x48>)
 8000f14:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_QUADSPI_Init+0x44>)
 8000f18:	2202      	movs	r2, #2
 8000f1a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_QUADSPI_Init+0x44>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_QUADSPI_Init+0x44>)
 8000f24:	2210      	movs	r2, #16
 8000f26:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_QUADSPI_Init+0x44>)
 8000f2a:	2217      	movs	r2, #23
 8000f2c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_QUADSPI_Init+0x44>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_QUADSPI_Init+0x44>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_QUADSPI_Init+0x44>)
 8000f3c:	f003 fc60 	bl	8004800 <HAL_QSPI_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000f46:	f000 fcf1 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20002fb4 	.word	0x20002fb4
 8000f54:	a0001000 	.word	0xa0001000

08000f58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <MX_SPI3_Init+0x78>)
 8000f60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f72:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f76:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000fa6:	2207      	movs	r2, #7
 8000fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000fb8:	f004 ffb8 	bl	8005f2c <HAL_SPI_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000fc2:	f000 fcb3 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20002e5c 	.word	0x20002e5c
 8000fd0:	40003c00 	.word	0x40003c00

08000fd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
 8000ff4:	615a      	str	r2, [r3, #20]
 8000ff6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <MX_TIM2_Init+0xb0>)
 8000ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001000:	4b20      	ldr	r3, [pc, #128]	; (8001084 <MX_TIM2_Init+0xb0>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_TIM2_Init+0xb0>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_TIM2_Init+0xb0>)
 800100e:	f04f 32ff 	mov.w	r2, #4294967295
 8001012:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_TIM2_Init+0xb0>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_TIM2_Init+0xb0>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001020:	4818      	ldr	r0, [pc, #96]	; (8001084 <MX_TIM2_Init+0xb0>)
 8001022:	f005 f8f7 	bl	8006214 <HAL_TIM_PWM_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800102c:	f000 fc7e 	bl	800192c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	4811      	ldr	r0, [pc, #68]	; (8001084 <MX_TIM2_Init+0xb0>)
 8001040:	f006 f834 	bl	80070ac <HAL_TIMEx_MasterConfigSynchronization>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800104a:	f000 fc6f 	bl	800192c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800104e:	2360      	movs	r3, #96	; 0x60
 8001050:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	220c      	movs	r2, #12
 8001062:	4619      	mov	r1, r3
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <MX_TIM2_Init+0xb0>)
 8001066:	f005 fb53 	bl	8006710 <HAL_TIM_PWM_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001070:	f000 fc5c 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <MX_TIM2_Init+0xb0>)
 8001076:	f000 fddd 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	; 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20002f58 	.word	0x20002f58

08001088 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <MX_USART1_UART_Init+0x5c>)
 8001090:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010cc:	f006 f894 	bl	80071f8 <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010d6:	f000 fc29 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20002ecc 	.word	0x20002ecc
 80010e4:	40013800 	.word	0x40013800

080010e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_USART3_UART_Init+0x58>)
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <MX_USART3_UART_Init+0x5c>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_USART3_UART_Init+0x58>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_USART3_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_USART3_UART_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_USART3_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_USART3_UART_Init+0x58>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_USART3_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MX_USART3_UART_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_USART3_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_USART3_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_USART3_UART_Init+0x58>)
 800112c:	f006 f864 	bl	80071f8 <HAL_UART_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001136:	f000 fbf9 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20002978 	.word	0x20002978
 8001144:	40004800 	.word	0x40004800

08001148 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800114e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001152:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001156:	2206      	movs	r2, #6
 8001158:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800115c:	2202      	movs	r2, #2
 800115e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001162:	2202      	movs	r2, #2
 8001164:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800118c:	f003 f97b 	bl	8004486 <HAL_PCD_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001196:	f000 fbc9 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200029fc 	.word	0x200029fc

080011a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ba:	4bba      	ldr	r3, [pc, #744]	; (80014a4 <MX_GPIO_Init+0x300>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	4ab9      	ldr	r2, [pc, #740]	; (80014a4 <MX_GPIO_Init+0x300>)
 80011c0:	f043 0310 	orr.w	r3, r3, #16
 80011c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c6:	4bb7      	ldr	r3, [pc, #732]	; (80014a4 <MX_GPIO_Init+0x300>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	4bb4      	ldr	r3, [pc, #720]	; (80014a4 <MX_GPIO_Init+0x300>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	4ab3      	ldr	r2, [pc, #716]	; (80014a4 <MX_GPIO_Init+0x300>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011de:	4bb1      	ldr	r3, [pc, #708]	; (80014a4 <MX_GPIO_Init+0x300>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	4bae      	ldr	r3, [pc, #696]	; (80014a4 <MX_GPIO_Init+0x300>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	4aad      	ldr	r2, [pc, #692]	; (80014a4 <MX_GPIO_Init+0x300>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f6:	4bab      	ldr	r3, [pc, #684]	; (80014a4 <MX_GPIO_Init+0x300>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4ba8      	ldr	r3, [pc, #672]	; (80014a4 <MX_GPIO_Init+0x300>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	4aa7      	ldr	r2, [pc, #668]	; (80014a4 <MX_GPIO_Init+0x300>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120e:	4ba5      	ldr	r3, [pc, #660]	; (80014a4 <MX_GPIO_Init+0x300>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	4ba2      	ldr	r3, [pc, #648]	; (80014a4 <MX_GPIO_Init+0x300>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4aa1      	ldr	r2, [pc, #644]	; (80014a4 <MX_GPIO_Init+0x300>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b9f      	ldr	r3, [pc, #636]	; (80014a4 <MX_GPIO_Init+0x300>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001232:	4b9c      	ldr	r3, [pc, #624]	; (80014a4 <MX_GPIO_Init+0x300>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a9b      	ldr	r2, [pc, #620]	; (80014a4 <MX_GPIO_Init+0x300>)
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b99      	ldr	r3, [pc, #612]	; (80014a4 <MX_GPIO_Init+0x300>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001250:	4895      	ldr	r0, [pc, #596]	; (80014a8 <MX_GPIO_Init+0x304>)
 8001252:	f002 fb23 	bl	800389c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8001256:	2200      	movs	r2, #0
 8001258:	f240 217f 	movw	r1, #639	; 0x27f
 800125c:	4893      	ldr	r0, [pc, #588]	; (80014ac <MX_GPIO_Init+0x308>)
 800125e:	f002 fb1d 	bl	800389c <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_RS_Pin|VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|Buzzer_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f248 1114 	movw	r1, #33044	; 0x8114
 8001268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126c:	f002 fb16 	bl	800389c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001270:	2200      	movs	r2, #0
 8001272:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001276:	488e      	ldr	r0, [pc, #568]	; (80014b0 <MX_GPIO_Init+0x30c>)
 8001278:	f002 fb10 	bl	800389c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	f241 0181 	movw	r1, #4225	; 0x1081
 8001282:	488c      	ldr	r0, [pc, #560]	; (80014b4 <MX_GPIO_Init+0x310>)
 8001284:	f002 fb0a 	bl	800389c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128e:	4889      	ldr	r0, [pc, #548]	; (80014b4 <MX_GPIO_Init+0x310>)
 8001290:	f002 fb04 	bl	800389c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	2120      	movs	r1, #32
 8001298:	4885      	ldr	r0, [pc, #532]	; (80014b0 <MX_GPIO_Init+0x30c>)
 800129a:	f002 faff 	bl	800389c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2101      	movs	r1, #1
 80012a2:	4881      	ldr	r0, [pc, #516]	; (80014a8 <MX_GPIO_Init+0x304>)
 80012a4:	f002 fafa 	bl	800389c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80012a8:	f240 1315 	movw	r3, #277	; 0x115
 80012ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	4879      	ldr	r0, [pc, #484]	; (80014a8 <MX_GPIO_Init+0x304>)
 80012c2:	f002 f835 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80012c6:	236a      	movs	r3, #106	; 0x6a
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ca:	4b7b      	ldr	r3, [pc, #492]	; (80014b8 <MX_GPIO_Init+0x314>)
 80012cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	4873      	ldr	r0, [pc, #460]	; (80014a8 <MX_GPIO_Init+0x304>)
 80012da:	f002 f829 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80012de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e4:	4b75      	ldr	r3, [pc, #468]	; (80014bc <MX_GPIO_Init+0x318>)
 80012e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	486e      	ldr	r0, [pc, #440]	; (80014ac <MX_GPIO_Init+0x308>)
 80012f4:	f002 f81c 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_E_Pin LCD_RS_Pin VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 80012f8:	f240 237f 	movw	r3, #639	; 0x27f
 80012fc:	61fb      	str	r3, [r7, #28]
                          |LCD_E_Pin|LCD_RS_Pin|VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	4866      	ldr	r0, [pc, #408]	; (80014ac <MX_GPIO_Init+0x308>)
 8001312:	f002 f80d 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001316:	2303      	movs	r3, #3
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001326:	2308      	movs	r3, #8
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001334:	f001 fffc 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin Buzzer_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|Buzzer_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001338:	f248 1314 	movw	r3, #33044	; 0x8114
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001354:	f001 ffec 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001358:	23e0      	movs	r3, #224	; 0xe0
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001368:	2305      	movs	r3, #5
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001376:	f001 ffdb 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800137a:	2301      	movs	r3, #1
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137e:	4b4e      	ldr	r3, [pc, #312]	; (80014b8 <MX_GPIO_Init+0x314>)
 8001380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	4619      	mov	r1, r3
 800138c:	4848      	ldr	r0, [pc, #288]	; (80014b0 <MX_GPIO_Init+0x30c>)
 800138e:	f001 ffcf 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001392:	2302      	movs	r3, #2
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001396:	230b      	movs	r3, #11
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	4842      	ldr	r0, [pc, #264]	; (80014b0 <MX_GPIO_Init+0x30c>)
 80013a6:	f001 ffc3 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80013aa:	f24f 0334 	movw	r3, #61492	; 0xf034
 80013ae:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	483b      	ldr	r0, [pc, #236]	; (80014b0 <MX_GPIO_Init+0x30c>)
 80013c4:	f001 ffb4 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80013c8:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80013cc:	61fb      	str	r3, [r7, #28]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ce:	4b3a      	ldr	r3, [pc, #232]	; (80014b8 <MX_GPIO_Init+0x314>)
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	4835      	ldr	r0, [pc, #212]	; (80014b4 <MX_GPIO_Init+0x310>)
 80013de:	f001 ffa7 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80013e2:	f243 0381 	movw	r3, #12417	; 0x3081
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4619      	mov	r1, r3
 80013fa:	482e      	ldr	r0, [pc, #184]	; (80014b4 <MX_GPIO_Init+0x310>)
 80013fc:	f001 ff98 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001400:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001406:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <MX_GPIO_Init+0x314>)
 8001408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4825      	ldr	r0, [pc, #148]	; (80014ac <MX_GPIO_Init+0x308>)
 8001416:	f001 ff8b 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800141a:	2302      	movs	r3, #2
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800142a:	2305      	movs	r3, #5
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	481f      	ldr	r0, [pc, #124]	; (80014b4 <MX_GPIO_Init+0x310>)
 8001436:	f001 ff7b 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800143a:	2378      	movs	r3, #120	; 0x78
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800144a:	2307      	movs	r3, #7
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	4817      	ldr	r0, [pc, #92]	; (80014b4 <MX_GPIO_Init+0x310>)
 8001456:	f001 ff6b 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800145a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001460:	2312      	movs	r3, #18
 8001462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001464:	2301      	movs	r3, #1
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146c:	2304      	movs	r3, #4
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	4619      	mov	r1, r3
 8001476:	480e      	ldr	r0, [pc, #56]	; (80014b0 <MX_GPIO_Init+0x30c>)
 8001478:	f001 ff5a 	bl	8003330 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2105      	movs	r1, #5
 8001480:	2017      	movs	r0, #23
 8001482:	f001 fe1f 	bl	80030c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001486:	2017      	movs	r0, #23
 8001488:	f001 fe38 	bl	80030fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2105      	movs	r1, #5
 8001490:	2028      	movs	r0, #40	; 0x28
 8001492:	f001 fe17 	bl	80030c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001496:	2028      	movs	r0, #40	; 0x28
 8001498:	f001 fe30 	bl	80030fc <HAL_NVIC_EnableIRQ>

}
 800149c:	bf00      	nop
 800149e:	3730      	adds	r7, #48	; 0x30
 80014a0:	46bd      	mov	sp, r7
 80014a2:	e00d      	b.n	80014c0 <MX_GPIO_Init+0x31c>
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48001000 	.word	0x48001000
 80014ac:	48000800 	.word	0x48000800
 80014b0:	48000400 	.word	0x48000400
 80014b4:	48000c00 	.word	0x48000c00
 80014b8:	10110000 	.word	0x10110000
 80014bc:	10210000 	.word	0x10210000
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop

080014c4 <StartTemp_monitor>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTemp_monitor */
void StartTemp_monitor(void const * argument)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		osMutexWait(myMutex_tempHandle, 10000);
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <StartTemp_monitor+0x38>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f242 7110 	movw	r1, #10000	; 0x2710
 80014d4:	4618      	mov	r0, r3
 80014d6:	f006 fe95 	bl	8008204 <osMutexWait>
		temp_value = BSP_TSENSOR_ReadTemp();
 80014da:	f000 ff8d 	bl	80023f8 <BSP_TSENSOR_ReadTemp>
 80014de:	eef0 7a40 	vmov.f32	s15, s0
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <StartTemp_monitor+0x3c>)
 80014e4:	edc3 7a00 	vstr	s15, [r3]
		osMutexRelease(myMutex_tempHandle);
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <StartTemp_monitor+0x38>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f006 fed7 	bl	80082a0 <osMutexRelease>
		osDelay(1000);  }
 80014f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f6:	f006 fda4 	bl	8008042 <osDelay>
		osMutexWait(myMutex_tempHandle, 10000);
 80014fa:	e7e7      	b.n	80014cc <StartTemp_monitor+0x8>
 80014fc:	20002fb0 	.word	0x20002fb0
 8001500:	20000758 	.word	0x20000758

08001504 <StartHum_monitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHum_monitor */
void StartHum_monitor(void const * argument)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHum_monitor */
  /* Infinite loop */
  for(;;)
  {
		osMutexWait(myMutex_humHandle, 10000);
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <StartHum_monitor+0x38>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f242 7110 	movw	r1, #10000	; 0x2710
 8001514:	4618      	mov	r0, r3
 8001516:	f006 fe75 	bl	8008204 <osMutexWait>
		hum_value = BSP_HSENSOR_ReadHumidity();
 800151a:	f000 ff43 	bl	80023a4 <BSP_HSENSOR_ReadHumidity>
 800151e:	eef0 7a40 	vmov.f32	s15, s0
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <StartHum_monitor+0x3c>)
 8001524:	edc3 7a00 	vstr	s15, [r3]
		osMutexRelease(myMutex_humHandle);
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <StartHum_monitor+0x38>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f006 feb7 	bl	80082a0 <osMutexRelease>
		osDelay(2000);
 8001532:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001536:	f006 fd84 	bl	8008042 <osDelay>
		osMutexWait(myMutex_humHandle, 10000);
 800153a:	e7e7      	b.n	800150c <StartHum_monitor+0x8>
 800153c:	20002974 	.word	0x20002974
 8001540:	2000075c 	.word	0x2000075c

08001544 <StartLCD_temp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD_temp */
void StartLCD_temp(void const * argument)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b0a0      	sub	sp, #128	; 0x80
 8001548:	af02      	add	r7, sp, #8
 800154a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD_temp */
	char str_tmpT2[100] = ""; // Formatted message to display the temperature value
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2260      	movs	r2, #96	; 0x60
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f009 ff8f 	bl	800b47c <memset>
  /* Infinite loop */
  for(;;)
  {
		osMutexWait(myMutex_LCDHandle, 10000);
 800155e:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <StartLCD_temp+0xd4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f242 7110 	movw	r1, #10000	; 0x2710
 8001566:	4618      	mov	r0, r3
 8001568:	f006 fe4c 	bl	8008204 <osMutexWait>
		clear();
 800156c:	f001 f9ae 	bl	80028cc <clear>
		int tmpIntT1 = temp_value;
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <StartLCD_temp+0xd8>)
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800157a:	ee17 3a90 	vmov	r3, s15
 800157e:	677b      	str	r3, [r7, #116]	; 0x74
		float tmpFracT = temp_value - tmpIntT1;
 8001580:	4b26      	ldr	r3, [pc, #152]	; (800161c <StartLCD_temp+0xd8>)
 8001582:	ed93 7a00 	vldr	s14, [r3]
 8001586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001594:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		int tmpIntT2 = trunc(tmpFracT * 100);
 8001598:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800159c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001620 <StartLCD_temp+0xdc>
 80015a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a4:	ee17 0a90 	vmov	r0, s15
 80015a8:	f7fe ffce 	bl	8000548 <__aeabi_f2d>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	ec43 2b10 	vmov	d0, r2, r3
 80015b4:	f00a fb9e 	bl	800bcf4 <trunc>
 80015b8:	ec53 2b10 	vmov	r2, r3, d0
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff f81a 	bl	80005f8 <__aeabi_d2iz>
 80015c4:	4603      	mov	r3, r0
 80015c6:	66fb      	str	r3, [r7, #108]	; 0x6c
		snprintf(str_tmpT2,100,"%d.%02d Celsius", tmpIntT1, tmpIntT2);
 80015c8:	f107 0008 	add.w	r0, r7, #8
 80015cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015d2:	4a14      	ldr	r2, [pc, #80]	; (8001624 <StartLCD_temp+0xe0>)
 80015d4:	2164      	movs	r1, #100	; 0x64
 80015d6:	f009 ff59 	bl	800b48c <sniprintf>
		setCursor(0, 0);
 80015da:	2100      	movs	r1, #0
 80015dc:	2000      	movs	r0, #0
 80015de:	f001 f97f 	bl	80028e0 <setCursor>
		print("TEMPERATURE"); //Print this
 80015e2:	4811      	ldr	r0, [pc, #68]	; (8001628 <StartLCD_temp+0xe4>)
 80015e4:	f001 f9c4 	bl	8002970 <print>
		setCursor(0, 1); //At secound row first column
 80015e8:	2101      	movs	r1, #1
 80015ea:	2000      	movs	r0, #0
 80015ec:	f001 f978 	bl	80028e0 <setCursor>
		print(str_tmpT2); //Print this
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	4618      	mov	r0, r3
 80015f6:	f001 f9bb 	bl	8002970 <print>
		osDelay(3000);
 80015fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015fe:	f006 fd20 	bl	8008042 <osDelay>
		osMutexRelease(myMutex_LCDHandle);
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <StartLCD_temp+0xd4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f006 fe4a 	bl	80082a0 <osMutexRelease>
		osDelay(3000);
 800160c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001610:	f006 fd17 	bl	8008042 <osDelay>
  {
 8001614:	e7a3      	b.n	800155e <StartLCD_temp+0x1a>
 8001616:	bf00      	nop
 8001618:	20002fa8 	.word	0x20002fa8
 800161c:	20000758 	.word	0x20000758
 8001620:	42c80000 	.word	0x42c80000
 8001624:	0800bf7c 	.word	0x0800bf7c
 8001628:	0800bf8c 	.word	0x0800bf8c

0800162c <StartLCD_hum>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD_hum */
void StartLCD_hum(void const * argument)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b0a0      	sub	sp, #128	; 0x80
 8001630:	af02      	add	r7, sp, #8
 8001632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD_hum */
	char str_tmpH2[100] = ""; // Formatted message to display the humidity value
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2260      	movs	r2, #96	; 0x60
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f009 ff1b 	bl	800b47c <memset>
  /* Infinite loop */
  for(;;)
  {
		osMutexWait(myMutex_LCDHandle, 10000);
 8001646:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <StartLCD_hum+0xd4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f242 7110 	movw	r1, #10000	; 0x2710
 800164e:	4618      	mov	r0, r3
 8001650:	f006 fdd8 	bl	8008204 <osMutexWait>
		clear();
 8001654:	f001 f93a 	bl	80028cc <clear>
		int tmpIntH1 = hum_value;
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <StartLCD_hum+0xd8>)
 800165a:	edd3 7a00 	vldr	s15, [r3]
 800165e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001662:	ee17 3a90 	vmov	r3, s15
 8001666:	677b      	str	r3, [r7, #116]	; 0x74
		float tmpFracH = hum_value - tmpIntH1;
 8001668:	4b26      	ldr	r3, [pc, #152]	; (8001704 <StartLCD_hum+0xd8>)
 800166a:	ed93 7a00 	vldr	s14, [r3]
 800166e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		int tmpIntH2 = trunc(tmpFracH * 100);
 8001680:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001684:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001708 <StartLCD_hum+0xdc>
 8001688:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168c:	ee17 0a90 	vmov	r0, s15
 8001690:	f7fe ff5a 	bl	8000548 <__aeabi_f2d>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	ec43 2b10 	vmov	d0, r2, r3
 800169c:	f00a fb2a 	bl	800bcf4 <trunc>
 80016a0:	ec53 2b10 	vmov	r2, r3, d0
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f7fe ffa6 	bl	80005f8 <__aeabi_d2iz>
 80016ac:	4603      	mov	r3, r0
 80016ae:	66fb      	str	r3, [r7, #108]	; 0x6c
		snprintf(str_tmpH2,100,"%d.%02d RH", tmpIntH1, tmpIntH2);
 80016b0:	f107 0008 	add.w	r0, r7, #8
 80016b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016ba:	4a14      	ldr	r2, [pc, #80]	; (800170c <StartLCD_hum+0xe0>)
 80016bc:	2164      	movs	r1, #100	; 0x64
 80016be:	f009 fee5 	bl	800b48c <sniprintf>
		setCursor(0, 0);
 80016c2:	2100      	movs	r1, #0
 80016c4:	2000      	movs	r0, #0
 80016c6:	f001 f90b 	bl	80028e0 <setCursor>
		print("UMIDITY"); //Print this
 80016ca:	4811      	ldr	r0, [pc, #68]	; (8001710 <StartLCD_hum+0xe4>)
 80016cc:	f001 f950 	bl	8002970 <print>
		setCursor(0, 1); //At secound row first column
 80016d0:	2101      	movs	r1, #1
 80016d2:	2000      	movs	r0, #0
 80016d4:	f001 f904 	bl	80028e0 <setCursor>
		print(str_tmpH2); //Print this
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	4618      	mov	r0, r3
 80016de:	f001 f947 	bl	8002970 <print>
		//print(millis() / 1000); //Print the value of secounds
		osDelay(3000);
 80016e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016e6:	f006 fcac 	bl	8008042 <osDelay>
		osMutexRelease(myMutex_LCDHandle);
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <StartLCD_hum+0xd4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f006 fdd6 	bl	80082a0 <osMutexRelease>
		osDelay(3000);
 80016f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016f8:	f006 fca3 	bl	8008042 <osDelay>
  {
 80016fc:	e7a3      	b.n	8001646 <StartLCD_hum+0x1a>
 80016fe:	bf00      	nop
 8001700:	20002fa8 	.word	0x20002fa8
 8001704:	2000075c 	.word	0x2000075c
 8001708:	42c80000 	.word	0x42c80000
 800170c:	0800bf98 	.word	0x0800bf98
 8001710:	0800bfa4 	.word	0x0800bfa4

08001714 <StartServo_manager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServo_manager */
void StartServo_manager(void const * argument)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartServo_manager */
	TIM2->PSC = 71;
 800171c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001720:	2247      	movs	r2, #71	; 0x47
 8001722:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 20000;
 8001724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001728:	f644 6220 	movw	r2, #20000	; 0x4e20
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1PE;
 800172e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001738:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 800173c:	6193      	str	r3, [r2, #24]
	TIM2->BDTR |= TIM_BDTR_MOE;
 800173e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
	TIM2->CCER |= TIM_CCER_CC1E;
 800174e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6213      	str	r3, [r2, #32]
	TIM2->CR1 |= TIM_CR1_ARPE;
 800175e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800176c:	6013      	str	r3, [r2, #0]
	TIM2->EGR |= TIM_EGR_UG;
 800176e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6153      	str	r3, [r2, #20]
	TIM2->CR1 |= TIM_CR1_CEN;
 800177e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
		//if(temp_value>25){
		TIM2->CCR4 = 5.556*0 + 1000;
 800178e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(2000);
 8001798:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800179c:	f001 fbb6 	bl	8002f0c <HAL_Delay>
		//osMutexRelease(myMutex01Handle);
		//} else if (temp_value < 25){
		TIM2->CCR4 = 5.556*300 + 1000;
 80017a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017a4:	f640 226a 	movw	r2, #2666	; 0xa6a
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(2000);
 80017aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017ae:	f001 fbad 	bl	8002f0c <HAL_Delay>
		//	osMutexRelease(myMutex01Handle);
		//}
		osDelay(5000);
 80017b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80017b6:	f006 fc44 	bl	8008042 <osDelay>
		TIM2->CCR4 = 5.556*0 + 1000;
 80017ba:	e7e8      	b.n	800178e <StartServo_manager+0x7a>

080017bc <StartT_ProblemDetect>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartT_ProblemDetect */
void StartT_ProblemDetect(void const * argument)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartT_ProblemDetect */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80017c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017c8:	f006 fc3b 	bl	8008042 <osDelay>
 80017cc:	e7fa      	b.n	80017c4 <StartT_ProblemDetect+0x8>

080017ce <StartH_ProblemDetect>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartH_ProblemDetect */
void StartH_ProblemDetect(void const * argument)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartH_ProblemDetect */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80017d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017da:	f006 fc32 	bl	8008042 <osDelay>
 80017de:	e7fa      	b.n	80017d6 <StartH_ProblemDetect+0x8>

080017e0 <StartBuzzer_manager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBuzzer_manager */
void StartBuzzer_manager(void const * argument)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBuzzer_manager */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2110      	movs	r1, #16
 80017ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f0:	f002 f854 	bl	800389c <HAL_GPIO_WritePin>
			osDelay(1000);
 80017f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017f8:	f006 fc23 	bl	8008042 <osDelay>
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2110      	movs	r1, #16
 8001800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001804:	f002 f84a 	bl	800389c <HAL_GPIO_WritePin>

			osDelay(1000);
 8001808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800180c:	f006 fc19 	bl	8008042 <osDelay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001810:	e7ea      	b.n	80017e8 <StartBuzzer_manager+0x8>

08001812 <StartLCD_TempProblem>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD_TempProblem */
void StartLCD_TempProblem(void const * argument)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD_TempProblem */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800181a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800181e:	f006 fc10 	bl	8008042 <osDelay>
 8001822:	e7fa      	b.n	800181a <StartLCD_TempProblem+0x8>

08001824 <StartLCD_HumProblem>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD_HumProblem */
void StartLCD_HumProblem(void const * argument)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD_HumProblem */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800182c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001830:	f006 fc07 	bl	8008042 <osDelay>
 8001834:	e7fa      	b.n	800182c <StartLCD_HumProblem+0x8>
	...

08001838 <StartLED_manager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_manager */
void StartLED_manager(void const * argument)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_manager */

  /* Infinite loop */
  for(;;)
  {
	osTimerStart(myTimerLed1Handle, 500);
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <StartLED_manager+0x4c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001848:	4618      	mov	r0, r3
 800184a:	f006 fc43 	bl	80080d4 <osTimerStart>
	osTimerStart(myTimerLed2Handle, 300);
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <StartLED_manager+0x50>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001856:	4618      	mov	r0, r3
 8001858:	f006 fc3c 	bl	80080d4 <osTimerStart>
    osDelay(4000);
 800185c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001860:	f006 fbef 	bl	8008042 <osDelay>
    osTimerStop(myTimerLed1Handle);
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <StartLED_manager+0x4c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f006 fc77 	bl	800815c <osTimerStop>
    osTimerStop(myTimerLed2Handle);
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <StartLED_manager+0x50>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f006 fc72 	bl	800815c <osTimerStop>
    osDelay(2000);
 8001878:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800187c:	f006 fbe1 	bl	8008042 <osDelay>
	osTimerStart(myTimerLed1Handle, 500);
 8001880:	e7de      	b.n	8001840 <StartLED_manager+0x8>
 8001882:	bf00      	nop
 8001884:	20002e50 	.word	0x20002e50
 8001888:	20002968 	.word	0x20002968

0800188c <StartButton_manager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButton_manager */
void StartButton_manager(void const * argument)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButton_manager */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN) == GPIO_PIN_RESET){
 8001894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001898:	4809      	ldr	r0, [pc, #36]	; (80018c0 <StartButton_manager+0x34>)
 800189a:	f001 ffe7 	bl	800386c <HAL_GPIO_ReadPin>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <StartButton_manager+0x24>
	  			//Here when the button is pressed
	  			clear();
 80018a4:	f001 f812 	bl	80028cc <clear>
	  			print("YES");
 80018a8:	4806      	ldr	r0, [pc, #24]	; (80018c4 <StartButton_manager+0x38>)
 80018aa:	f001 f861 	bl	8002970 <print>
 80018ae:	e002      	b.n	80018b6 <StartButton_manager+0x2a>
	  		} else {
	  			//Here is when it is NOT PRESSED
	  			osDelay(10);
 80018b0:	200a      	movs	r0, #10
 80018b2:	f006 fbc6 	bl	8008042 <osDelay>
	  		}
	  		osDelay(10);
 80018b6:	200a      	movs	r0, #10
 80018b8:	f006 fbc3 	bl	8008042 <osDelay>
	  if(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN) == GPIO_PIN_RESET){
 80018bc:	e7ea      	b.n	8001894 <StartButton_manager+0x8>
 80018be:	bf00      	nop
 80018c0:	48000800 	.word	0x48000800
 80018c4:	0800bfac 	.word	0x0800bfac

080018c8 <CallbackLed1>:
  /* USER CODE END StartButton_manager */
}

/* CallbackLed1 function */
void CallbackLed1(void const * argument)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackLed1 */
	HAL_GPIO_TogglePin (LED2_GPIO_PORT, LED2_PIN);
 80018d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <CallbackLed1+0x1c>)
 80018d6:	f001 fff9 	bl	80038cc <HAL_GPIO_TogglePin>

  /* USER CODE END CallbackLed1 */
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	48000400 	.word	0x48000400

080018e8 <CallbackLed2>:

/* CallbackLed2 function */
void CallbackLed2(void const * argument)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackLed2 */
	HAL_GPIO_TogglePin (LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 80018f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <CallbackLed2+0x1c>)
 80018f6:	f001 ffe9 	bl	80038cc <HAL_GPIO_TogglePin>

  /* USER CODE END CallbackLed2 */
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	48000800 	.word	0x48000800

08001908 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800191a:	f001 fad7 	bl	8002ecc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40014800 	.word	0x40014800

0800192c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
}
 8001932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001934:	e7fe      	b.n	8001934 <Error_Handler+0x8>
	...

08001938 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_MspInit+0x4c>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <HAL_MspInit+0x4c>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6613      	str	r3, [r2, #96]	; 0x60
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_MspInit+0x4c>)
 800194c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_MspInit+0x4c>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <HAL_MspInit+0x4c>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	6593      	str	r3, [r2, #88]	; 0x58
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_MspInit+0x4c>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	210f      	movs	r1, #15
 8001972:	f06f 0001 	mvn.w	r0, #1
 8001976:	f001 fba5 	bl	80030c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000

08001988 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x84>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d12d      	bne.n	8001a04 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x88>)
 80019aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ac:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x88>)
 80019ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b2:	6613      	str	r3, [r2, #96]	; 0x60
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x88>)
 80019b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x88>)
 80019c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c4:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x88>)
 80019c6:	f043 0310 	orr.w	r3, r3, #16
 80019ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x88>)
 80019ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80019d8:	f44f 7320 	mov.w	r3, #640	; 0x280
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019ea:	2306      	movs	r3, #6
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4807      	ldr	r0, [pc, #28]	; (8001a14 <HAL_DFSDM_ChannelMspInit+0x8c>)
 80019f6:	f001 fc9b 	bl	8003330 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x84>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	4a02      	ldr	r2, [pc, #8]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x84>)
 8001a02:	6013      	str	r3, [r2, #0]
  }

}
 8001a04:	bf00      	nop
 8001a06:	3728      	adds	r7, #40	; 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000760 	.word	0x20000760
 8001a10:	40021000 	.word	0x40021000
 8001a14:	48001000 	.word	0x48001000

08001a18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <HAL_I2C_MspInit+0x7c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d128      	bne.n	8001a8c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <HAL_I2C_MspInit+0x80>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	4a16      	ldr	r2, [pc, #88]	; (8001a98 <HAL_I2C_MspInit+0x80>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <HAL_I2C_MspInit+0x80>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001a52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a58:	2312      	movs	r3, #18
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a64:	2304      	movs	r3, #4
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480b      	ldr	r0, [pc, #44]	; (8001a9c <HAL_I2C_MspInit+0x84>)
 8001a70:	f001 fc5e 	bl	8003330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_I2C_MspInit+0x80>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <HAL_I2C_MspInit+0x80>)
 8001a7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_I2C_MspInit+0x80>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40005800 	.word	0x40005800
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	48000400 	.word	0x48000400

08001aa0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <HAL_I2C_MspDeInit+0x3c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d10f      	bne.n	8001ad2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_I2C_MspDeInit+0x40>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_I2C_MspDeInit+0x40>)
 8001ab8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001abc:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001abe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ac2:	4808      	ldr	r0, [pc, #32]	; (8001ae4 <HAL_I2C_MspDeInit+0x44>)
 8001ac4:	f001 fdde 	bl	8003684 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001ac8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <HAL_I2C_MspDeInit+0x44>)
 8001ace:	f001 fdd9 	bl	8003684 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40005800 	.word	0x40005800
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	48000400 	.word	0x48000400

08001ae8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <HAL_QSPI_MspInit+0x7c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d128      	bne.n	8001b5c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <HAL_QSPI_MspInit+0x80>)
 8001b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0e:	4a16      	ldr	r2, [pc, #88]	; (8001b68 <HAL_QSPI_MspInit+0x80>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6513      	str	r3, [r2, #80]	; 0x50
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_QSPI_MspInit+0x80>)
 8001b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <HAL_QSPI_MspInit+0x80>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	4a10      	ldr	r2, [pc, #64]	; (8001b68 <HAL_QSPI_MspInit+0x80>)
 8001b28:	f043 0310 	orr.w	r3, r3, #16
 8001b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_QSPI_MspInit+0x80>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001b3a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b3e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b4c:	230a      	movs	r3, #10
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4805      	ldr	r0, [pc, #20]	; (8001b6c <HAL_QSPI_MspInit+0x84>)
 8001b58:	f001 fbea 	bl	8003330 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001b5c:	bf00      	nop
 8001b5e:	3728      	adds	r7, #40	; 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	a0001000 	.word	0xa0001000
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	48001000 	.word	0x48001000

08001b70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a17      	ldr	r2, [pc, #92]	; (8001bec <HAL_SPI_MspInit+0x7c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d128      	bne.n	8001be4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_SPI_MspInit+0x80>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	4a16      	ldr	r2, [pc, #88]	; (8001bf0 <HAL_SPI_MspInit+0x80>)
 8001b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_SPI_MspInit+0x80>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_SPI_MspInit+0x80>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <HAL_SPI_MspInit+0x80>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_SPI_MspInit+0x80>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001bc2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bd4:	2306      	movs	r3, #6
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <HAL_SPI_MspInit+0x84>)
 8001be0:	f001 fba6 	bl	8003330 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	; 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40003c00 	.word	0x40003c00
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	48000800 	.word	0x48000800

08001bf8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c08:	d10b      	bne.n	8001c22 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_TIM_PWM_MspInit+0x38>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <HAL_TIM_PWM_MspInit+0x38>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6593      	str	r3, [r2, #88]	; 0x58
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_TIM_PWM_MspInit+0x38>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000

08001c34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c54:	d11c      	bne.n	8001c90 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_TIM_MspPostInit+0x64>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <HAL_TIM_MspPostInit+0x64>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c62:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <HAL_TIM_MspPostInit+0x64>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001c6e:	2308      	movs	r3, #8
 8001c70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	4619      	mov	r1, r3
 8001c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8c:	f001 fb50 	bl	8003330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c90:	bf00      	nop
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000

08001c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	; 0x30
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a2e      	ldr	r2, [pc, #184]	; (8001d74 <HAL_UART_MspInit+0xd8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d128      	bne.n	8001d10 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cbe:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc2:	4a2d      	ldr	r2, [pc, #180]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cda:	4a27      	ldr	r2, [pc, #156]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce2:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001cee:	23c0      	movs	r3, #192	; 0xc0
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cfe:	2307      	movs	r3, #7
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	481c      	ldr	r0, [pc, #112]	; (8001d7c <HAL_UART_MspInit+0xe0>)
 8001d0a:	f001 fb11 	bl	8003330 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d0e:	e02d      	b.n	8001d6c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1a      	ldr	r2, [pc, #104]	; (8001d80 <HAL_UART_MspInit+0xe4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d128      	bne.n	8001d6c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d24:	6593      	str	r3, [r2, #88]	; 0x58
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001d4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d5c:	2307      	movs	r3, #7
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	4619      	mov	r1, r3
 8001d66:	4807      	ldr	r0, [pc, #28]	; (8001d84 <HAL_UART_MspInit+0xe8>)
 8001d68:	f001 fae2 	bl	8003330 <HAL_GPIO_Init>
}
 8001d6c:	bf00      	nop
 8001d6e:	3730      	adds	r7, #48	; 0x30
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	48000400 	.word	0x48000400
 8001d80:	40004800 	.word	0x40004800
 8001d84:	48000c00 	.word	0x48000c00

08001d88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001da8:	d154      	bne.n	8001e54 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HAL_PCD_MspInit+0xd4>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	4a2b      	ldr	r2, [pc, #172]	; (8001e5c <HAL_PCD_MspInit+0xd4>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db6:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <HAL_PCD_MspInit+0xd4>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dda:	f001 faa9 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001dde:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dec:	2303      	movs	r3, #3
 8001dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001df0:	230a      	movs	r3, #10
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dfe:	f001 fa97 	bl	8003330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <HAL_PCD_MspInit+0xd4>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	4a15      	ldr	r2, [pc, #84]	; (8001e5c <HAL_PCD_MspInit+0xd4>)
 8001e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_PCD_MspInit+0xd4>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_PCD_MspInit+0xd4>)
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d114      	bne.n	8001e50 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <HAL_PCD_MspInit+0xd4>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <HAL_PCD_MspInit+0xd4>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e30:	6593      	str	r3, [r2, #88]	; 0x58
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_PCD_MspInit+0xd4>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001e3e:	f002 fccf 	bl	80047e0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_PCD_MspInit+0xd4>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <HAL_PCD_MspInit+0xd4>)
 8001e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e4e:	e001      	b.n	8001e54 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001e50:	f002 fcc6 	bl	80047e0 <HAL_PWREx_EnableVddUSB>
}
 8001e54:	bf00      	nop
 8001e56:	3728      	adds	r7, #40	; 0x28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000

08001e60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08c      	sub	sp, #48	; 0x30
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8001e70:	2200      	movs	r2, #0
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	201a      	movs	r0, #26
 8001e76:	f001 f925 	bl	80030c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001e7a:	201a      	movs	r0, #26
 8001e7c:	f001 f93e 	bl	80030fc <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_InitTick+0x9c>)
 8001e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e84:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_InitTick+0x9c>)
 8001e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e8a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_InitTick+0x9c>)
 8001e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e98:	f107 0210 	add.w	r2, r7, #16
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 faf4 	bl	8005490 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ea8:	f003 fadc 	bl	8005464 <HAL_RCC_GetPCLK2Freq>
 8001eac:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <HAL_InitTick+0xa0>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	0c9b      	lsrs	r3, r3, #18
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <HAL_InitTick+0xa4>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <HAL_InitTick+0xa8>)
 8001ec0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_InitTick+0xa4>)
 8001ec4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ec8:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001eca:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <HAL_InitTick+0xa4>)
 8001ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ece:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_InitTick+0xa4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_InitTick+0xa4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001edc:	4809      	ldr	r0, [pc, #36]	; (8001f04 <HAL_InitTick+0xa4>)
 8001ede:	f004 f8c8 	bl	8006072 <HAL_TIM_Base_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d104      	bne.n	8001ef2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001ee8:	4806      	ldr	r0, [pc, #24]	; (8001f04 <HAL_InitTick+0xa4>)
 8001eea:	f004 f923 	bl	8006134 <HAL_TIM_Base_Start_IT>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	e000      	b.n	8001ef4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3730      	adds	r7, #48	; 0x30
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	431bde83 	.word	0x431bde83
 8001f04:	20002ffc 	.word	0x20002ffc
 8001f08:	40014800 	.word	0x40014800

08001f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <NMI_Handler+0x4>

08001f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <HardFault_Handler+0x4>

08001f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <MemManage_Handler+0x4>

08001f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <BusFault_Handler+0x4>

08001f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <UsageFault_Handler+0x4>

08001f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001f3c:	2020      	movs	r0, #32
 8001f3e:	f001 fcdf 	bl	8003900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001f42:	2040      	movs	r0, #64	; 0x40
 8001f44:	f001 fcdc 	bl	8003900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001f48:	2080      	movs	r0, #128	; 0x80
 8001f4a:	f001 fcd9 	bl	8003900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001f4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f52:	f001 fcd5 	bl	8003900 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001f62:	f004 fab5 	bl	80064d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20002ffc 	.word	0x20002ffc

08001f70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001f74:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f78:	f001 fcc2 	bl	8003900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001f7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f80:	f001 fcbe 	bl	8003900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f88:	f001 fcba 	bl	8003900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001f8c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f90:	f001 fcb6 	bl	8003900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001f94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f98:	f001 fcb2 	bl	8003900 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <_sbrk+0x5c>)
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <_sbrk+0x60>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <_sbrk+0x64>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <_sbrk+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd0:	f009 fa1c 	bl	800b40c <__errno>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	e009      	b.n	8001ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <_sbrk+0x64>)
 8001ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20018000 	.word	0x20018000
 8002000:	00000400 	.word	0x00000400
 8002004:	20000764 	.word	0x20000764
 8002008:	20003198 	.word	0x20003198

0800200c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <SystemInit+0x5c>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002016:	4a14      	ldr	r2, [pc, #80]	; (8002068 <SystemInit+0x5c>)
 8002018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800201c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <SystemInit+0x60>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a11      	ldr	r2, [pc, #68]	; (800206c <SystemInit+0x60>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <SystemInit+0x60>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <SystemInit+0x60>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a0d      	ldr	r2, [pc, #52]	; (800206c <SystemInit+0x60>)
 8002038:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800203c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002040:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <SystemInit+0x60>)
 8002044:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002048:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <SystemInit+0x60>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a07      	ldr	r2, [pc, #28]	; (800206c <SystemInit+0x60>)
 8002050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002054:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <SystemInit+0x60>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000ed00 	.word	0xe000ed00
 800206c:	40021000 	.word	0x40021000

08002070 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002074:	f7ff ffca 	bl	800200c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002078:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800207a:	e003      	b.n	8002084 <LoopCopyDataInit>

0800207c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800207e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002080:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002082:	3104      	adds	r1, #4

08002084 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002084:	480a      	ldr	r0, [pc, #40]	; (80020b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002088:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800208a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800208c:	d3f6      	bcc.n	800207c <CopyDataInit>
	ldr	r2, =_sbss
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002090:	e002      	b.n	8002098 <LoopFillZerobss>

08002092 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002092:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002094:	f842 3b04 	str.w	r3, [r2], #4

08002098 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <LoopForever+0x16>)
	cmp	r2, r3
 800209a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800209c:	d3f9      	bcc.n	8002092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800209e:	f009 f9bb 	bl	800b418 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020a2:	f7fe fc81 	bl	80009a8 <main>

080020a6 <LoopForever>:

LoopForever:
    b LoopForever
 80020a6:	e7fe      	b.n	80020a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020a8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80020ac:	0800c058 	.word	0x0800c058
	ldr	r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020b4:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 80020b8:	20000094 	.word	0x20000094
	ldr	r3, = _ebss
 80020bc:	20003194 	.word	0x20003194

080020c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020c0:	e7fe      	b.n	80020c0 <ADC1_2_IRQHandler>
	...

080020c4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	; 0x28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80020cc:	4b27      	ldr	r3, [pc, #156]	; (800216c <I2Cx_MspInit+0xa8>)
 80020ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d0:	4a26      	ldr	r2, [pc, #152]	; (800216c <I2Cx_MspInit+0xa8>)
 80020d2:	f043 0302 	orr.w	r3, r3, #2
 80020d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <I2Cx_MspInit+0xa8>)
 80020da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80020e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020e8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80020ea:	2312      	movs	r3, #18
 80020ec:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80020ee:	2301      	movs	r3, #1
 80020f0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80020f6:	2304      	movs	r3, #4
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	4619      	mov	r1, r3
 8002100:	481b      	ldr	r0, [pc, #108]	; (8002170 <I2Cx_MspInit+0xac>)
 8002102:	f001 f915 	bl	8003330 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	4818      	ldr	r0, [pc, #96]	; (8002170 <I2Cx_MspInit+0xac>)
 800210e:	f001 f90f 	bl	8003330 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002112:	4b16      	ldr	r3, [pc, #88]	; (800216c <I2Cx_MspInit+0xa8>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	4a15      	ldr	r2, [pc, #84]	; (800216c <I2Cx_MspInit+0xa8>)
 8002118:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800211c:	6593      	str	r3, [r2, #88]	; 0x58
 800211e:	4b13      	ldr	r3, [pc, #76]	; (800216c <I2Cx_MspInit+0xa8>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <I2Cx_MspInit+0xa8>)
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	4a0f      	ldr	r2, [pc, #60]	; (800216c <I2Cx_MspInit+0xa8>)
 8002130:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002134:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <I2Cx_MspInit+0xa8>)
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	4a0c      	ldr	r2, [pc, #48]	; (800216c <I2Cx_MspInit+0xa8>)
 800213c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002140:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	210f      	movs	r1, #15
 8002146:	2021      	movs	r0, #33	; 0x21
 8002148:	f000 ffbc 	bl	80030c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800214c:	2021      	movs	r0, #33	; 0x21
 800214e:	f000 ffd5 	bl	80030fc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	210f      	movs	r1, #15
 8002156:	2022      	movs	r0, #34	; 0x22
 8002158:	f000 ffb4 	bl	80030c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800215c:	2022      	movs	r0, #34	; 0x22
 800215e:	f000 ffcd 	bl	80030fc <HAL_NVIC_EnableIRQ>
}
 8002162:	bf00      	nop
 8002164:	3728      	adds	r7, #40	; 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	48000400 	.word	0x48000400

08002174 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <I2Cx_Init+0x54>)
 8002180:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a11      	ldr	r2, [pc, #68]	; (80021cc <I2Cx_Init+0x58>)
 8002186:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff89 	bl	80020c4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f001 fbc7 	bl	8003946 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80021b8:	2100      	movs	r1, #0
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f002 f8cc 	bl	8004358 <HAL_I2CEx_ConfigAnalogFilter>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40005800 	.word	0x40005800
 80021cc:	00702681 	.word	0x00702681

080021d0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af04      	add	r7, sp, #16
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	4608      	mov	r0, r1
 80021da:	4611      	mov	r1, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	4603      	mov	r3, r0
 80021e0:	72fb      	strb	r3, [r7, #11]
 80021e2:	460b      	mov	r3, r1
 80021e4:	813b      	strh	r3, [r7, #8]
 80021e6:	4613      	mov	r3, r2
 80021e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80021ee:	7afb      	ldrb	r3, [r7, #11]
 80021f0:	b299      	uxth	r1, r3
 80021f2:	88f8      	ldrh	r0, [r7, #6]
 80021f4:	893a      	ldrh	r2, [r7, #8]
 80021f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fa:	9302      	str	r3, [sp, #8]
 80021fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	4603      	mov	r3, r0
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f001 fd70 	bl	8003cec <HAL_I2C_Mem_Read>
 800220c:	4603      	mov	r3, r0
 800220e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002210:	7dfb      	ldrb	r3, [r7, #23]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8002216:	7afb      	ldrb	r3, [r7, #11]
 8002218:	4619      	mov	r1, r3
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f832 	bl	8002284 <I2Cx_Error>
  }
  return status;
 8002220:	7dfb      	ldrb	r3, [r7, #23]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b08a      	sub	sp, #40	; 0x28
 800222e:	af04      	add	r7, sp, #16
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	4608      	mov	r0, r1
 8002234:	4611      	mov	r1, r2
 8002236:	461a      	mov	r2, r3
 8002238:	4603      	mov	r3, r0
 800223a:	72fb      	strb	r3, [r7, #11]
 800223c:	460b      	mov	r3, r1
 800223e:	813b      	strh	r3, [r7, #8]
 8002240:	4613      	mov	r3, r2
 8002242:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002248:	7afb      	ldrb	r3, [r7, #11]
 800224a:	b299      	uxth	r1, r3
 800224c:	88f8      	ldrh	r0, [r7, #6]
 800224e:	893a      	ldrh	r2, [r7, #8]
 8002250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002254:	9302      	str	r3, [sp, #8]
 8002256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	4603      	mov	r3, r0
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f001 fc2f 	bl	8003ac4 <HAL_I2C_Mem_Write>
 8002266:	4603      	mov	r3, r0
 8002268:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800226a:	7dfb      	ldrb	r3, [r7, #23]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d004      	beq.n	800227a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002270:	7afb      	ldrb	r3, [r7, #11]
 8002272:	4619      	mov	r1, r3
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f805 	bl	8002284 <I2Cx_Error>
  }
  return status;
 800227a:	7dfb      	ldrb	r3, [r7, #23]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f001 fbe7 	bl	8003a64 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ff6c 	bl	8002174 <I2Cx_Init>
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <SENSOR_IO_Init+0x10>)
 80022aa:	f7ff ff63 	bl	8002174 <I2Cx_Init>
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200030cc 	.word	0x200030cc

080022b8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af02      	add	r7, sp, #8
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
 80022c2:	460b      	mov	r3, r1
 80022c4:	71bb      	strb	r3, [r7, #6]
 80022c6:	4613      	mov	r3, r2
 80022c8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80022ca:	79bb      	ldrb	r3, [r7, #6]
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	79f9      	ldrb	r1, [r7, #7]
 80022d0:	2301      	movs	r3, #1
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	1d7b      	adds	r3, r7, #5
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2301      	movs	r3, #1
 80022da:	4803      	ldr	r0, [pc, #12]	; (80022e8 <SENSOR_IO_Write+0x30>)
 80022dc:	f7ff ffa5 	bl	800222a <I2Cx_WriteMultiple>
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	200030cc 	.word	0x200030cc

080022ec <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	4603      	mov	r3, r0
 80022f4:	460a      	mov	r2, r1
 80022f6:	71fb      	strb	r3, [r7, #7]
 80022f8:	4613      	mov	r3, r2
 80022fa:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	b29a      	uxth	r2, r3
 8002304:	79f9      	ldrb	r1, [r7, #7]
 8002306:	2301      	movs	r3, #1
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	f107 030f 	add.w	r3, r7, #15
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	2301      	movs	r3, #1
 8002312:	4804      	ldr	r0, [pc, #16]	; (8002324 <SENSOR_IO_Read+0x38>)
 8002314:	f7ff ff5c 	bl	80021d0 <I2Cx_ReadMultiple>

  return read_value;
 8002318:	7bfb      	ldrb	r3, [r7, #15]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200030cc 	.word	0x200030cc

08002328 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af02      	add	r7, sp, #8
 800232e:	603a      	str	r2, [r7, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
 8002336:	460b      	mov	r3, r1
 8002338:	71bb      	strb	r3, [r7, #6]
 800233a:	4613      	mov	r3, r2
 800233c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800233e:	79bb      	ldrb	r3, [r7, #6]
 8002340:	b29a      	uxth	r2, r3
 8002342:	79f9      	ldrb	r1, [r7, #7]
 8002344:	88bb      	ldrh	r3, [r7, #4]
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2301      	movs	r3, #1
 800234e:	4804      	ldr	r0, [pc, #16]	; (8002360 <SENSOR_IO_ReadMultiple+0x38>)
 8002350:	f7ff ff3e 	bl	80021d0 <I2Cx_ReadMultiple>
 8002354:	4603      	mov	r3, r0
 8002356:	b29b      	uxth	r3, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200030cc 	.word	0x200030cc

08002364 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <BSP_HSENSOR_Init+0x38>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	20be      	movs	r0, #190	; 0xbe
 8002370:	4798      	blx	r3
 8002372:	4603      	mov	r3, r0
 8002374:	2bbc      	cmp	r3, #188	; 0xbc
 8002376:	d002      	beq.n	800237e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	e009      	b.n	8002392 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <BSP_HSENSOR_Init+0x3c>)
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <BSP_HSENSOR_Init+0x38>)
 8002382:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <BSP_HSENSOR_Init+0x3c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	20be      	movs	r0, #190	; 0xbe
 800238c:	4798      	blx	r3
    ret = HSENSOR_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002392:	687b      	ldr	r3, [r7, #4]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000008 	.word	0x20000008
 80023a0:	20000768 	.word	0x20000768

080023a4 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <BSP_HSENSOR_ReadHumidity+0x18>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	20be      	movs	r0, #190	; 0xbe
 80023b0:	4798      	blx	r3
 80023b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80023b6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000768 	.word	0x20000768

080023c0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <BSP_TSENSOR_Init+0x30>)
 80023cc:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <BSP_TSENSOR_Init+0x34>)
 80023ce:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80023d0:	f7ff ff68 	bl	80022a4 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <BSP_TSENSOR_Init+0x30>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2100      	movs	r1, #0
 80023dc:	20be      	movs	r0, #190	; 0xbe
 80023de:	4798      	blx	r3

  ret = TSENSOR_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80023e4:	79fb      	ldrb	r3, [r7, #7]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000076c 	.word	0x2000076c
 80023f4:	20000014 	.word	0x20000014

080023f8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <BSP_TSENSOR_ReadTemp+0x18>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	20be      	movs	r0, #190	; 0xbe
 8002404:	4798      	blx	r3
 8002406:	eef0 7a40 	vmov.f32	s15, s0
}
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	bd80      	pop	{r7, pc}
 8002410:	2000076c 	.word	0x2000076c

08002414 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08e      	sub	sp, #56	; 0x38
 8002418:	af0a      	add	r7, sp, #40	; 0x28
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	4608      	mov	r0, r1
 800241e:	4611      	mov	r1, r2
 8002420:	461a      	mov	r2, r3
 8002422:	4603      	mov	r3, r0
 8002424:	817b      	strh	r3, [r7, #10]
 8002426:	460b      	mov	r3, r1
 8002428:	813b      	strh	r3, [r7, #8]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <LiquidCrystal+0x90>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d019      	beq.n	800246a <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8002436:	8939      	ldrh	r1, [r7, #8]
 8002438:	897a      	ldrh	r2, [r7, #10]
 800243a:	2300      	movs	r3, #0
 800243c:	9308      	str	r3, [sp, #32]
 800243e:	2300      	movs	r3, #0
 8002440:	9307      	str	r3, [sp, #28]
 8002442:	2300      	movs	r3, #0
 8002444:	9306      	str	r3, [sp, #24]
 8002446:	2300      	movs	r3, #0
 8002448:	9305      	str	r3, [sp, #20]
 800244a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800244c:	9304      	str	r3, [sp, #16]
 800244e:	8c3b      	ldrh	r3, [r7, #32]
 8002450:	9303      	str	r3, [sp, #12]
 8002452:	8bbb      	ldrh	r3, [r7, #28]
 8002454:	9302      	str	r3, [sp, #8]
 8002456:	8b3b      	ldrh	r3, [r7, #24]
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	460b      	mov	r3, r1
 8002460:	68f9      	ldr	r1, [r7, #12]
 8002462:	2001      	movs	r0, #1
 8002464:	f000 f820 	bl	80024a8 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8002468:	e018      	b.n	800249c <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800246a:	8939      	ldrh	r1, [r7, #8]
 800246c:	897a      	ldrh	r2, [r7, #10]
 800246e:	2300      	movs	r3, #0
 8002470:	9308      	str	r3, [sp, #32]
 8002472:	2300      	movs	r3, #0
 8002474:	9307      	str	r3, [sp, #28]
 8002476:	2300      	movs	r3, #0
 8002478:	9306      	str	r3, [sp, #24]
 800247a:	2300      	movs	r3, #0
 800247c:	9305      	str	r3, [sp, #20]
 800247e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002480:	9304      	str	r3, [sp, #16]
 8002482:	8c3b      	ldrh	r3, [r7, #32]
 8002484:	9303      	str	r3, [sp, #12]
 8002486:	8bbb      	ldrh	r3, [r7, #28]
 8002488:	9302      	str	r3, [sp, #8]
 800248a:	8b3b      	ldrh	r3, [r7, #24]
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	460b      	mov	r3, r1
 8002494:	68f9      	ldr	r1, [r7, #12]
 8002496:	2000      	movs	r0, #0
 8002498:	f000 f806 	bl	80024a8 <init>
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000004 	.word	0x20000004

080024a8 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	4611      	mov	r1, r2
 80024b2:	461a      	mov	r2, r3
 80024b4:	4603      	mov	r3, r0
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	460b      	mov	r3, r1
 80024ba:	81bb      	strh	r3, [r7, #12]
 80024bc:	4613      	mov	r3, r2
 80024be:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 80024c0:	4a1a      	ldr	r2, [pc, #104]	; (800252c <init+0x84>)
 80024c2:	89bb      	ldrh	r3, [r7, #12]
 80024c4:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 80024c6:	4a1a      	ldr	r2, [pc, #104]	; (8002530 <init+0x88>)
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 80024cc:	4a19      	ldr	r2, [pc, #100]	; (8002534 <init+0x8c>)
 80024ce:	8b3b      	ldrh	r3, [r7, #24]
 80024d0:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 80024d2:	4a19      	ldr	r2, [pc, #100]	; (8002538 <init+0x90>)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 80024d8:	4a18      	ldr	r2, [pc, #96]	; (800253c <init+0x94>)
 80024da:	8bbb      	ldrh	r3, [r7, #28]
 80024dc:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 80024de:	4a17      	ldr	r2, [pc, #92]	; (800253c <init+0x94>)
 80024e0:	8c3b      	ldrh	r3, [r7, #32]
 80024e2:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 80024e4:	4a15      	ldr	r2, [pc, #84]	; (800253c <init+0x94>)
 80024e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024e8:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 80024ea:	4a14      	ldr	r2, [pc, #80]	; (800253c <init+0x94>)
 80024ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80024ee:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 80024f0:	4a12      	ldr	r2, [pc, #72]	; (800253c <init+0x94>)
 80024f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024f4:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 80024f6:	4a11      	ldr	r2, [pc, #68]	; (800253c <init+0x94>)
 80024f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80024fa:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 80024fc:	4a0f      	ldr	r2, [pc, #60]	; (800253c <init+0x94>)
 80024fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002500:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8002502:	4a0e      	ldr	r2, [pc, #56]	; (800253c <init+0x94>)
 8002504:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002506:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <init+0x98>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e002      	b.n	800251c <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <init+0x98>)
 8002518:	2210      	movs	r2, #16
 800251a:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 800251c:	2102      	movs	r1, #2
 800251e:	2010      	movs	r0, #16
 8002520:	f000 f810 	bl	8002544 <begin>
}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	2000313c 	.word	0x2000313c
 8002530:	2000311c 	.word	0x2000311c
 8002534:	2000313a 	.word	0x2000313a
 8002538:	20003120 	.word	0x20003120
 800253c:	20003128 	.word	0x20003128
 8002540:	20003139 	.word	0x20003139

08002544 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	460a      	mov	r2, r1
 800254e:	71fb      	strb	r3, [r7, #7]
 8002550:	4613      	mov	r3, r2
 8002552:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8002554:	79bb      	ldrb	r3, [r7, #6]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d906      	bls.n	8002568 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 800255a:	4b77      	ldr	r3, [pc, #476]	; (8002738 <begin+0x1f4>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	f043 0308 	orr.w	r3, r3, #8
 8002562:	b2da      	uxtb	r2, r3
 8002564:	4b74      	ldr	r3, [pc, #464]	; (8002738 <begin+0x1f4>)
 8002566:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8002568:	4a74      	ldr	r2, [pc, #464]	; (800273c <begin+0x1f8>)
 800256a:	79bb      	ldrb	r3, [r7, #6]
 800256c:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 800256e:	79fa      	ldrb	r2, [r7, #7]
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	3340      	adds	r3, #64	; 0x40
 8002574:	2140      	movs	r1, #64	; 0x40
 8002576:	2000      	movs	r0, #0
 8002578:	f000 f988 	bl	800288c <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 800257c:	4b70      	ldr	r3, [pc, #448]	; (8002740 <begin+0x1fc>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d009      	beq.n	8002598 <begin+0x54>
 8002584:	79bb      	ldrb	r3, [r7, #6]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d106      	bne.n	8002598 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 800258a:	4b6b      	ldr	r3, [pc, #428]	; (8002738 <begin+0x1f4>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b68      	ldr	r3, [pc, #416]	; (8002738 <begin+0x1f4>)
 8002596:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8002598:	f000 f8e4 	bl	8002764 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 800259c:	2302      	movs	r3, #2
 800259e:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 80025a0:	2301      	movs	r3, #1
 80025a2:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 80025a4:	4b67      	ldr	r3, [pc, #412]	; (8002744 <begin+0x200>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01b      	beq.n	80025e4 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 80025ac:	4b66      	ldr	r3, [pc, #408]	; (8002748 <begin+0x204>)
 80025ae:	881a      	ldrh	r2, [r3, #0]
 80025b0:	4b66      	ldr	r3, [pc, #408]	; (800274c <begin+0x208>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b65      	ldr	r3, [pc, #404]	; (8002750 <begin+0x20c>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	4313      	orrs	r3, r2
 80025be:	b29a      	uxth	r2, r3
 80025c0:	4b64      	ldr	r3, [pc, #400]	; (8002754 <begin+0x210>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	4b62      	ldr	r3, [pc, #392]	; (8002754 <begin+0x210>)
 80025ca:	885b      	ldrh	r3, [r3, #2]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b60      	ldr	r3, [pc, #384]	; (8002754 <begin+0x210>)
 80025d2:	889b      	ldrh	r3, [r3, #4]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	4b5e      	ldr	r3, [pc, #376]	; (8002754 <begin+0x210>)
 80025da:	88db      	ldrh	r3, [r3, #6]
 80025dc:	4313      	orrs	r3, r2
 80025de:	b29b      	uxth	r3, r3
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	e02a      	b.n	800263a <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80025e4:	4b58      	ldr	r3, [pc, #352]	; (8002748 <begin+0x204>)
 80025e6:	881a      	ldrh	r2, [r3, #0]
 80025e8:	4b58      	ldr	r3, [pc, #352]	; (800274c <begin+0x208>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	4b57      	ldr	r3, [pc, #348]	; (8002750 <begin+0x20c>)
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80025f8:	4b56      	ldr	r3, [pc, #344]	; (8002754 <begin+0x210>)
 80025fa:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80025fc:	4313      	orrs	r3, r2
 80025fe:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8002600:	4b54      	ldr	r3, [pc, #336]	; (8002754 <begin+0x210>)
 8002602:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8002604:	4313      	orrs	r3, r2
 8002606:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8002608:	4b52      	ldr	r3, [pc, #328]	; (8002754 <begin+0x210>)
 800260a:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800260c:	4313      	orrs	r3, r2
 800260e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8002610:	4b50      	ldr	r3, [pc, #320]	; (8002754 <begin+0x210>)
 8002612:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8002614:	4313      	orrs	r3, r2
 8002616:	b29a      	uxth	r2, r3
 8002618:	4b4e      	ldr	r3, [pc, #312]	; (8002754 <begin+0x210>)
 800261a:	891b      	ldrh	r3, [r3, #8]
 800261c:	4313      	orrs	r3, r2
 800261e:	b29a      	uxth	r2, r3
 8002620:	4b4c      	ldr	r3, [pc, #304]	; (8002754 <begin+0x210>)
 8002622:	895b      	ldrh	r3, [r3, #10]
 8002624:	4313      	orrs	r3, r2
 8002626:	b29a      	uxth	r2, r3
 8002628:	4b4a      	ldr	r3, [pc, #296]	; (8002754 <begin+0x210>)
 800262a:	899b      	ldrh	r3, [r3, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	b29a      	uxth	r2, r3
 8002630:	4b48      	ldr	r3, [pc, #288]	; (8002754 <begin+0x210>)
 8002632:	89db      	ldrh	r3, [r3, #14]
 8002634:	4313      	orrs	r3, r2
 8002636:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8002638:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 800263a:	4b47      	ldr	r3, [pc, #284]	; (8002758 <begin+0x214>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f107 020c 	add.w	r2, r7, #12
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f000 fe73 	bl	8003330 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 800264a:	2032      	movs	r0, #50	; 0x32
 800264c:	f000 fc5e 	bl	8002f0c <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8002650:	4b41      	ldr	r3, [pc, #260]	; (8002758 <begin+0x214>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a3c      	ldr	r2, [pc, #240]	; (8002748 <begin+0x204>)
 8002656:	8811      	ldrh	r1, [r2, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f001 f91e 	bl	800389c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8002660:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <begin+0x214>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a3a      	ldr	r2, [pc, #232]	; (8002750 <begin+0x20c>)
 8002666:	8811      	ldrh	r1, [r2, #0]
 8002668:	2200      	movs	r2, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f001 f916 	bl	800389c <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <begin+0x208>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	2bff      	cmp	r3, #255	; 0xff
 8002676:	d007      	beq.n	8002688 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8002678:	4b37      	ldr	r3, [pc, #220]	; (8002758 <begin+0x214>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a33      	ldr	r2, [pc, #204]	; (800274c <begin+0x208>)
 800267e:	8811      	ldrh	r1, [r2, #0]
 8002680:	2200      	movs	r2, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f001 f90a 	bl	800389c <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8002688:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <begin+0x1f4>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b00      	cmp	r3, #0
 8002692:	d115      	bne.n	80026c0 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8002694:	2003      	movs	r0, #3
 8002696:	f000 fa1b 	bl	8002ad0 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800269a:	2005      	movs	r0, #5
 800269c:	f000 fc36 	bl	8002f0c <HAL_Delay>

    // second try
    write4bits(0x03);
 80026a0:	2003      	movs	r0, #3
 80026a2:	f000 fa15 	bl	8002ad0 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 80026a6:	2005      	movs	r0, #5
 80026a8:	f000 fc30 	bl	8002f0c <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 80026ac:	2003      	movs	r0, #3
 80026ae:	f000 fa0f 	bl	8002ad0 <write4bits>
    HAL_Delay(1);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f000 fc2a 	bl	8002f0c <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 80026b8:	2002      	movs	r0, #2
 80026ba:	f000 fa09 	bl	8002ad0 <write4bits>
 80026be:	e01d      	b.n	80026fc <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 80026c0:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <begin+0x1f4>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	f043 0320 	orr.w	r3, r3, #32
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f97b 	bl	80029c6 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 80026d0:	2005      	movs	r0, #5
 80026d2:	f000 fc1b 	bl	8002f0c <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 80026d6:	4b18      	ldr	r3, [pc, #96]	; (8002738 <begin+0x1f4>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	f043 0320 	orr.w	r3, r3, #32
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 f970 	bl	80029c6 <command>
    HAL_Delay(1);
 80026e6:	2001      	movs	r0, #1
 80026e8:	f000 fc10 	bl	8002f0c <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <begin+0x1f4>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	f043 0320 	orr.w	r3, r3, #32
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f965 	bl	80029c6 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 80026fc:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <begin+0x1f4>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	f043 0320 	orr.w	r3, r3, #32
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f95d 	bl	80029c6 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <begin+0x218>)
 800270e:	2204      	movs	r2, #4
 8002710:	701a      	strb	r2, [r3, #0]
  display();
 8002712:	f000 f917 	bl	8002944 <display>

  // clear it off
  clear();
 8002716:	f000 f8d9 	bl	80028cc <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <begin+0x21c>)
 800271c:	2202      	movs	r2, #2
 800271e:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <begin+0x21c>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	f043 0304 	orr.w	r3, r3, #4
 8002728:	b2db      	uxtb	r3, r3
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f94b 	bl	80029c6 <command>

}
 8002730:	bf00      	nop
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20003139 	.word	0x20003139
 800273c:	20003125 	.word	0x20003125
 8002740:	20000770 	.word	0x20000770
 8002744:	20000004 	.word	0x20000004
 8002748:	2000313c 	.word	0x2000313c
 800274c:	2000311c 	.word	0x2000311c
 8002750:	2000313a 	.word	0x2000313a
 8002754:	20003128 	.word	0x20003128
 8002758:	20003120 	.word	0x20003120
 800275c:	20003124 	.word	0x20003124
 8002760:	20003138 	.word	0x20003138

08002764 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8002764:	b480      	push	{r7}
 8002766:	b089      	sub	sp, #36	; 0x24
 8002768:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 800276a:	4b41      	ldr	r3, [pc, #260]	; (8002870 <enableClock+0x10c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002772:	d10c      	bne.n	800278e <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002774:	4b3f      	ldr	r3, [pc, #252]	; (8002874 <enableClock+0x110>)
 8002776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002778:	4a3e      	ldr	r2, [pc, #248]	; (8002874 <enableClock+0x110>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002780:	4b3c      	ldr	r3, [pc, #240]	; (8002874 <enableClock+0x110>)
 8002782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 800278c:	e06a      	b.n	8002864 <enableClock+0x100>
  else if(_port == GPIOB)
 800278e:	4b38      	ldr	r3, [pc, #224]	; (8002870 <enableClock+0x10c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a39      	ldr	r2, [pc, #228]	; (8002878 <enableClock+0x114>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d10c      	bne.n	80027b2 <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002798:	4b36      	ldr	r3, [pc, #216]	; (8002874 <enableClock+0x110>)
 800279a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279c:	4a35      	ldr	r2, [pc, #212]	; (8002874 <enableClock+0x110>)
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a4:	4b33      	ldr	r3, [pc, #204]	; (8002874 <enableClock+0x110>)
 80027a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	69bb      	ldr	r3, [r7, #24]
}
 80027b0:	e058      	b.n	8002864 <enableClock+0x100>
  else if(_port == GPIOB)
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <enableClock+0x10c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a30      	ldr	r2, [pc, #192]	; (8002878 <enableClock+0x114>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d10c      	bne.n	80027d6 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80027bc:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <enableClock+0x110>)
 80027be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c0:	4a2c      	ldr	r2, [pc, #176]	; (8002874 <enableClock+0x110>)
 80027c2:	f043 0302 	orr.w	r3, r3, #2
 80027c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c8:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <enableClock+0x110>)
 80027ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	697b      	ldr	r3, [r7, #20]
}
 80027d4:	e046      	b.n	8002864 <enableClock+0x100>
	else if(_port == GPIOC)
 80027d6:	4b26      	ldr	r3, [pc, #152]	; (8002870 <enableClock+0x10c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a28      	ldr	r2, [pc, #160]	; (800287c <enableClock+0x118>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d10c      	bne.n	80027fa <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <enableClock+0x110>)
 80027e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e4:	4a23      	ldr	r2, [pc, #140]	; (8002874 <enableClock+0x110>)
 80027e6:	f043 0304 	orr.w	r3, r3, #4
 80027ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ec:	4b21      	ldr	r3, [pc, #132]	; (8002874 <enableClock+0x110>)
 80027ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	693b      	ldr	r3, [r7, #16]
}
 80027f8:	e034      	b.n	8002864 <enableClock+0x100>
	else if(_port == GPIOD)
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <enableClock+0x10c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a20      	ldr	r2, [pc, #128]	; (8002880 <enableClock+0x11c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d10c      	bne.n	800281e <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <enableClock+0x110>)
 8002806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002808:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <enableClock+0x110>)
 800280a:	f043 0308 	orr.w	r3, r3, #8
 800280e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002810:	4b18      	ldr	r3, [pc, #96]	; (8002874 <enableClock+0x110>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	e022      	b.n	8002864 <enableClock+0x100>
	else if(_port == GPIOE)
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <enableClock+0x10c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a18      	ldr	r2, [pc, #96]	; (8002884 <enableClock+0x120>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d10c      	bne.n	8002842 <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <enableClock+0x110>)
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	4a11      	ldr	r2, [pc, #68]	; (8002874 <enableClock+0x110>)
 800282e:	f043 0310 	orr.w	r3, r3, #16
 8002832:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <enableClock+0x110>)
 8002836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	68bb      	ldr	r3, [r7, #8]
}
 8002840:	e010      	b.n	8002864 <enableClock+0x100>
	else if(_port == GPIOF)
 8002842:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <enableClock+0x10c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a10      	ldr	r2, [pc, #64]	; (8002888 <enableClock+0x124>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d10b      	bne.n	8002864 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <enableClock+0x110>)
 800284e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002850:	4a08      	ldr	r2, [pc, #32]	; (8002874 <enableClock+0x110>)
 8002852:	f043 0320 	orr.w	r3, r3, #32
 8002856:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <enableClock+0x110>)
 800285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
}
 8002864:	bf00      	nop
 8002866:	3724      	adds	r7, #36	; 0x24
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	20003120 	.word	0x20003120
 8002874:	40021000 	.word	0x40021000
 8002878:	48000400 	.word	0x48000400
 800287c:	48000800 	.word	0x48000800
 8002880:	48000c00 	.word	0x48000c00
 8002884:	48001000 	.word	0x48001000
 8002888:	48001400 	.word	0x48001400

0800288c <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <setRowOffsets+0x3c>)
 80028a0:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <setRowOffsets+0x3c>)
 80028a8:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <setRowOffsets+0x3c>)
 80028b0:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <setRowOffsets+0x3c>)
 80028b8:	70da      	strb	r2, [r3, #3]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20003118 	.word	0x20003118

080028cc <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80028d0:	2001      	movs	r0, #1
 80028d2:	f000 f878 	bl	80029c6 <command>
  HAL_Delay(2);  // this command takes a long time!
 80028d6:	2002      	movs	r0, #2
 80028d8:	f000 fb18 	bl	8002f0c <HAL_Delay>
}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}

080028e0 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	460a      	mov	r2, r1
 80028ea:	71fb      	strb	r3, [r7, #7]
 80028ec:	4613      	mov	r3, r2
 80028ee:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80028f0:	2304      	movs	r3, #4
 80028f2:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80028f4:	79bb      	ldrb	r3, [r7, #6]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d803      	bhi.n	8002904 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <setCursor+0x5c>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	79ba      	ldrb	r2, [r7, #6]
 800290a:	429a      	cmp	r2, r3
 800290c:	d303      	bcc.n	8002916 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <setCursor+0x5c>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	3b01      	subs	r3, #1
 8002914:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8002916:	79bb      	ldrb	r3, [r7, #6]
 8002918:	4a09      	ldr	r2, [pc, #36]	; (8002940 <setCursor+0x60>)
 800291a:	5cd2      	ldrb	r2, [r2, r3]
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	4413      	add	r3, r2
 8002920:	b2db      	uxtb	r3, r3
 8002922:	b25b      	sxtb	r3, r3
 8002924:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002928:	b25b      	sxtb	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4618      	mov	r0, r3
 800292e:	f000 f84a 	bl	80029c6 <command>
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20003125 	.word	0x20003125
 8002940:	20003118 	.word	0x20003118

08002944 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <display+0x28>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	f043 0304 	orr.w	r3, r3, #4
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <display+0x28>)
 8002954:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8002956:	4b05      	ldr	r3, [pc, #20]	; (800296c <display+0x28>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	f043 0308 	orr.w	r3, r3, #8
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f830 	bl	80029c6 <command>
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20003124 	.word	0x20003124

08002970 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <print+0x12>
 800297e:	2300      	movs	r3, #0
 8002980:	e01d      	b.n	80029be <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fd fc22 	bl	80001d0 <strlen>
 800298c:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8002992:	e00c      	b.n	80029ae <print+0x3e>
    if (write(*buffer++)) n++;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	617a      	str	r2, [r7, #20]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f000 f820 	bl	80029e2 <write>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <print+0x4a>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3301      	adds	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
  while (size--) {
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1e5a      	subs	r2, r3, #1
 80029b2:	613a      	str	r2, [r7, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1ed      	bne.n	8002994 <print+0x24>
 80029b8:	e000      	b.n	80029bc <print+0x4c>
    else break;
 80029ba:	bf00      	nop
  }
  return n;
 80029bc:	68fb      	ldr	r3, [r7, #12]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 f813 	bl	8002a00 <send>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <write>:

inline size_t write(uint8_t value) {
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	2101      	movs	r1, #1
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 f805 	bl	8002a00 <send>
  return 1; // assume sucess
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	460a      	mov	r2, r1
 8002a0a:	71fb      	strb	r3, [r7, #7]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8002a10:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <send+0x6c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a16      	ldr	r2, [pc, #88]	; (8002a70 <send+0x70>)
 8002a16:	8811      	ldrh	r1, [r2, #0]
 8002a18:	79ba      	ldrb	r2, [r7, #6]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 ff3e 	bl	800389c <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <send+0x74>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	2bff      	cmp	r3, #255	; 0xff
 8002a26:	d007      	beq.n	8002a38 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8002a28:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <send+0x6c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a11      	ldr	r2, [pc, #68]	; (8002a74 <send+0x74>)
 8002a2e:	8811      	ldrh	r1, [r2, #0]
 8002a30:	2200      	movs	r2, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 ff32 	bl	800389c <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <send+0x78>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <send+0x4e>
    write8bits(value); 
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f86c 	bl	8002b24 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8002a4c:	e009      	b.n	8002a62 <send+0x62>
    write4bits(value>>4);
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 f83b 	bl	8002ad0 <write4bits>
    write4bits(value);
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 f837 	bl	8002ad0 <write4bits>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20003120 	.word	0x20003120
 8002a70:	2000313c 	.word	0x2000313c
 8002a74:	2000311c 	.word	0x2000311c
 8002a78:	20003139 	.word	0x20003139

08002a7c <pulseEnable>:

void pulseEnable(void) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <pulseEnable+0x4c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a11      	ldr	r2, [pc, #68]	; (8002acc <pulseEnable+0x50>)
 8002a86:	8811      	ldrh	r1, [r2, #0]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 ff06 	bl	800389c <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8002a90:	2001      	movs	r0, #1
 8002a92:	f000 fa3b 	bl	8002f0c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8002a96:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <pulseEnable+0x4c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <pulseEnable+0x50>)
 8002a9c:	8811      	ldrh	r1, [r2, #0]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fefb 	bl	800389c <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f000 fa30 	bl	8002f0c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <pulseEnable+0x4c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a06      	ldr	r2, [pc, #24]	; (8002acc <pulseEnable+0x50>)
 8002ab2:	8811      	ldrh	r1, [r2, #0]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 fef0 	bl	800389c <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8002abc:	2001      	movs	r0, #1
 8002abe:	f000 fa25 	bl	8002f0c <HAL_Delay>
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20003120 	.word	0x20003120
 8002acc:	2000313a 	.word	0x2000313a

08002ad0 <write4bits>:

void write4bits(uint8_t value) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e013      	b.n	8002b08 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <write4bits+0x4c>)
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <write4bits+0x50>)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002aec:	79fa      	ldrb	r2, [r7, #7]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	fa42 f303 	asr.w	r3, r2, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	f000 fecd 	bl	800389c <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3301      	adds	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	dde8      	ble.n	8002ae0 <write4bits+0x10>
  }

  pulseEnable();
 8002b0e:	f7ff ffb5 	bl	8002a7c <pulseEnable>
}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20003120 	.word	0x20003120
 8002b20:	20003128 	.word	0x20003128

08002b24 <write8bits>:

void write8bits(uint8_t value) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e013      	b.n	8002b5c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <write8bits+0x4c>)
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	4a0e      	ldr	r2, [pc, #56]	; (8002b74 <write8bits+0x50>)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002b40:	79fa      	ldrb	r2, [r7, #7]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	fa42 f303 	asr.w	r3, r2, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	f000 fea3 	bl	800389c <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b07      	cmp	r3, #7
 8002b60:	dde8      	ble.n	8002b34 <write8bits+0x10>
  }
  
  pulseEnable();
 8002b62:	f7ff ff8b 	bl	8002a7c <pulseEnable>
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20003120 	.word	0x20003120
 8002b74:	20003128 	.word	0x20003128

08002b78 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2120      	movs	r1, #32
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff fbaf 	bl	80022ec <SENSOR_IO_Read>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	f023 0304 	bic.w	r3, r3, #4
 8002b98:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	f043 0304 	orr.w	r3, r3, #4
 8002ba0:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	f023 0303 	bic.w	r3, r3, #3
 8002ba8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bb8:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	2120      	movs	r1, #32
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fb78 	bl	80022b8 <SENSOR_IO_Write>
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002bde:	f7ff fb61 	bl	80022a4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	210f      	movs	r1, #15
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fb7f 	bl	80022ec <SENSOR_IO_Read>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	b2d8      	uxtb	r0, r3
 8002c0a:	f107 020c 	add.w	r2, r7, #12
 8002c0e:	2302      	movs	r3, #2
 8002c10:	21b0      	movs	r1, #176	; 0xb0
 8002c12:	f7ff fb89 	bl	8002328 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002c16:	7b3b      	ldrb	r3, [r7, #12]
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002c1e:	7b7b      	ldrb	r3, [r7, #13]
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	b2d8      	uxtb	r0, r3
 8002c2a:	f107 020c 	add.w	r2, r7, #12
 8002c2e:	2302      	movs	r3, #2
 8002c30:	21b6      	movs	r1, #182	; 0xb6
 8002c32:	f7ff fb79 	bl	8002328 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c36:	7b7b      	ldrb	r3, [r7, #13]
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	b21a      	sxth	r2, r3
 8002c3c:	7b3b      	ldrb	r3, [r7, #12]
 8002c3e:	b21b      	sxth	r3, r3
 8002c40:	4313      	orrs	r3, r2
 8002c42:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	b2d8      	uxtb	r0, r3
 8002c48:	f107 020c 	add.w	r2, r7, #12
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	21ba      	movs	r1, #186	; 0xba
 8002c50:	f7ff fb6a 	bl	8002328 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c54:	7b7b      	ldrb	r3, [r7, #13]
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	b21a      	sxth	r2, r3
 8002c5a:	7b3b      	ldrb	r3, [r7, #12]
 8002c5c:	b21b      	sxth	r3, r3
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	b2d8      	uxtb	r0, r3
 8002c66:	f107 020c 	add.w	r2, r7, #12
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	21a8      	movs	r1, #168	; 0xa8
 8002c6e:	f7ff fb5b 	bl	8002328 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c72:	7b7b      	ldrb	r3, [r7, #13]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	b21a      	sxth	r2, r3
 8002c78:	7b3b      	ldrb	r3, [r7, #12]
 8002c7a:	b21b      	sxth	r3, r3
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002c80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002c84:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c92:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002c96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ca4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002ca8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002cac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	ee07 3a90 	vmov	s15, r3
 8002cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cbe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cce:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8002cd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cd6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cde:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ce6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002d2c <HTS221_H_ReadHumidity+0x130>
 8002cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf2:	dd01      	ble.n	8002cf8 <HTS221_H_ReadHumidity+0xfc>
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <HTS221_H_ReadHumidity+0x134>)
 8002cf6:	e00a      	b.n	8002d0e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002cf8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d04:	d502      	bpl.n	8002d0c <HTS221_H_ReadHumidity+0x110>
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	e000      	b.n	8002d0e <HTS221_H_ReadHumidity+0x112>
 8002d0c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002d0e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002d10:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d14:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d1c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002d20:	eeb0 0a67 	vmov.f32	s0, s15
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	447a0000 	.word	0x447a0000
 8002d30:	447a0000 	.word	0x447a0000

08002d34 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2120      	movs	r1, #32
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fad0 	bl	80022ec <SENSOR_IO_Read>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	f023 0304 	bic.w	r3, r3, #4
 8002d56:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	f023 0303 	bic.w	r3, r3, #3
 8002d66:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d76:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	2120      	movs	r1, #32
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fa99 	bl	80022b8 <SENSOR_IO_Write>
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b088      	sub	sp, #32
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	4603      	mov	r3, r0
 8002d96:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	b2d8      	uxtb	r0, r3
 8002d9c:	f107 0208 	add.w	r2, r7, #8
 8002da0:	2302      	movs	r3, #2
 8002da2:	21b2      	movs	r1, #178	; 0xb2
 8002da4:	f7ff fac0 	bl	8002328 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2135      	movs	r1, #53	; 0x35
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fa9c 	bl	80022ec <SENSOR_IO_Read>
 8002db4:	4603      	mov	r3, r0
 8002db6:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002db8:	7ffb      	ldrb	r3, [r7, #31]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	b21b      	sxth	r3, r3
 8002dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc2:	b21a      	sxth	r2, r3
 8002dc4:	7a3b      	ldrb	r3, [r7, #8]
 8002dc6:	b21b      	sxth	r3, r3
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002dcc:	7ffb      	ldrb	r3, [r7, #31]
 8002dce:	019b      	lsls	r3, r3, #6
 8002dd0:	b21b      	sxth	r3, r3
 8002dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd6:	b21a      	sxth	r2, r3
 8002dd8:	7a7b      	ldrb	r3, [r7, #9]
 8002dda:	b21b      	sxth	r3, r3
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002de0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002de4:	10db      	asrs	r3, r3, #3
 8002de6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002de8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002dec:	10db      	asrs	r3, r3, #3
 8002dee:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	b2d8      	uxtb	r0, r3
 8002df4:	f107 0208 	add.w	r2, r7, #8
 8002df8:	2304      	movs	r3, #4
 8002dfa:	21bc      	movs	r1, #188	; 0xbc
 8002dfc:	f7ff fa94 	bl	8002328 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002e00:	7a7b      	ldrb	r3, [r7, #9]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	b21a      	sxth	r2, r3
 8002e06:	7a3b      	ldrb	r3, [r7, #8]
 8002e08:	b21b      	sxth	r3, r3
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002e0e:	7afb      	ldrb	r3, [r7, #11]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	7abb      	ldrb	r3, [r7, #10]
 8002e16:	b21b      	sxth	r3, r3
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	b2d8      	uxtb	r0, r3
 8002e20:	f107 0208 	add.w	r2, r7, #8
 8002e24:	2302      	movs	r3, #2
 8002e26:	21aa      	movs	r1, #170	; 0xaa
 8002e28:	f7ff fa7e 	bl	8002328 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002e2c:	7a7b      	ldrb	r3, [r7, #9]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	b21a      	sxth	r2, r3
 8002e32:	7a3b      	ldrb	r3, [r7, #8]
 8002e34:	b21b      	sxth	r3, r3
 8002e36:	4313      	orrs	r3, r2
 8002e38:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002e3a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002e3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	ee07 3a90 	vmov	s15, r3
 8002e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e50:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	ee07 3a90 	vmov	s15, r3
 8002e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e5e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e62:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	ee07 3a90 	vmov	s15, r3
 8002e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e78:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002e7c:	ee07 3a90 	vmov	s15, r3
 8002e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e88:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	ee07 3a90 	vmov	s15, r3
}
 8002e92:	eeb0 0a67 	vmov.f32	s0, s15
 8002e96:	3720      	adds	r7, #32
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea6:	2003      	movs	r0, #3
 8002ea8:	f000 f901 	bl	80030ae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7fe ffd7 	bl	8001e60 <HAL_InitTick>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	71fb      	strb	r3, [r7, #7]
 8002ebc:	e001      	b.n	8002ec2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ebe:	f7fe fd3b 	bl	8001938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_IncTick+0x20>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_IncTick+0x24>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <HAL_IncTick+0x24>)
 8002ede:	6013      	str	r3, [r2, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000028 	.word	0x20000028
 8002ef0:	20003140 	.word	0x20003140

08002ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <HAL_GetTick+0x14>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	20003140 	.word	0x20003140

08002f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f14:	f7ff ffee 	bl	8002ef4 <HAL_GetTick>
 8002f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d005      	beq.n	8002f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_Delay+0x44>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4413      	add	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f32:	bf00      	nop
 8002f34:	f7ff ffde 	bl	8002ef4 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d8f7      	bhi.n	8002f34 <HAL_Delay+0x28>
  {
  }
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000028 	.word	0x20000028

08002f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f70:	4013      	ands	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f86:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	60d3      	str	r3, [r2, #12]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	f003 0307 	and.w	r3, r3, #7
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	db0b      	blt.n	8002fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4907      	ldr	r1, [pc, #28]	; (8002ff0 <__NVIC_EnableIRQ+0x38>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2001      	movs	r0, #1
 8002fda:	fa00 f202 	lsl.w	r2, r0, r2
 8002fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000e100 	.word	0xe000e100

08002ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	6039      	str	r1, [r7, #0]
 8002ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003004:	2b00      	cmp	r3, #0
 8003006:	db0a      	blt.n	800301e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	b2da      	uxtb	r2, r3
 800300c:	490c      	ldr	r1, [pc, #48]	; (8003040 <__NVIC_SetPriority+0x4c>)
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	0112      	lsls	r2, r2, #4
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	440b      	add	r3, r1
 8003018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800301c:	e00a      	b.n	8003034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4908      	ldr	r1, [pc, #32]	; (8003044 <__NVIC_SetPriority+0x50>)
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	3b04      	subs	r3, #4
 800302c:	0112      	lsls	r2, r2, #4
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	440b      	add	r3, r1
 8003032:	761a      	strb	r2, [r3, #24]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000e100 	.word	0xe000e100
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	; 0x24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f1c3 0307 	rsb	r3, r3, #7
 8003062:	2b04      	cmp	r3, #4
 8003064:	bf28      	it	cs
 8003066:	2304      	movcs	r3, #4
 8003068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3304      	adds	r3, #4
 800306e:	2b06      	cmp	r3, #6
 8003070:	d902      	bls.n	8003078 <NVIC_EncodePriority+0x30>
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3b03      	subs	r3, #3
 8003076:	e000      	b.n	800307a <NVIC_EncodePriority+0x32>
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800307c:	f04f 32ff 	mov.w	r2, #4294967295
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43da      	mvns	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	401a      	ands	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003090:	f04f 31ff 	mov.w	r1, #4294967295
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fa01 f303 	lsl.w	r3, r1, r3
 800309a:	43d9      	mvns	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	4313      	orrs	r3, r2
         );
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3724      	adds	r7, #36	; 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ff4c 	bl	8002f54 <__NVIC_SetPriorityGrouping>
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030d6:	f7ff ff61 	bl	8002f9c <__NVIC_GetPriorityGrouping>
 80030da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	6978      	ldr	r0, [r7, #20]
 80030e2:	f7ff ffb1 	bl	8003048 <NVIC_EncodePriority>
 80030e6:	4602      	mov	r2, r0
 80030e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ec:	4611      	mov	r1, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff ff80 	bl	8002ff4 <__NVIC_SetPriority>
}
 80030f4:	bf00      	nop
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff54 	bl	8002fb8 <__NVIC_EnableIRQ>
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0ac      	b.n	8003284 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 f8b2 	bl	8003298 <DFSDM_GetChannelFromInstance>
 8003134:	4603      	mov	r3, r0
 8003136:	4a55      	ldr	r2, [pc, #340]	; (800328c <HAL_DFSDM_ChannelInit+0x174>)
 8003138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e09f      	b.n	8003284 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7fe fc1f 	bl	8001988 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800314a:	4b51      	ldr	r3, [pc, #324]	; (8003290 <HAL_DFSDM_ChannelInit+0x178>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3301      	adds	r3, #1
 8003150:	4a4f      	ldr	r2, [pc, #316]	; (8003290 <HAL_DFSDM_ChannelInit+0x178>)
 8003152:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003154:	4b4e      	ldr	r3, [pc, #312]	; (8003290 <HAL_DFSDM_ChannelInit+0x178>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d125      	bne.n	80031a8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800315c:	4b4d      	ldr	r3, [pc, #308]	; (8003294 <HAL_DFSDM_ChannelInit+0x17c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a4c      	ldr	r2, [pc, #304]	; (8003294 <HAL_DFSDM_ChannelInit+0x17c>)
 8003162:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003166:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003168:	4b4a      	ldr	r3, [pc, #296]	; (8003294 <HAL_DFSDM_ChannelInit+0x17c>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4948      	ldr	r1, [pc, #288]	; (8003294 <HAL_DFSDM_ChannelInit+0x17c>)
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003176:	4b47      	ldr	r3, [pc, #284]	; (8003294 <HAL_DFSDM_ChannelInit+0x17c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a46      	ldr	r2, [pc, #280]	; (8003294 <HAL_DFSDM_ChannelInit+0x17c>)
 800317c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003180:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	791b      	ldrb	r3, [r3, #4]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d108      	bne.n	800319c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800318a:	4b42      	ldr	r3, [pc, #264]	; (8003294 <HAL_DFSDM_ChannelInit+0x17c>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	3b01      	subs	r3, #1
 8003194:	041b      	lsls	r3, r3, #16
 8003196:	493f      	ldr	r1, [pc, #252]	; (8003294 <HAL_DFSDM_ChannelInit+0x17c>)
 8003198:	4313      	orrs	r3, r2
 800319a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800319c:	4b3d      	ldr	r3, [pc, #244]	; (8003294 <HAL_DFSDM_ChannelInit+0x17c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a3c      	ldr	r2, [pc, #240]	; (8003294 <HAL_DFSDM_ChannelInit+0x17c>)
 80031a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031a6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80031b6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6819      	ldr	r1, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80031c6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80031cc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 020f 	bic.w	r2, r2, #15
 80031e4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800320c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6899      	ldr	r1, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	3b01      	subs	r3, #1
 800321e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f002 0207 	and.w	r2, r2, #7
 8003238:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003264:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f810 	bl	8003298 <DFSDM_GetChannelFromInstance>
 8003278:	4602      	mov	r2, r0
 800327a:	4904      	ldr	r1, [pc, #16]	; (800328c <HAL_DFSDM_ChannelInit+0x174>)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000778 	.word	0x20000778
 8003290:	20000774 	.word	0x20000774
 8003294:	40016000 	.word	0x40016000

08003298 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <DFSDM_GetChannelFromInstance+0x7c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d102      	bne.n	80032ae <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	e02b      	b.n	8003306 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a19      	ldr	r2, [pc, #100]	; (8003318 <DFSDM_GetChannelFromInstance+0x80>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d102      	bne.n	80032bc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	e024      	b.n	8003306 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a17      	ldr	r2, [pc, #92]	; (800331c <DFSDM_GetChannelFromInstance+0x84>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d102      	bne.n	80032ca <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80032c4:	2302      	movs	r3, #2
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e01d      	b.n	8003306 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <DFSDM_GetChannelFromInstance+0x88>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d102      	bne.n	80032d8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80032d2:	2304      	movs	r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	e016      	b.n	8003306 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a12      	ldr	r2, [pc, #72]	; (8003324 <DFSDM_GetChannelFromInstance+0x8c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d102      	bne.n	80032e6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80032e0:	2305      	movs	r3, #5
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	e00f      	b.n	8003306 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a0f      	ldr	r2, [pc, #60]	; (8003328 <DFSDM_GetChannelFromInstance+0x90>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d102      	bne.n	80032f4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80032ee:	2306      	movs	r3, #6
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	e008      	b.n	8003306 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a0d      	ldr	r2, [pc, #52]	; (800332c <DFSDM_GetChannelFromInstance+0x94>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d102      	bne.n	8003302 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80032fc:	2307      	movs	r3, #7
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	e001      	b.n	8003306 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003302:	2303      	movs	r3, #3
 8003304:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003306:	68fb      	ldr	r3, [r7, #12]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40016000 	.word	0x40016000
 8003318:	40016020 	.word	0x40016020
 800331c:	40016040 	.word	0x40016040
 8003320:	40016080 	.word	0x40016080
 8003324:	400160a0 	.word	0x400160a0
 8003328:	400160c0 	.word	0x400160c0
 800332c:	400160e0 	.word	0x400160e0

08003330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800333e:	e17f      	b.n	8003640 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	2101      	movs	r1, #1
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	4013      	ands	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8171 	beq.w	800363a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d00b      	beq.n	8003378 <HAL_GPIO_Init+0x48>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d007      	beq.n	8003378 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800336c:	2b11      	cmp	r3, #17
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b12      	cmp	r3, #18
 8003376:	d130      	bne.n	80033da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	2203      	movs	r2, #3
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ae:	2201      	movs	r2, #1
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	f003 0201 	and.w	r2, r3, #1
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d118      	bne.n	8003418 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80033ec:	2201      	movs	r2, #1
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	08db      	lsrs	r3, r3, #3
 8003402:	f003 0201 	and.w	r2, r3, #1
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	2203      	movs	r2, #3
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x128>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b12      	cmp	r3, #18
 8003456:	d123      	bne.n	80034a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	08da      	lsrs	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3208      	adds	r2, #8
 8003460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003464:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	220f      	movs	r2, #15
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4013      	ands	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	08da      	lsrs	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3208      	adds	r2, #8
 800349a:	6939      	ldr	r1, [r7, #16]
 800349c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	2203      	movs	r2, #3
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4013      	ands	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0203 	and.w	r2, r3, #3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80ac 	beq.w	800363a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e2:	4b5f      	ldr	r3, [pc, #380]	; (8003660 <HAL_GPIO_Init+0x330>)
 80034e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e6:	4a5e      	ldr	r2, [pc, #376]	; (8003660 <HAL_GPIO_Init+0x330>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	6613      	str	r3, [r2, #96]	; 0x60
 80034ee:	4b5c      	ldr	r3, [pc, #368]	; (8003660 <HAL_GPIO_Init+0x330>)
 80034f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034fa:	4a5a      	ldr	r2, [pc, #360]	; (8003664 <HAL_GPIO_Init+0x334>)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	3302      	adds	r3, #2
 8003502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003506:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	220f      	movs	r2, #15
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4013      	ands	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003524:	d025      	beq.n	8003572 <HAL_GPIO_Init+0x242>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a4f      	ldr	r2, [pc, #316]	; (8003668 <HAL_GPIO_Init+0x338>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d01f      	beq.n	800356e <HAL_GPIO_Init+0x23e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a4e      	ldr	r2, [pc, #312]	; (800366c <HAL_GPIO_Init+0x33c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d019      	beq.n	800356a <HAL_GPIO_Init+0x23a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a4d      	ldr	r2, [pc, #308]	; (8003670 <HAL_GPIO_Init+0x340>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_GPIO_Init+0x236>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4c      	ldr	r2, [pc, #304]	; (8003674 <HAL_GPIO_Init+0x344>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00d      	beq.n	8003562 <HAL_GPIO_Init+0x232>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4b      	ldr	r2, [pc, #300]	; (8003678 <HAL_GPIO_Init+0x348>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <HAL_GPIO_Init+0x22e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4a      	ldr	r2, [pc, #296]	; (800367c <HAL_GPIO_Init+0x34c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_GPIO_Init+0x22a>
 8003556:	2306      	movs	r3, #6
 8003558:	e00c      	b.n	8003574 <HAL_GPIO_Init+0x244>
 800355a:	2307      	movs	r3, #7
 800355c:	e00a      	b.n	8003574 <HAL_GPIO_Init+0x244>
 800355e:	2305      	movs	r3, #5
 8003560:	e008      	b.n	8003574 <HAL_GPIO_Init+0x244>
 8003562:	2304      	movs	r3, #4
 8003564:	e006      	b.n	8003574 <HAL_GPIO_Init+0x244>
 8003566:	2303      	movs	r3, #3
 8003568:	e004      	b.n	8003574 <HAL_GPIO_Init+0x244>
 800356a:	2302      	movs	r3, #2
 800356c:	e002      	b.n	8003574 <HAL_GPIO_Init+0x244>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_GPIO_Init+0x244>
 8003572:	2300      	movs	r3, #0
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	f002 0203 	and.w	r2, r2, #3
 800357a:	0092      	lsls	r2, r2, #2
 800357c:	4093      	lsls	r3, r2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003584:	4937      	ldr	r1, [pc, #220]	; (8003664 <HAL_GPIO_Init+0x334>)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	089b      	lsrs	r3, r3, #2
 800358a:	3302      	adds	r3, #2
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003592:	4b3b      	ldr	r3, [pc, #236]	; (8003680 <HAL_GPIO_Init+0x350>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43db      	mvns	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035b6:	4a32      	ldr	r2, [pc, #200]	; (8003680 <HAL_GPIO_Init+0x350>)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80035bc:	4b30      	ldr	r3, [pc, #192]	; (8003680 <HAL_GPIO_Init+0x350>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035e0:	4a27      	ldr	r2, [pc, #156]	; (8003680 <HAL_GPIO_Init+0x350>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035e6:	4b26      	ldr	r3, [pc, #152]	; (8003680 <HAL_GPIO_Init+0x350>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800360a:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <HAL_GPIO_Init+0x350>)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003610:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <HAL_GPIO_Init+0x350>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	43db      	mvns	r3, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003634:	4a12      	ldr	r2, [pc, #72]	; (8003680 <HAL_GPIO_Init+0x350>)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	3301      	adds	r3, #1
 800363e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa22 f303 	lsr.w	r3, r2, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	f47f ae78 	bne.w	8003340 <HAL_GPIO_Init+0x10>
  }
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000
 8003664:	40010000 	.word	0x40010000
 8003668:	48000400 	.word	0x48000400
 800366c:	48000800 	.word	0x48000800
 8003670:	48000c00 	.word	0x48000c00
 8003674:	48001000 	.word	0x48001000
 8003678:	48001400 	.word	0x48001400
 800367c:	48001800 	.word	0x48001800
 8003680:	40010400 	.word	0x40010400

08003684 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003692:	e0cd      	b.n	8003830 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003694:	2201      	movs	r2, #1
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80c0 	beq.w	800382a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80036aa:	4a68      	ldr	r2, [pc, #416]	; (800384c <HAL_GPIO_DeInit+0x1c8>)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	089b      	lsrs	r3, r3, #2
 80036b0:	3302      	adds	r3, #2
 80036b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	220f      	movs	r2, #15
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4013      	ands	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036d2:	d025      	beq.n	8003720 <HAL_GPIO_DeInit+0x9c>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a5e      	ldr	r2, [pc, #376]	; (8003850 <HAL_GPIO_DeInit+0x1cc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d01f      	beq.n	800371c <HAL_GPIO_DeInit+0x98>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a5d      	ldr	r2, [pc, #372]	; (8003854 <HAL_GPIO_DeInit+0x1d0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d019      	beq.n	8003718 <HAL_GPIO_DeInit+0x94>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a5c      	ldr	r2, [pc, #368]	; (8003858 <HAL_GPIO_DeInit+0x1d4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d013      	beq.n	8003714 <HAL_GPIO_DeInit+0x90>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a5b      	ldr	r2, [pc, #364]	; (800385c <HAL_GPIO_DeInit+0x1d8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00d      	beq.n	8003710 <HAL_GPIO_DeInit+0x8c>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a5a      	ldr	r2, [pc, #360]	; (8003860 <HAL_GPIO_DeInit+0x1dc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d007      	beq.n	800370c <HAL_GPIO_DeInit+0x88>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a59      	ldr	r2, [pc, #356]	; (8003864 <HAL_GPIO_DeInit+0x1e0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d101      	bne.n	8003708 <HAL_GPIO_DeInit+0x84>
 8003704:	2306      	movs	r3, #6
 8003706:	e00c      	b.n	8003722 <HAL_GPIO_DeInit+0x9e>
 8003708:	2307      	movs	r3, #7
 800370a:	e00a      	b.n	8003722 <HAL_GPIO_DeInit+0x9e>
 800370c:	2305      	movs	r3, #5
 800370e:	e008      	b.n	8003722 <HAL_GPIO_DeInit+0x9e>
 8003710:	2304      	movs	r3, #4
 8003712:	e006      	b.n	8003722 <HAL_GPIO_DeInit+0x9e>
 8003714:	2303      	movs	r3, #3
 8003716:	e004      	b.n	8003722 <HAL_GPIO_DeInit+0x9e>
 8003718:	2302      	movs	r3, #2
 800371a:	e002      	b.n	8003722 <HAL_GPIO_DeInit+0x9e>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <HAL_GPIO_DeInit+0x9e>
 8003720:	2300      	movs	r3, #0
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	f002 0203 	and.w	r2, r2, #3
 8003728:	0092      	lsls	r2, r2, #2
 800372a:	4093      	lsls	r3, r2
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	429a      	cmp	r2, r3
 8003730:	d132      	bne.n	8003798 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003732:	4b4d      	ldr	r3, [pc, #308]	; (8003868 <HAL_GPIO_DeInit+0x1e4>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	43db      	mvns	r3, r3
 800373a:	494b      	ldr	r1, [pc, #300]	; (8003868 <HAL_GPIO_DeInit+0x1e4>)
 800373c:	4013      	ands	r3, r2
 800373e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003740:	4b49      	ldr	r3, [pc, #292]	; (8003868 <HAL_GPIO_DeInit+0x1e4>)
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	43db      	mvns	r3, r3
 8003748:	4947      	ldr	r1, [pc, #284]	; (8003868 <HAL_GPIO_DeInit+0x1e4>)
 800374a:	4013      	ands	r3, r2
 800374c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800374e:	4b46      	ldr	r3, [pc, #280]	; (8003868 <HAL_GPIO_DeInit+0x1e4>)
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	43db      	mvns	r3, r3
 8003756:	4944      	ldr	r1, [pc, #272]	; (8003868 <HAL_GPIO_DeInit+0x1e4>)
 8003758:	4013      	ands	r3, r2
 800375a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800375c:	4b42      	ldr	r3, [pc, #264]	; (8003868 <HAL_GPIO_DeInit+0x1e4>)
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	43db      	mvns	r3, r3
 8003764:	4940      	ldr	r1, [pc, #256]	; (8003868 <HAL_GPIO_DeInit+0x1e4>)
 8003766:	4013      	ands	r3, r2
 8003768:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	220f      	movs	r2, #15
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800377a:	4a34      	ldr	r2, [pc, #208]	; (800384c <HAL_GPIO_DeInit+0x1c8>)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	089b      	lsrs	r3, r3, #2
 8003780:	3302      	adds	r3, #2
 8003782:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	43da      	mvns	r2, r3
 800378a:	4830      	ldr	r0, [pc, #192]	; (800384c <HAL_GPIO_DeInit+0x1c8>)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	400a      	ands	r2, r1
 8003792:	3302      	adds	r3, #2
 8003794:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	2103      	movs	r1, #3
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	08da      	lsrs	r2, r3, #3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3208      	adds	r2, #8
 80037b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	220f      	movs	r2, #15
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	08d2      	lsrs	r2, r2, #3
 80037cc:	4019      	ands	r1, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3208      	adds	r2, #8
 80037d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	2103      	movs	r1, #3
 80037e0:	fa01 f303 	lsl.w	r3, r1, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	401a      	ands	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	2101      	movs	r1, #1
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	fa01 f303 	lsl.w	r3, r1, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	401a      	ands	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	2103      	movs	r1, #3
 800380a:	fa01 f303 	lsl.w	r3, r1, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	401a      	ands	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381a:	2101      	movs	r1, #1
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	fa01 f303 	lsl.w	r3, r1, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	401a      	ands	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	3301      	adds	r3, #1
 800382e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	f47f af2b 	bne.w	8003694 <HAL_GPIO_DeInit+0x10>
  }
}
 800383e:	bf00      	nop
 8003840:	bf00      	nop
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40010000 	.word	0x40010000
 8003850:	48000400 	.word	0x48000400
 8003854:	48000800 	.word	0x48000800
 8003858:	48000c00 	.word	0x48000c00
 800385c:	48001000 	.word	0x48001000
 8003860:	48001400 	.word	0x48001400
 8003864:	48001800 	.word	0x48001800
 8003868:	40010400 	.word	0x40010400

0800386c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	887b      	ldrh	r3, [r7, #2]
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003884:	2301      	movs	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
 8003888:	e001      	b.n	800388e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	807b      	strh	r3, [r7, #2]
 80038a8:	4613      	mov	r3, r2
 80038aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038ac:	787b      	ldrb	r3, [r7, #1]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038b2:	887a      	ldrh	r2, [r7, #2]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038b8:	e002      	b.n	80038c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038de:	887a      	ldrh	r2, [r7, #2]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4013      	ands	r3, r2
 80038e4:	041a      	lsls	r2, r3, #16
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	43d9      	mvns	r1, r3
 80038ea:	887b      	ldrh	r3, [r7, #2]
 80038ec:	400b      	ands	r3, r1
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	619a      	str	r2, [r3, #24]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d006      	beq.n	8003924 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003916:	4a05      	ldr	r2, [pc, #20]	; (800392c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f806 	bl	8003930 <HAL_GPIO_EXTI_Callback>
  }
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40010400 	.word	0x40010400

08003930 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e081      	b.n	8003a5c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7fe f853 	bl	8001a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2224      	movs	r2, #36	; 0x24
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0201 	bic.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003996:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d107      	bne.n	80039c0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	e006      	b.n	80039ce <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d104      	bne.n	80039e0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a02:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	ea42 0103 	orr.w	r1, r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	021a      	lsls	r2, r3, #8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69d9      	ldr	r1, [r3, #28]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1a      	ldr	r2, [r3, #32]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0201 	orr.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e021      	b.n	8003aba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2224      	movs	r2, #36	; 0x24
 8003a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fe f806 	bl	8001aa0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	4608      	mov	r0, r1
 8003ace:	4611      	mov	r1, r2
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	817b      	strh	r3, [r7, #10]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	813b      	strh	r3, [r7, #8]
 8003ada:	4613      	mov	r3, r2
 8003adc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	f040 80f9 	bne.w	8003cde <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_I2C_Mem_Write+0x34>
 8003af2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d105      	bne.n	8003b04 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003afe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0ed      	b.n	8003ce0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_I2C_Mem_Write+0x4e>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e0e6      	b.n	8003ce0 <HAL_I2C_Mem_Write+0x21c>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b1a:	f7ff f9eb 	bl	8002ef4 <HAL_GetTick>
 8003b1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	2319      	movs	r3, #25
 8003b26:	2201      	movs	r2, #1
 8003b28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fac3 	bl	80040b8 <I2C_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0d1      	b.n	8003ce0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2221      	movs	r2, #33	; 0x21
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2240      	movs	r2, #64	; 0x40
 8003b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a3a      	ldr	r2, [r7, #32]
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b64:	88f8      	ldrh	r0, [r7, #6]
 8003b66:	893a      	ldrh	r2, [r7, #8]
 8003b68:	8979      	ldrh	r1, [r7, #10]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	4603      	mov	r3, r0
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f9d3 	bl	8003f20 <I2C_RequestMemoryWrite>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0a9      	b.n	8003ce0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2bff      	cmp	r3, #255	; 0xff
 8003b94:	d90e      	bls.n	8003bb4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	22ff      	movs	r2, #255	; 0xff
 8003b9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	8979      	ldrh	r1, [r7, #10]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fba5 	bl	80042fc <I2C_TransferConfig>
 8003bb2:	e00f      	b.n	8003bd4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	8979      	ldrh	r1, [r7, #10]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 fb94 	bl	80042fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 faad 	bl	8004138 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e07b      	b.n	8003ce0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	781a      	ldrb	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d034      	beq.n	8003c8c <HAL_I2C_Mem_Write+0x1c8>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d130      	bne.n	8003c8c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	2200      	movs	r2, #0
 8003c32:	2180      	movs	r1, #128	; 0x80
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fa3f 	bl	80040b8 <I2C_WaitOnFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e04d      	b.n	8003ce0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2bff      	cmp	r3, #255	; 0xff
 8003c4c:	d90e      	bls.n	8003c6c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	22ff      	movs	r2, #255	; 0xff
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	8979      	ldrh	r1, [r7, #10]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fb49 	bl	80042fc <I2C_TransferConfig>
 8003c6a:	e00f      	b.n	8003c8c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	8979      	ldrh	r1, [r7, #10]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fb38 	bl	80042fc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d19e      	bne.n	8003bd4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fa8c 	bl	80041b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e01a      	b.n	8003ce0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <HAL_I2C_Mem_Write+0x224>)
 8003cbe:	400b      	ands	r3, r1
 8003cc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e000      	b.n	8003ce0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
  }
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	fe00e800 	.word	0xfe00e800

08003cec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	817b      	strh	r3, [r7, #10]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	813b      	strh	r3, [r7, #8]
 8003d02:	4613      	mov	r3, r2
 8003d04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	f040 80fd 	bne.w	8003f0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_I2C_Mem_Read+0x34>
 8003d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d105      	bne.n	8003d2c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0f1      	b.n	8003f10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_I2C_Mem_Read+0x4e>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e0ea      	b.n	8003f10 <HAL_I2C_Mem_Read+0x224>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d42:	f7ff f8d7 	bl	8002ef4 <HAL_GetTick>
 8003d46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	2319      	movs	r3, #25
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f9af 	bl	80040b8 <I2C_WaitOnFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0d5      	b.n	8003f10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2222      	movs	r2, #34	; 0x22
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2240      	movs	r2, #64	; 0x40
 8003d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a3a      	ldr	r2, [r7, #32]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d8c:	88f8      	ldrh	r0, [r7, #6]
 8003d8e:	893a      	ldrh	r2, [r7, #8]
 8003d90:	8979      	ldrh	r1, [r7, #10]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f913 	bl	8003fc8 <I2C_RequestMemoryRead>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0ad      	b.n	8003f10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2bff      	cmp	r3, #255	; 0xff
 8003dbc:	d90e      	bls.n	8003ddc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	22ff      	movs	r2, #255	; 0xff
 8003dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	8979      	ldrh	r1, [r7, #10]
 8003dcc:	4b52      	ldr	r3, [pc, #328]	; (8003f18 <HAL_I2C_Mem_Read+0x22c>)
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 fa91 	bl	80042fc <I2C_TransferConfig>
 8003dda:	e00f      	b.n	8003dfc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	8979      	ldrh	r1, [r7, #10]
 8003dee:	4b4a      	ldr	r3, [pc, #296]	; (8003f18 <HAL_I2C_Mem_Read+0x22c>)
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fa80 	bl	80042fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	2200      	movs	r2, #0
 8003e04:	2104      	movs	r1, #4
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f956 	bl	80040b8 <I2C_WaitOnFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e07c      	b.n	8003f10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d034      	beq.n	8003ebc <HAL_I2C_Mem_Read+0x1d0>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d130      	bne.n	8003ebc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	2200      	movs	r2, #0
 8003e62:	2180      	movs	r1, #128	; 0x80
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f927 	bl	80040b8 <I2C_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e04d      	b.n	8003f10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2bff      	cmp	r3, #255	; 0xff
 8003e7c:	d90e      	bls.n	8003e9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	22ff      	movs	r2, #255	; 0xff
 8003e82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	8979      	ldrh	r1, [r7, #10]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fa31 	bl	80042fc <I2C_TransferConfig>
 8003e9a:	e00f      	b.n	8003ebc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	8979      	ldrh	r1, [r7, #10]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fa20 	bl	80042fc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d19a      	bne.n	8003dfc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f974 	bl	80041b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e01a      	b.n	8003f10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6859      	ldr	r1, [r3, #4]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_I2C_Mem_Read+0x230>)
 8003eee:	400b      	ands	r3, r1
 8003ef0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e000      	b.n	8003f10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003f0e:	2302      	movs	r3, #2
  }
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	80002400 	.word	0x80002400
 8003f1c:	fe00e800 	.word	0xfe00e800

08003f20 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	4608      	mov	r0, r1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4603      	mov	r3, r0
 8003f30:	817b      	strh	r3, [r7, #10]
 8003f32:	460b      	mov	r3, r1
 8003f34:	813b      	strh	r3, [r7, #8]
 8003f36:	4613      	mov	r3, r2
 8003f38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	8979      	ldrh	r1, [r7, #10]
 8003f40:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <I2C_RequestMemoryWrite+0xa4>)
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f9d7 	bl	80042fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	69b9      	ldr	r1, [r7, #24]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f8f0 	bl	8004138 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e02c      	b.n	8003fbc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d105      	bne.n	8003f74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f68:	893b      	ldrh	r3, [r7, #8]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	629a      	str	r2, [r3, #40]	; 0x28
 8003f72:	e015      	b.n	8003fa0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f74:	893b      	ldrh	r3, [r7, #8]
 8003f76:	0a1b      	lsrs	r3, r3, #8
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	69b9      	ldr	r1, [r7, #24]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f8d6 	bl	8004138 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e012      	b.n	8003fbc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f96:	893b      	ldrh	r3, [r7, #8]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f884 	bl	80040b8 <I2C_WaitOnFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	80002000 	.word	0x80002000

08003fc8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	817b      	strh	r3, [r7, #10]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	813b      	strh	r3, [r7, #8]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	8979      	ldrh	r1, [r7, #10]
 8003fe8:	4b20      	ldr	r3, [pc, #128]	; (800406c <I2C_RequestMemoryRead+0xa4>)
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	2300      	movs	r3, #0
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f984 	bl	80042fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	69b9      	ldr	r1, [r7, #24]
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 f89d 	bl	8004138 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e02c      	b.n	8004062 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d105      	bne.n	800401a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800400e:	893b      	ldrh	r3, [r7, #8]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	629a      	str	r2, [r3, #40]	; 0x28
 8004018:	e015      	b.n	8004046 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800401a:	893b      	ldrh	r3, [r7, #8]
 800401c:	0a1b      	lsrs	r3, r3, #8
 800401e:	b29b      	uxth	r3, r3
 8004020:	b2da      	uxtb	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	69b9      	ldr	r1, [r7, #24]
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f883 	bl	8004138 <I2C_WaitOnTXISFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e012      	b.n	8004062 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800403c:	893b      	ldrh	r3, [r7, #8]
 800403e:	b2da      	uxtb	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2200      	movs	r2, #0
 800404e:	2140      	movs	r1, #64	; 0x40
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f831 	bl	80040b8 <I2C_WaitOnFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	80002000 	.word	0x80002000

08004070 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b02      	cmp	r3, #2
 8004084:	d103      	bne.n	800408e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2200      	movs	r2, #0
 800408c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d007      	beq.n	80040ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	619a      	str	r2, [r3, #24]
  }
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	4613      	mov	r3, r2
 80040c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c8:	e022      	b.n	8004110 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d0:	d01e      	beq.n	8004110 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d2:	f7fe ff0f 	bl	8002ef4 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d302      	bcc.n	80040e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d113      	bne.n	8004110 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ec:	f043 0220 	orr.w	r2, r3, #32
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e00f      	b.n	8004130 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4013      	ands	r3, r2
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	429a      	cmp	r2, r3
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	429a      	cmp	r2, r3
 800412c:	d0cd      	beq.n	80040ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004144:	e02c      	b.n	80041a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f870 	bl	8004230 <I2C_IsAcknowledgeFailed>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e02a      	b.n	80041b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004160:	d01e      	beq.n	80041a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004162:	f7fe fec7 	bl	8002ef4 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	429a      	cmp	r2, r3
 8004170:	d302      	bcc.n	8004178 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d113      	bne.n	80041a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417c:	f043 0220 	orr.w	r2, r3, #32
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e007      	b.n	80041b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d1cb      	bne.n	8004146 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041c4:	e028      	b.n	8004218 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f830 	bl	8004230 <I2C_IsAcknowledgeFailed>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e026      	b.n	8004228 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041da:	f7fe fe8b 	bl	8002ef4 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d302      	bcc.n	80041f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d113      	bne.n	8004218 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e007      	b.n	8004228 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b20      	cmp	r3, #32
 8004224:	d1cf      	bne.n	80041c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	2b10      	cmp	r3, #16
 8004248:	d151      	bne.n	80042ee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800424a:	e022      	b.n	8004292 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d01e      	beq.n	8004292 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004254:	f7fe fe4e 	bl	8002ef4 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <I2C_IsAcknowledgeFailed+0x3a>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d113      	bne.n	8004292 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	f043 0220 	orr.w	r2, r3, #32
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e02e      	b.n	80042f0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b20      	cmp	r3, #32
 800429e:	d1d5      	bne.n	800424c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2210      	movs	r2, #16
 80042a6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2220      	movs	r2, #32
 80042ae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f7ff fedd 	bl	8004070 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <I2C_IsAcknowledgeFailed+0xc8>)
 80042c2:	400b      	ands	r3, r1
 80042c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	f043 0204 	orr.w	r2, r3, #4
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	fe00e800 	.word	0xfe00e800

080042fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	607b      	str	r3, [r7, #4]
 8004306:	460b      	mov	r3, r1
 8004308:	817b      	strh	r3, [r7, #10]
 800430a:	4613      	mov	r3, r2
 800430c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	0d5b      	lsrs	r3, r3, #21
 8004318:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800431c:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <I2C_TransferConfig+0x58>)
 800431e:	430b      	orrs	r3, r1
 8004320:	43db      	mvns	r3, r3
 8004322:	ea02 0103 	and.w	r1, r2, r3
 8004326:	897b      	ldrh	r3, [r7, #10]
 8004328:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800432c:	7a7b      	ldrb	r3, [r7, #9]
 800432e:	041b      	lsls	r3, r3, #16
 8004330:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	431a      	orrs	r2, r3
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	431a      	orrs	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	03ff63ff 	.word	0x03ff63ff

08004358 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b20      	cmp	r3, #32
 800436c:	d138      	bne.n	80043e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004378:	2302      	movs	r3, #2
 800437a:	e032      	b.n	80043e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2224      	movs	r2, #36	; 0x24
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	e000      	b.n	80043e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b20      	cmp	r3, #32
 8004402:	d139      	bne.n	8004478 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800440e:	2302      	movs	r3, #2
 8004410:	e033      	b.n	800447a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2224      	movs	r2, #36	; 0x24
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004440:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004478:	2302      	movs	r3, #2
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004486:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004488:	b08f      	sub	sp, #60	; 0x3c
 800448a:	af0a      	add	r7, sp, #40	; 0x28
 800448c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e116      	b.n	80046c6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fd fc68 	bl	8001d88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2203      	movs	r2, #3
 80044bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f003 faf9 	bl	8007ace <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	603b      	str	r3, [r7, #0]
 80044e2:	687e      	ldr	r6, [r7, #4]
 80044e4:	466d      	mov	r5, sp
 80044e6:	f106 0410 	add.w	r4, r6, #16
 80044ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80044fa:	1d33      	adds	r3, r6, #4
 80044fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044fe:	6838      	ldr	r0, [r7, #0]
 8004500:	f003 fab9 	bl	8007a76 <USB_CoreInit>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e0d7      	b.n	80046c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2100      	movs	r1, #0
 800451c:	4618      	mov	r0, r3
 800451e:	f003 fae7 	bl	8007af0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004522:	2300      	movs	r3, #0
 8004524:	73fb      	strb	r3, [r7, #15]
 8004526:	e04a      	b.n	80045be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004528:	7bfa      	ldrb	r2, [r7, #15]
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	333d      	adds	r3, #61	; 0x3d
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800453c:	7bfa      	ldrb	r2, [r7, #15]
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	333c      	adds	r3, #60	; 0x3c
 800454c:	7bfa      	ldrb	r2, [r7, #15]
 800454e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004550:	7bfa      	ldrb	r2, [r7, #15]
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	b298      	uxth	r0, r3
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	3342      	adds	r3, #66	; 0x42
 8004564:	4602      	mov	r2, r0
 8004566:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	333f      	adds	r3, #63	; 0x3f
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800457c:	7bfa      	ldrb	r2, [r7, #15]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	3344      	adds	r3, #68	; 0x44
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004590:	7bfa      	ldrb	r2, [r7, #15]
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	3348      	adds	r3, #72	; 0x48
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045a4:	7bfa      	ldrb	r2, [r7, #15]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	3350      	adds	r3, #80	; 0x50
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	3301      	adds	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	7bfa      	ldrb	r2, [r7, #15]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d3af      	bcc.n	8004528 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c8:	2300      	movs	r3, #0
 80045ca:	73fb      	strb	r3, [r7, #15]
 80045cc:	e044      	b.n	8004658 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045ce:	7bfa      	ldrb	r2, [r7, #15]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045e4:	7bfa      	ldrb	r2, [r7, #15]
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80045f6:	7bfa      	ldrb	r2, [r7, #15]
 80045f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004610:	7bfa      	ldrb	r2, [r7, #15]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004626:	7bfa      	ldrb	r2, [r7, #15]
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800463c:	7bfa      	ldrb	r2, [r7, #15]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	3301      	adds	r3, #1
 8004656:	73fb      	strb	r3, [r7, #15]
 8004658:	7bfa      	ldrb	r2, [r7, #15]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	d3b5      	bcc.n	80045ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	687e      	ldr	r6, [r7, #4]
 800466a:	466d      	mov	r5, sp
 800466c:	f106 0410 	add.w	r4, r6, #16
 8004670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004678:	e894 0003 	ldmia.w	r4, {r0, r1}
 800467c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004680:	1d33      	adds	r3, r6, #4
 8004682:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004684:	6838      	ldr	r0, [r7, #0]
 8004686:	f003 fa5d 	bl	8007b44 <USB_DevInit>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e014      	b.n	80046c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d102      	bne.n	80046ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f80a 	bl	80046ce <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f003 fbed 	bl	8007e9e <USB_DevDisconnect>

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004700:	f043 0303 	orr.w	r3, r3, #3
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800471c:	4b04      	ldr	r3, [pc, #16]	; (8004730 <HAL_PWREx_GetVoltageRange+0x18>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004724:	4618      	mov	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40007000 	.word	0x40007000

08004734 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004742:	d130      	bne.n	80047a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004744:	4b23      	ldr	r3, [pc, #140]	; (80047d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800474c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004750:	d038      	beq.n	80047c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004752:	4b20      	ldr	r3, [pc, #128]	; (80047d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800475a:	4a1e      	ldr	r2, [pc, #120]	; (80047d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800475c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004760:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2232      	movs	r2, #50	; 0x32
 8004768:	fb02 f303 	mul.w	r3, r2, r3
 800476c:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	0c9b      	lsrs	r3, r3, #18
 8004774:	3301      	adds	r3, #1
 8004776:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004778:	e002      	b.n	8004780 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3b01      	subs	r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004780:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478c:	d102      	bne.n	8004794 <HAL_PWREx_ControlVoltageScaling+0x60>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f2      	bne.n	800477a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004794:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a0:	d110      	bne.n	80047c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e00f      	b.n	80047c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b2:	d007      	beq.n	80047c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047b4:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047bc:	4a05      	ldr	r2, [pc, #20]	; (80047d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40007000 	.word	0x40007000
 80047d8:	20000000 	.word	0x20000000
 80047dc:	431bde83 	.word	0x431bde83

080047e0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a04      	ldr	r2, [pc, #16]	; (80047fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80047ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047ee:	6053      	str	r3, [r2, #4]
}
 80047f0:	bf00      	nop
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40007000 	.word	0x40007000

08004800 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af02      	add	r7, sp, #8
 8004806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004808:	f7fe fb74 	bl	8002ef4 <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e063      	b.n	80048e0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10b      	bne.n	800483c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fd f95b 	bl	8001ae8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004832:	f241 3188 	movw	r1, #5000	; 0x1388
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f858 	bl	80048ec <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	3b01      	subs	r3, #1
 800484c:	021a      	lsls	r2, r3, #8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	2120      	movs	r1, #32
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f850 	bl	8004908 <QSPI_WaitFlagStateUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800486c:	7afb      	ldrb	r3, [r7, #11]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d131      	bne.n	80048d6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800487c:	f023 0310 	bic.w	r3, r3, #16
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6852      	ldr	r2, [r2, #4]
 8004884:	0611      	lsls	r1, r2, #24
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68d2      	ldr	r2, [r2, #12]
 800488a:	4311      	orrs	r1, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	430b      	orrs	r3, r1
 8004892:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <HAL_QSPI_Init+0xe8>)
 800489c:	4013      	ands	r3, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6912      	ldr	r2, [r2, #16]
 80048a2:	0411      	lsls	r1, r2, #16
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6952      	ldr	r2, [r2, #20]
 80048a8:	4311      	orrs	r1, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6992      	ldr	r2, [r2, #24]
 80048ae:	4311      	orrs	r1, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	430b      	orrs	r3, r1
 80048b6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80048de:	7afb      	ldrb	r3, [r7, #11]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	ffe0f8fe 	.word	0xffe0f8fe

080048ec <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004918:	e01a      	b.n	8004950 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d016      	beq.n	8004950 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004922:	f7fe fae7 	bl	8002ef4 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	429a      	cmp	r2, r3
 8004930:	d302      	bcc.n	8004938 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10b      	bne.n	8004950 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2204      	movs	r2, #4
 800493c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004944:	f043 0201 	orr.w	r2, r3, #1
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e00e      	b.n	800496e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4013      	ands	r3, r2
 800495a:	2b00      	cmp	r3, #0
 800495c:	bf14      	ite	ne
 800495e:	2301      	movne	r3, #1
 8004960:	2300      	moveq	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	429a      	cmp	r2, r3
 800496a:	d1d6      	bne.n	800491a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e3d4      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800498a:	4ba1      	ldr	r3, [pc, #644]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 030c 	and.w	r3, r3, #12
 8004992:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004994:	4b9e      	ldr	r3, [pc, #632]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 80e4 	beq.w	8004b74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <HAL_RCC_OscConfig+0x4a>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b0c      	cmp	r3, #12
 80049b6:	f040 808b 	bne.w	8004ad0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	f040 8087 	bne.w	8004ad0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049c2:	4b93      	ldr	r3, [pc, #588]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <HAL_RCC_OscConfig+0x62>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e3ac      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1a      	ldr	r2, [r3, #32]
 80049de:	4b8c      	ldr	r3, [pc, #560]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d004      	beq.n	80049f4 <HAL_RCC_OscConfig+0x7c>
 80049ea:	4b89      	ldr	r3, [pc, #548]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049f2:	e005      	b.n	8004a00 <HAL_RCC_OscConfig+0x88>
 80049f4:	4b86      	ldr	r3, [pc, #536]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 80049f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d223      	bcs.n	8004a4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fd73 	bl	80054f4 <RCC_SetFlashLatencyFromMSIRange>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e38d      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a18:	4b7d      	ldr	r3, [pc, #500]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a7c      	ldr	r2, [pc, #496]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004a1e:	f043 0308 	orr.w	r3, r3, #8
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	4b7a      	ldr	r3, [pc, #488]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	4977      	ldr	r1, [pc, #476]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a36:	4b76      	ldr	r3, [pc, #472]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	4972      	ldr	r1, [pc, #456]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	604b      	str	r3, [r1, #4]
 8004a4a:	e025      	b.n	8004a98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a4c:	4b70      	ldr	r3, [pc, #448]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a6f      	ldr	r2, [pc, #444]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004a52:	f043 0308 	orr.w	r3, r3, #8
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b6d      	ldr	r3, [pc, #436]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	496a      	ldr	r1, [pc, #424]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a6a:	4b69      	ldr	r3, [pc, #420]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	4965      	ldr	r1, [pc, #404]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fd33 	bl	80054f4 <RCC_SetFlashLatencyFromMSIRange>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e34d      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a98:	f000 fc36 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	4b5c      	ldr	r3, [pc, #368]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	091b      	lsrs	r3, r3, #4
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	495a      	ldr	r1, [pc, #360]	; (8004c14 <HAL_RCC_OscConfig+0x29c>)
 8004aaa:	5ccb      	ldrb	r3, [r1, r3]
 8004aac:	f003 031f 	and.w	r3, r3, #31
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab4:	4a58      	ldr	r2, [pc, #352]	; (8004c18 <HAL_RCC_OscConfig+0x2a0>)
 8004ab6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ab8:	4b58      	ldr	r3, [pc, #352]	; (8004c1c <HAL_RCC_OscConfig+0x2a4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fd f9cf 	bl	8001e60 <HAL_InitTick>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d052      	beq.n	8004b72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	e331      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d032      	beq.n	8004b3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ad8:	4b4d      	ldr	r3, [pc, #308]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a4c      	ldr	r2, [pc, #304]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ae4:	f7fe fa06 	bl	8002ef4 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aec:	f7fe fa02 	bl	8002ef4 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e31a      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004afe:	4b44      	ldr	r3, [pc, #272]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b0a:	4b41      	ldr	r3, [pc, #260]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a40      	ldr	r2, [pc, #256]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004b10:	f043 0308 	orr.w	r3, r3, #8
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4b3e      	ldr	r3, [pc, #248]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	493b      	ldr	r1, [pc, #236]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b28:	4b39      	ldr	r3, [pc, #228]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	4936      	ldr	r1, [pc, #216]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	604b      	str	r3, [r1, #4]
 8004b3c:	e01a      	b.n	8004b74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b3e:	4b34      	ldr	r3, [pc, #208]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a33      	ldr	r2, [pc, #204]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b4a:	f7fe f9d3 	bl	8002ef4 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b52:	f7fe f9cf 	bl	8002ef4 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e2e7      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b64:	4b2a      	ldr	r3, [pc, #168]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f0      	bne.n	8004b52 <HAL_RCC_OscConfig+0x1da>
 8004b70:	e000      	b.n	8004b74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d074      	beq.n	8004c6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d005      	beq.n	8004b92 <HAL_RCC_OscConfig+0x21a>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b0c      	cmp	r3, #12
 8004b8a:	d10e      	bne.n	8004baa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d10b      	bne.n	8004baa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b92:	4b1f      	ldr	r3, [pc, #124]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d064      	beq.n	8004c68 <HAL_RCC_OscConfig+0x2f0>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d160      	bne.n	8004c68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e2c4      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb2:	d106      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x24a>
 8004bb4:	4b16      	ldr	r3, [pc, #88]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a15      	ldr	r2, [pc, #84]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	e01d      	b.n	8004bfe <HAL_RCC_OscConfig+0x286>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bca:	d10c      	bne.n	8004be6 <HAL_RCC_OscConfig+0x26e>
 8004bcc:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a0f      	ldr	r2, [pc, #60]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004bd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a0c      	ldr	r2, [pc, #48]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	e00b      	b.n	8004bfe <HAL_RCC_OscConfig+0x286>
 8004be6:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a09      	ldr	r2, [pc, #36]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a06      	ldr	r2, [pc, #24]	; (8004c10 <HAL_RCC_OscConfig+0x298>)
 8004bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bfc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d01c      	beq.n	8004c40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c06:	f7fe f975 	bl	8002ef4 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c0c:	e011      	b.n	8004c32 <HAL_RCC_OscConfig+0x2ba>
 8004c0e:	bf00      	nop
 8004c10:	40021000 	.word	0x40021000
 8004c14:	0800bfcc 	.word	0x0800bfcc
 8004c18:	20000000 	.word	0x20000000
 8004c1c:	20000024 	.word	0x20000024
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fe f968 	bl	8002ef4 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e280      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c32:	4baf      	ldr	r3, [pc, #700]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x2a8>
 8004c3e:	e014      	b.n	8004c6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fe f958 	bl	8002ef4 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fe f954 	bl	8002ef4 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e26c      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c5a:	4ba5      	ldr	r3, [pc, #660]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x2d0>
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d060      	beq.n	8004d38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCC_OscConfig+0x310>
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b0c      	cmp	r3, #12
 8004c80:	d119      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d116      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c88:	4b99      	ldr	r3, [pc, #612]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x328>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e249      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca0:	4b93      	ldr	r3, [pc, #588]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	061b      	lsls	r3, r3, #24
 8004cae:	4990      	ldr	r1, [pc, #576]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb4:	e040      	b.n	8004d38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d023      	beq.n	8004d06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cbe:	4b8c      	ldr	r3, [pc, #560]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a8b      	ldr	r2, [pc, #556]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cca:	f7fe f913 	bl	8002ef4 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd2:	f7fe f90f 	bl	8002ef4 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e227      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ce4:	4b82      	ldr	r3, [pc, #520]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0f0      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf0:	4b7f      	ldr	r3, [pc, #508]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	061b      	lsls	r3, r3, #24
 8004cfe:	497c      	ldr	r1, [pc, #496]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]
 8004d04:	e018      	b.n	8004d38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d06:	4b7a      	ldr	r3, [pc, #488]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a79      	ldr	r2, [pc, #484]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d12:	f7fe f8ef 	bl	8002ef4 <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d1a:	f7fe f8eb 	bl	8002ef4 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e203      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d2c:	4b70      	ldr	r3, [pc, #448]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f0      	bne.n	8004d1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d03c      	beq.n	8004dbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01c      	beq.n	8004d86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d4c:	4b68      	ldr	r3, [pc, #416]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d52:	4a67      	ldr	r2, [pc, #412]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5c:	f7fe f8ca 	bl	8002ef4 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d64:	f7fe f8c6 	bl	8002ef4 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e1de      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d76:	4b5e      	ldr	r3, [pc, #376]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0ef      	beq.n	8004d64 <HAL_RCC_OscConfig+0x3ec>
 8004d84:	e01b      	b.n	8004dbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d86:	4b5a      	ldr	r3, [pc, #360]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d8c:	4a58      	ldr	r2, [pc, #352]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004d8e:	f023 0301 	bic.w	r3, r3, #1
 8004d92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d96:	f7fe f8ad 	bl	8002ef4 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d9e:	f7fe f8a9 	bl	8002ef4 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e1c1      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004db0:	4b4f      	ldr	r3, [pc, #316]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1ef      	bne.n	8004d9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 80a6 	beq.w	8004f18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004dd0:	4b47      	ldr	r3, [pc, #284]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10d      	bne.n	8004df8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ddc:	4b44      	ldr	r3, [pc, #272]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de0:	4a43      	ldr	r2, [pc, #268]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de6:	6593      	str	r3, [r2, #88]	; 0x58
 8004de8:	4b41      	ldr	r3, [pc, #260]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df4:	2301      	movs	r3, #1
 8004df6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df8:	4b3e      	ldr	r3, [pc, #248]	; (8004ef4 <HAL_RCC_OscConfig+0x57c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d118      	bne.n	8004e36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e04:	4b3b      	ldr	r3, [pc, #236]	; (8004ef4 <HAL_RCC_OscConfig+0x57c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a3a      	ldr	r2, [pc, #232]	; (8004ef4 <HAL_RCC_OscConfig+0x57c>)
 8004e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e10:	f7fe f870 	bl	8002ef4 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e18:	f7fe f86c 	bl	8002ef4 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e184      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e2a:	4b32      	ldr	r3, [pc, #200]	; (8004ef4 <HAL_RCC_OscConfig+0x57c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0f0      	beq.n	8004e18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d108      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4d8>
 8004e3e:	4b2c      	ldr	r3, [pc, #176]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e44:	4a2a      	ldr	r2, [pc, #168]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e4e:	e024      	b.n	8004e9a <HAL_RCC_OscConfig+0x522>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2b05      	cmp	r3, #5
 8004e56:	d110      	bne.n	8004e7a <HAL_RCC_OscConfig+0x502>
 8004e58:	4b25      	ldr	r3, [pc, #148]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	4a24      	ldr	r2, [pc, #144]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004e60:	f043 0304 	orr.w	r3, r3, #4
 8004e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e68:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6e:	4a20      	ldr	r2, [pc, #128]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e78:	e00f      	b.n	8004e9a <HAL_RCC_OscConfig+0x522>
 8004e7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e80:	4a1b      	ldr	r2, [pc, #108]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004e82:	f023 0301 	bic.w	r3, r3, #1
 8004e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e8a:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e90:	4a17      	ldr	r2, [pc, #92]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004e92:	f023 0304 	bic.w	r3, r3, #4
 8004e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d016      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea2:	f7fe f827 	bl	8002ef4 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ea8:	e00a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eaa:	f7fe f823 	bl	8002ef4 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e139      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <HAL_RCC_OscConfig+0x578>)
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0ed      	beq.n	8004eaa <HAL_RCC_OscConfig+0x532>
 8004ece:	e01a      	b.n	8004f06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed0:	f7fe f810 	bl	8002ef4 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ed6:	e00f      	b.n	8004ef8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed8:	f7fe f80c 	bl	8002ef4 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d906      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e122      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
 8004eee:	bf00      	nop
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ef8:	4b90      	ldr	r3, [pc, #576]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e8      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f06:	7ffb      	ldrb	r3, [r7, #31]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d105      	bne.n	8004f18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f0c:	4b8b      	ldr	r3, [pc, #556]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8004f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f10:	4a8a      	ldr	r2, [pc, #552]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8004f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8108 	beq.w	8005132 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	f040 80d0 	bne.w	80050cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f2c:	4b83      	ldr	r3, [pc, #524]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f003 0203 	and.w	r2, r3, #3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d130      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d127      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d11f      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f6c:	2a07      	cmp	r2, #7
 8004f6e:	bf14      	ite	ne
 8004f70:	2201      	movne	r2, #1
 8004f72:	2200      	moveq	r2, #0
 8004f74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d113      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f84:	085b      	lsrs	r3, r3, #1
 8004f86:	3b01      	subs	r3, #1
 8004f88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d109      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	085b      	lsrs	r3, r3, #1
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d06e      	beq.n	8005080 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b0c      	cmp	r3, #12
 8004fa6:	d069      	beq.n	800507c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fa8:	4b64      	ldr	r3, [pc, #400]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004fb4:	4b61      	ldr	r3, [pc, #388]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e0b7      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004fc4:	4b5d      	ldr	r3, [pc, #372]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a5c      	ldr	r2, [pc, #368]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8004fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fd0:	f7fd ff90 	bl	8002ef4 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fd ff8c 	bl	8002ef4 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e0a4      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fea:	4b54      	ldr	r3, [pc, #336]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ff6:	4b51      	ldr	r3, [pc, #324]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	4b51      	ldr	r3, [pc, #324]	; (8005140 <HAL_RCC_OscConfig+0x7c8>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005006:	3a01      	subs	r2, #1
 8005008:	0112      	lsls	r2, r2, #4
 800500a:	4311      	orrs	r1, r2
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005010:	0212      	lsls	r2, r2, #8
 8005012:	4311      	orrs	r1, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005018:	0852      	lsrs	r2, r2, #1
 800501a:	3a01      	subs	r2, #1
 800501c:	0552      	lsls	r2, r2, #21
 800501e:	4311      	orrs	r1, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005024:	0852      	lsrs	r2, r2, #1
 8005026:	3a01      	subs	r2, #1
 8005028:	0652      	lsls	r2, r2, #25
 800502a:	4311      	orrs	r1, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005030:	0912      	lsrs	r2, r2, #4
 8005032:	0452      	lsls	r2, r2, #17
 8005034:	430a      	orrs	r2, r1
 8005036:	4941      	ldr	r1, [pc, #260]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8005038:	4313      	orrs	r3, r2
 800503a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800503c:	4b3f      	ldr	r3, [pc, #252]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a3e      	ldr	r2, [pc, #248]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8005042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005046:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005048:	4b3c      	ldr	r3, [pc, #240]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	4a3b      	ldr	r2, [pc, #236]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 800504e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005052:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005054:	f7fd ff4e 	bl	8002ef4 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505c:	f7fd ff4a 	bl	8002ef4 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e062      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800506e:	4b33      	ldr	r3, [pc, #204]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800507a:	e05a      	b.n	8005132 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e059      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005080:	4b2e      	ldr	r3, [pc, #184]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d152      	bne.n	8005132 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800508c:	4b2b      	ldr	r3, [pc, #172]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a2a      	ldr	r2, [pc, #168]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8005092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005096:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005098:	4b28      	ldr	r3, [pc, #160]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4a27      	ldr	r2, [pc, #156]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 800509e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050a4:	f7fd ff26 	bl	8002ef4 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fd ff22 	bl	8002ef4 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e03a      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050be:	4b1f      	ldr	r3, [pc, #124]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0x734>
 80050ca:	e032      	b.n	8005132 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b0c      	cmp	r3, #12
 80050d0:	d02d      	beq.n	800512e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d2:	4b1a      	ldr	r3, [pc, #104]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a19      	ldr	r2, [pc, #100]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 80050d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80050de:	4b17      	ldr	r3, [pc, #92]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d105      	bne.n	80050f6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80050ea:	4b14      	ldr	r3, [pc, #80]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	4a13      	ldr	r2, [pc, #76]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 80050f0:	f023 0303 	bic.w	r3, r3, #3
 80050f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050f6:	4b11      	ldr	r3, [pc, #68]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	4a10      	ldr	r2, [pc, #64]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 80050fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005104:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005106:	f7fd fef5 	bl	8002ef4 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510e:	f7fd fef1 	bl	8002ef4 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e009      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_RCC_OscConfig+0x7c4>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1f0      	bne.n	800510e <HAL_RCC_OscConfig+0x796>
 800512c:	e001      	b.n	8005132 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3720      	adds	r7, #32
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40021000 	.word	0x40021000
 8005140:	f99d808c 	.word	0xf99d808c

08005144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0c8      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005158:	4b66      	ldr	r3, [pc, #408]	; (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d910      	bls.n	8005188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005166:	4b63      	ldr	r3, [pc, #396]	; (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f023 0207 	bic.w	r2, r3, #7
 800516e:	4961      	ldr	r1, [pc, #388]	; (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	4313      	orrs	r3, r2
 8005174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005176:	4b5f      	ldr	r3, [pc, #380]	; (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0b0      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d04c      	beq.n	800522e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b03      	cmp	r3, #3
 800519a:	d107      	bne.n	80051ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800519c:	4b56      	ldr	r3, [pc, #344]	; (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d121      	bne.n	80051ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e09e      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d107      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051b4:	4b50      	ldr	r3, [pc, #320]	; (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d115      	bne.n	80051ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e092      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d107      	bne.n	80051dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051cc:	4b4a      	ldr	r3, [pc, #296]	; (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d109      	bne.n	80051ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e086      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051dc:	4b46      	ldr	r3, [pc, #280]	; (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e07e      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051ec:	4b42      	ldr	r3, [pc, #264]	; (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f023 0203 	bic.w	r2, r3, #3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	493f      	ldr	r1, [pc, #252]	; (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051fe:	f7fd fe79 	bl	8002ef4 <HAL_GetTick>
 8005202:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005204:	e00a      	b.n	800521c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005206:	f7fd fe75 	bl	8002ef4 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	f241 3288 	movw	r2, #5000	; 0x1388
 8005214:	4293      	cmp	r3, r2
 8005216:	d901      	bls.n	800521c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e066      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521c:	4b36      	ldr	r3, [pc, #216]	; (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 020c 	and.w	r2, r3, #12
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	429a      	cmp	r2, r3
 800522c:	d1eb      	bne.n	8005206 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d008      	beq.n	800524c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800523a:	4b2f      	ldr	r3, [pc, #188]	; (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	492c      	ldr	r1, [pc, #176]	; (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 8005248:	4313      	orrs	r3, r2
 800524a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800524c:	4b29      	ldr	r3, [pc, #164]	; (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d210      	bcs.n	800527c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525a:	4b26      	ldr	r3, [pc, #152]	; (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 0207 	bic.w	r2, r3, #7
 8005262:	4924      	ldr	r1, [pc, #144]	; (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	4313      	orrs	r3, r2
 8005268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800526a:	4b22      	ldr	r3, [pc, #136]	; (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d001      	beq.n	800527c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e036      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005288:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4918      	ldr	r1, [pc, #96]	; (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 8005296:	4313      	orrs	r3, r2
 8005298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d009      	beq.n	80052ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052a6:	4b14      	ldr	r3, [pc, #80]	; (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	4910      	ldr	r1, [pc, #64]	; (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052ba:	f000 f825 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 80052be:	4602      	mov	r2, r0
 80052c0:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	490c      	ldr	r1, [pc, #48]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 80052cc:	5ccb      	ldrb	r3, [r1, r3]
 80052ce:	f003 031f 	and.w	r3, r3, #31
 80052d2:	fa22 f303 	lsr.w	r3, r2, r3
 80052d6:	4a0a      	ldr	r2, [pc, #40]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80052d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052da:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <HAL_RCC_ClockConfig+0x1c0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fc fdbe 	bl	8001e60 <HAL_InitTick>
 80052e4:	4603      	mov	r3, r0
 80052e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80052e8:	7afb      	ldrb	r3, [r7, #11]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40022000 	.word	0x40022000
 80052f8:	40021000 	.word	0x40021000
 80052fc:	0800bfcc 	.word	0x0800bfcc
 8005300:	20000000 	.word	0x20000000
 8005304:	20000024 	.word	0x20000024

08005308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005308:	b480      	push	{r7}
 800530a:	b089      	sub	sp, #36	; 0x24
 800530c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005316:	4b3e      	ldr	r3, [pc, #248]	; (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 030c 	and.w	r3, r3, #12
 800531e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005320:	4b3b      	ldr	r3, [pc, #236]	; (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_GetSysClockFreq+0x34>
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b0c      	cmp	r3, #12
 8005334:	d121      	bne.n	800537a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d11e      	bne.n	800537a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800533c:	4b34      	ldr	r3, [pc, #208]	; (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d107      	bne.n	8005358 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005348:	4b31      	ldr	r3, [pc, #196]	; (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 800534a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	e005      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005358:	4b2d      	ldr	r3, [pc, #180]	; (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005364:	4a2b      	ldr	r2, [pc, #172]	; (8005414 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10d      	bne.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005378:	e00a      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b04      	cmp	r3, #4
 800537e:	d102      	bne.n	8005386 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005380:	4b25      	ldr	r3, [pc, #148]	; (8005418 <HAL_RCC_GetSysClockFreq+0x110>)
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	e004      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d101      	bne.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800538c:	4b23      	ldr	r3, [pc, #140]	; (800541c <HAL_RCC_GetSysClockFreq+0x114>)
 800538e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	2b0c      	cmp	r3, #12
 8005394:	d134      	bne.n	8005400 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005396:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d003      	beq.n	80053ae <HAL_RCC_GetSysClockFreq+0xa6>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d003      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0xac>
 80053ac:	e005      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053ae:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <HAL_RCC_GetSysClockFreq+0x110>)
 80053b0:	617b      	str	r3, [r7, #20]
      break;
 80053b2:	e005      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053b4:	4b19      	ldr	r3, [pc, #100]	; (800541c <HAL_RCC_GetSysClockFreq+0x114>)
 80053b6:	617b      	str	r3, [r7, #20]
      break;
 80053b8:	e002      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	617b      	str	r3, [r7, #20]
      break;
 80053be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053c0:	4b13      	ldr	r3, [pc, #76]	; (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	3301      	adds	r3, #1
 80053cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053ce:	4b10      	ldr	r3, [pc, #64]	; (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	0a1b      	lsrs	r3, r3, #8
 80053d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	fb02 f203 	mul.w	r2, r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	0e5b      	lsrs	r3, r3, #25
 80053ec:	f003 0303 	and.w	r3, r3, #3
 80053f0:	3301      	adds	r3, #1
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005400:	69bb      	ldr	r3, [r7, #24]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3724      	adds	r7, #36	; 0x24
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000
 8005414:	0800bfe4 	.word	0x0800bfe4
 8005418:	00f42400 	.word	0x00f42400
 800541c:	007a1200 	.word	0x007a1200

08005420 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005424:	4b03      	ldr	r3, [pc, #12]	; (8005434 <HAL_RCC_GetHCLKFreq+0x14>)
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20000000 	.word	0x20000000

08005438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800543c:	f7ff fff0 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 8005440:	4602      	mov	r2, r0
 8005442:	4b06      	ldr	r3, [pc, #24]	; (800545c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	0a1b      	lsrs	r3, r3, #8
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	4904      	ldr	r1, [pc, #16]	; (8005460 <HAL_RCC_GetPCLK1Freq+0x28>)
 800544e:	5ccb      	ldrb	r3, [r1, r3]
 8005450:	f003 031f 	and.w	r3, r3, #31
 8005454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005458:	4618      	mov	r0, r3
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40021000 	.word	0x40021000
 8005460:	0800bfdc 	.word	0x0800bfdc

08005464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005468:	f7ff ffda 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 800546c:	4602      	mov	r2, r0
 800546e:	4b06      	ldr	r3, [pc, #24]	; (8005488 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	0adb      	lsrs	r3, r3, #11
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	4904      	ldr	r1, [pc, #16]	; (800548c <HAL_RCC_GetPCLK2Freq+0x28>)
 800547a:	5ccb      	ldrb	r3, [r1, r3]
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40021000 	.word	0x40021000
 800548c:	0800bfdc 	.word	0x0800bfdc

08005490 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	220f      	movs	r2, #15
 800549e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80054a0:	4b12      	ldr	r3, [pc, #72]	; (80054ec <HAL_RCC_GetClockConfig+0x5c>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 0203 	and.w	r2, r3, #3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80054ac:	4b0f      	ldr	r3, [pc, #60]	; (80054ec <HAL_RCC_GetClockConfig+0x5c>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80054b8:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <HAL_RCC_GetClockConfig+0x5c>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80054c4:	4b09      	ldr	r3, [pc, #36]	; (80054ec <HAL_RCC_GetClockConfig+0x5c>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	08db      	lsrs	r3, r3, #3
 80054ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80054d2:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <HAL_RCC_GetClockConfig+0x60>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0207 	and.w	r2, r3, #7
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	601a      	str	r2, [r3, #0]
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40021000 	.word	0x40021000
 80054f0:	40022000 	.word	0x40022000

080054f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054fc:	2300      	movs	r3, #0
 80054fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005500:	4b2a      	ldr	r3, [pc, #168]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800550c:	f7ff f904 	bl	8004718 <HAL_PWREx_GetVoltageRange>
 8005510:	6178      	str	r0, [r7, #20]
 8005512:	e014      	b.n	800553e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005514:	4b25      	ldr	r3, [pc, #148]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005518:	4a24      	ldr	r2, [pc, #144]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800551a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551e:	6593      	str	r3, [r2, #88]	; 0x58
 8005520:	4b22      	ldr	r3, [pc, #136]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800552c:	f7ff f8f4 	bl	8004718 <HAL_PWREx_GetVoltageRange>
 8005530:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005532:	4b1e      	ldr	r3, [pc, #120]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	4a1d      	ldr	r2, [pc, #116]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800553c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005544:	d10b      	bne.n	800555e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b80      	cmp	r3, #128	; 0x80
 800554a:	d919      	bls.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2ba0      	cmp	r3, #160	; 0xa0
 8005550:	d902      	bls.n	8005558 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005552:	2302      	movs	r3, #2
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	e013      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005558:	2301      	movs	r3, #1
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	e010      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b80      	cmp	r3, #128	; 0x80
 8005562:	d902      	bls.n	800556a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005564:	2303      	movs	r3, #3
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	e00a      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b80      	cmp	r3, #128	; 0x80
 800556e:	d102      	bne.n	8005576 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005570:	2302      	movs	r3, #2
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	e004      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b70      	cmp	r3, #112	; 0x70
 800557a:	d101      	bne.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800557c:	2301      	movs	r3, #1
 800557e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f023 0207 	bic.w	r2, r3, #7
 8005588:	4909      	ldr	r1, [pc, #36]	; (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005590:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	429a      	cmp	r2, r3
 800559c:	d001      	beq.n	80055a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40022000 	.word	0x40022000

080055b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055bc:	2300      	movs	r3, #0
 80055be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055c0:	2300      	movs	r3, #0
 80055c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d041      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055d8:	d02a      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80055da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055de:	d824      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055e4:	d008      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80055e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055ea:	d81e      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80055f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f4:	d010      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055f6:	e018      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055f8:	4b86      	ldr	r3, [pc, #536]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4a85      	ldr	r2, [pc, #532]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005602:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005604:	e015      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3304      	adds	r3, #4
 800560a:	2100      	movs	r1, #0
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fabb 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005616:	e00c      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3320      	adds	r3, #32
 800561c:	2100      	movs	r1, #0
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fba6 	bl	8005d70 <RCCEx_PLLSAI2_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005628:	e003      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	74fb      	strb	r3, [r7, #19]
      break;
 800562e:	e000      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005632:	7cfb      	ldrb	r3, [r7, #19]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10b      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005638:	4b76      	ldr	r3, [pc, #472]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005646:	4973      	ldr	r1, [pc, #460]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800564e:	e001      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005650:	7cfb      	ldrb	r3, [r7, #19]
 8005652:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d041      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005664:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005668:	d02a      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800566a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800566e:	d824      	bhi.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005670:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005674:	d008      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800567a:	d81e      	bhi.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005684:	d010      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005686:	e018      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005688:	4b62      	ldr	r3, [pc, #392]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	4a61      	ldr	r2, [pc, #388]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800568e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005692:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005694:	e015      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3304      	adds	r3, #4
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fa73 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056a6:	e00c      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3320      	adds	r3, #32
 80056ac:	2100      	movs	r1, #0
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fb5e 	bl	8005d70 <RCCEx_PLLSAI2_Config>
 80056b4:	4603      	mov	r3, r0
 80056b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056b8:	e003      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	74fb      	strb	r3, [r7, #19]
      break;
 80056be:	e000      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80056c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c2:	7cfb      	ldrb	r3, [r7, #19]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10b      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056c8:	4b52      	ldr	r3, [pc, #328]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056d6:	494f      	ldr	r1, [pc, #316]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80056de:	e001      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e0:	7cfb      	ldrb	r3, [r7, #19]
 80056e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80a0 	beq.w	8005832 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f2:	2300      	movs	r3, #0
 80056f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056f6:	4b47      	ldr	r3, [pc, #284]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005706:	2300      	movs	r3, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800570c:	4b41      	ldr	r3, [pc, #260]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800570e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005710:	4a40      	ldr	r2, [pc, #256]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005716:	6593      	str	r3, [r2, #88]	; 0x58
 8005718:	4b3e      	ldr	r3, [pc, #248]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800571a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005724:	2301      	movs	r3, #1
 8005726:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005728:	4b3b      	ldr	r3, [pc, #236]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a3a      	ldr	r2, [pc, #232]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800572e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005734:	f7fd fbde 	bl	8002ef4 <HAL_GetTick>
 8005738:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800573a:	e009      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800573c:	f7fd fbda 	bl	8002ef4 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d902      	bls.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	74fb      	strb	r3, [r7, #19]
        break;
 800574e:	e005      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005750:	4b31      	ldr	r3, [pc, #196]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0ef      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800575c:	7cfb      	ldrb	r3, [r7, #19]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d15c      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005762:	4b2c      	ldr	r3, [pc, #176]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800576c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01f      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	429a      	cmp	r2, r3
 800577e:	d019      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005780:	4b24      	ldr	r3, [pc, #144]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800578c:	4b21      	ldr	r3, [pc, #132]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800578e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005792:	4a20      	ldr	r2, [pc, #128]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800579c:	4b1d      	ldr	r3, [pc, #116]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a2:	4a1c      	ldr	r2, [pc, #112]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057ac:	4a19      	ldr	r2, [pc, #100]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d016      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057be:	f7fd fb99 	bl	8002ef4 <HAL_GetTick>
 80057c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057c4:	e00b      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c6:	f7fd fb95 	bl	8002ef4 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d902      	bls.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	74fb      	strb	r3, [r7, #19]
            break;
 80057dc:	e006      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057de:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0ec      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80057ec:	7cfb      	ldrb	r3, [r7, #19]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10c      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057f2:	4b08      	ldr	r3, [pc, #32]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005802:	4904      	ldr	r1, [pc, #16]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800580a:	e009      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800580c:	7cfb      	ldrb	r3, [r7, #19]
 800580e:	74bb      	strb	r3, [r7, #18]
 8005810:	e006      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005812:	bf00      	nop
 8005814:	40021000 	.word	0x40021000
 8005818:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581c:	7cfb      	ldrb	r3, [r7, #19]
 800581e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005820:	7c7b      	ldrb	r3, [r7, #17]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d105      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005826:	4b9e      	ldr	r3, [pc, #632]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582a:	4a9d      	ldr	r2, [pc, #628]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800582c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005830:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800583e:	4b98      	ldr	r3, [pc, #608]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005844:	f023 0203 	bic.w	r2, r3, #3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	4994      	ldr	r1, [pc, #592]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005860:	4b8f      	ldr	r3, [pc, #572]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	f023 020c 	bic.w	r2, r3, #12
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586e:	498c      	ldr	r1, [pc, #560]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005882:	4b87      	ldr	r3, [pc, #540]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005888:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005890:	4983      	ldr	r1, [pc, #524]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058a4:	4b7e      	ldr	r3, [pc, #504]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	497b      	ldr	r1, [pc, #492]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058c6:	4b76      	ldr	r3, [pc, #472]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d4:	4972      	ldr	r1, [pc, #456]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058e8:	4b6d      	ldr	r3, [pc, #436]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f6:	496a      	ldr	r1, [pc, #424]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800590a:	4b65      	ldr	r3, [pc, #404]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005910:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005918:	4961      	ldr	r1, [pc, #388]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800592c:	4b5c      	ldr	r3, [pc, #368]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005932:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593a:	4959      	ldr	r1, [pc, #356]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800594e:	4b54      	ldr	r3, [pc, #336]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005954:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595c:	4950      	ldr	r1, [pc, #320]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005970:	4b4b      	ldr	r3, [pc, #300]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005976:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597e:	4948      	ldr	r1, [pc, #288]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005992:	4b43      	ldr	r3, [pc, #268]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005998:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a0:	493f      	ldr	r1, [pc, #252]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d028      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059b4:	4b3a      	ldr	r3, [pc, #232]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c2:	4937      	ldr	r1, [pc, #220]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059d2:	d106      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d4:	4b32      	ldr	r3, [pc, #200]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	4a31      	ldr	r2, [pc, #196]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059de:	60d3      	str	r3, [r2, #12]
 80059e0:	e011      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059ea:	d10c      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3304      	adds	r3, #4
 80059f0:	2101      	movs	r1, #1
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 f8c8 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059fc:	7cfb      	ldrb	r3, [r7, #19]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005a02:	7cfb      	ldrb	r3, [r7, #19]
 8005a04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d028      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a12:	4b23      	ldr	r3, [pc, #140]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a20:	491f      	ldr	r1, [pc, #124]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a30:	d106      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a32:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	4a1a      	ldr	r2, [pc, #104]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a3c:	60d3      	str	r3, [r2, #12]
 8005a3e:	e011      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a48:	d10c      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	2101      	movs	r1, #1
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 f899 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a5a:	7cfb      	ldrb	r3, [r7, #19]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005a60:	7cfb      	ldrb	r3, [r7, #19]
 8005a62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d02b      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a7e:	4908      	ldr	r1, [pc, #32]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a8e:	d109      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a90:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4a02      	ldr	r2, [pc, #8]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a9a:	60d3      	str	r3, [r2, #12]
 8005a9c:	e014      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005a9e:	bf00      	nop
 8005aa0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aac:	d10c      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 f867 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 8005aba:	4603      	mov	r3, r0
 8005abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005abe:	7cfb      	ldrb	r3, [r7, #19]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005ac4:	7cfb      	ldrb	r3, [r7, #19]
 8005ac6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d02f      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ad4:	4b2b      	ldr	r3, [pc, #172]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ae2:	4928      	ldr	r1, [pc, #160]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005af2:	d10d      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3304      	adds	r3, #4
 8005af8:	2102      	movs	r1, #2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 f844 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b04:	7cfb      	ldrb	r3, [r7, #19]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d014      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b0a:	7cfb      	ldrb	r3, [r7, #19]
 8005b0c:	74bb      	strb	r3, [r7, #18]
 8005b0e:	e011      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b18:	d10c      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3320      	adds	r3, #32
 8005b1e:	2102      	movs	r1, #2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 f925 	bl	8005d70 <RCCEx_PLLSAI2_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b2a:	7cfb      	ldrb	r3, [r7, #19]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b30:	7cfb      	ldrb	r3, [r7, #19]
 8005b32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b40:	4b10      	ldr	r3, [pc, #64]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b4e:	490d      	ldr	r1, [pc, #52]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00b      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b62:	4b08      	ldr	r3, [pc, #32]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b72:	4904      	ldr	r1, [pc, #16]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40021000 	.word	0x40021000

08005b88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b96:	4b75      	ldr	r3, [pc, #468]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d018      	beq.n	8005bd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ba2:	4b72      	ldr	r3, [pc, #456]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f003 0203 	and.w	r2, r3, #3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d10d      	bne.n	8005bce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
       ||
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005bba:	4b6c      	ldr	r3, [pc, #432]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
       ||
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d047      	beq.n	8005c5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	73fb      	strb	r3, [r7, #15]
 8005bd2:	e044      	b.n	8005c5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d018      	beq.n	8005c0e <RCCEx_PLLSAI1_Config+0x86>
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d825      	bhi.n	8005c2c <RCCEx_PLLSAI1_Config+0xa4>
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d002      	beq.n	8005bea <RCCEx_PLLSAI1_Config+0x62>
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d009      	beq.n	8005bfc <RCCEx_PLLSAI1_Config+0x74>
 8005be8:	e020      	b.n	8005c2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bea:	4b60      	ldr	r3, [pc, #384]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d11d      	bne.n	8005c32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bfa:	e01a      	b.n	8005c32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005bfc:	4b5b      	ldr	r3, [pc, #364]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d116      	bne.n	8005c36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c0c:	e013      	b.n	8005c36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c0e:	4b57      	ldr	r3, [pc, #348]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10f      	bne.n	8005c3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c1a:	4b54      	ldr	r3, [pc, #336]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c2a:	e006      	b.n	8005c3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c30:	e004      	b.n	8005c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c32:	bf00      	nop
 8005c34:	e002      	b.n	8005c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c36:	bf00      	nop
 8005c38:	e000      	b.n	8005c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10d      	bne.n	8005c5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c42:	4b4a      	ldr	r3, [pc, #296]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6819      	ldr	r1, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	430b      	orrs	r3, r1
 8005c58:	4944      	ldr	r1, [pc, #272]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d17d      	bne.n	8005d60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c64:	4b41      	ldr	r3, [pc, #260]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a40      	ldr	r2, [pc, #256]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c70:	f7fd f940 	bl	8002ef4 <HAL_GetTick>
 8005c74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c76:	e009      	b.n	8005c8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c78:	f7fd f93c 	bl	8002ef4 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d902      	bls.n	8005c8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	73fb      	strb	r3, [r7, #15]
        break;
 8005c8a:	e005      	b.n	8005c98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c8c:	4b37      	ldr	r3, [pc, #220]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1ef      	bne.n	8005c78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d160      	bne.n	8005d60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d111      	bne.n	8005cc8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ca4:	4b31      	ldr	r3, [pc, #196]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6892      	ldr	r2, [r2, #8]
 8005cb4:	0211      	lsls	r1, r2, #8
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68d2      	ldr	r2, [r2, #12]
 8005cba:	0912      	lsrs	r2, r2, #4
 8005cbc:	0452      	lsls	r2, r2, #17
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	492a      	ldr	r1, [pc, #168]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	610b      	str	r3, [r1, #16]
 8005cc6:	e027      	b.n	8005d18 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d112      	bne.n	8005cf4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cce:	4b27      	ldr	r3, [pc, #156]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005cd6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6892      	ldr	r2, [r2, #8]
 8005cde:	0211      	lsls	r1, r2, #8
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6912      	ldr	r2, [r2, #16]
 8005ce4:	0852      	lsrs	r2, r2, #1
 8005ce6:	3a01      	subs	r2, #1
 8005ce8:	0552      	lsls	r2, r2, #21
 8005cea:	430a      	orrs	r2, r1
 8005cec:	491f      	ldr	r1, [pc, #124]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	610b      	str	r3, [r1, #16]
 8005cf2:	e011      	b.n	8005d18 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cf4:	4b1d      	ldr	r3, [pc, #116]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005cfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6892      	ldr	r2, [r2, #8]
 8005d04:	0211      	lsls	r1, r2, #8
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6952      	ldr	r2, [r2, #20]
 8005d0a:	0852      	lsrs	r2, r2, #1
 8005d0c:	3a01      	subs	r2, #1
 8005d0e:	0652      	lsls	r2, r2, #25
 8005d10:	430a      	orrs	r2, r1
 8005d12:	4916      	ldr	r1, [pc, #88]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d18:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a13      	ldr	r2, [pc, #76]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d24:	f7fd f8e6 	bl	8002ef4 <HAL_GetTick>
 8005d28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d2a:	e009      	b.n	8005d40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d2c:	f7fd f8e2 	bl	8002ef4 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d902      	bls.n	8005d40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	73fb      	strb	r3, [r7, #15]
          break;
 8005d3e:	e005      	b.n	8005d4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d40:	4b0a      	ldr	r3, [pc, #40]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0ef      	beq.n	8005d2c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	4904      	ldr	r1, [pc, #16]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40021000 	.word	0x40021000

08005d70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d7e:	4b6a      	ldr	r3, [pc, #424]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d018      	beq.n	8005dbc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d8a:	4b67      	ldr	r3, [pc, #412]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 0203 	and.w	r2, r3, #3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d10d      	bne.n	8005db6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
       ||
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005da2:	4b61      	ldr	r3, [pc, #388]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	091b      	lsrs	r3, r3, #4
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
       ||
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d047      	beq.n	8005e46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	73fb      	strb	r3, [r7, #15]
 8005dba:	e044      	b.n	8005e46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d018      	beq.n	8005df6 <RCCEx_PLLSAI2_Config+0x86>
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d825      	bhi.n	8005e14 <RCCEx_PLLSAI2_Config+0xa4>
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d002      	beq.n	8005dd2 <RCCEx_PLLSAI2_Config+0x62>
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d009      	beq.n	8005de4 <RCCEx_PLLSAI2_Config+0x74>
 8005dd0:	e020      	b.n	8005e14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dd2:	4b55      	ldr	r3, [pc, #340]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d11d      	bne.n	8005e1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de2:	e01a      	b.n	8005e1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005de4:	4b50      	ldr	r3, [pc, #320]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d116      	bne.n	8005e1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005df4:	e013      	b.n	8005e1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005df6:	4b4c      	ldr	r3, [pc, #304]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10f      	bne.n	8005e22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e02:	4b49      	ldr	r3, [pc, #292]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d109      	bne.n	8005e22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e12:	e006      	b.n	8005e22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	73fb      	strb	r3, [r7, #15]
      break;
 8005e18:	e004      	b.n	8005e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e1a:	bf00      	nop
 8005e1c:	e002      	b.n	8005e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e1e:	bf00      	nop
 8005e20:	e000      	b.n	8005e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e22:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10d      	bne.n	8005e46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e2a:	4b3f      	ldr	r3, [pc, #252]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6819      	ldr	r1, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	4939      	ldr	r1, [pc, #228]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d167      	bne.n	8005f1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005e4c:	4b36      	ldr	r3, [pc, #216]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a35      	ldr	r2, [pc, #212]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e58:	f7fd f84c 	bl	8002ef4 <HAL_GetTick>
 8005e5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e5e:	e009      	b.n	8005e74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e60:	f7fd f848 	bl	8002ef4 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d902      	bls.n	8005e74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	73fb      	strb	r3, [r7, #15]
        break;
 8005e72:	e005      	b.n	8005e80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e74:	4b2c      	ldr	r3, [pc, #176]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1ef      	bne.n	8005e60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d14a      	bne.n	8005f1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d111      	bne.n	8005eb0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e8c:	4b26      	ldr	r3, [pc, #152]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6892      	ldr	r2, [r2, #8]
 8005e9c:	0211      	lsls	r1, r2, #8
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	68d2      	ldr	r2, [r2, #12]
 8005ea2:	0912      	lsrs	r2, r2, #4
 8005ea4:	0452      	lsls	r2, r2, #17
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	491f      	ldr	r1, [pc, #124]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	614b      	str	r3, [r1, #20]
 8005eae:	e011      	b.n	8005ed4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005eb0:	4b1d      	ldr	r3, [pc, #116]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005eb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6892      	ldr	r2, [r2, #8]
 8005ec0:	0211      	lsls	r1, r2, #8
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6912      	ldr	r2, [r2, #16]
 8005ec6:	0852      	lsrs	r2, r2, #1
 8005ec8:	3a01      	subs	r2, #1
 8005eca:	0652      	lsls	r2, r2, #25
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	4916      	ldr	r1, [pc, #88]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ed4:	4b14      	ldr	r3, [pc, #80]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a13      	ldr	r2, [pc, #76]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ede:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee0:	f7fd f808 	bl	8002ef4 <HAL_GetTick>
 8005ee4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ee6:	e009      	b.n	8005efc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ee8:	f7fd f804 	bl	8002ef4 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d902      	bls.n	8005efc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	73fb      	strb	r3, [r7, #15]
          break;
 8005efa:	e005      	b.n	8005f08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0ef      	beq.n	8005ee8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005f0e:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f10:	695a      	ldr	r2, [r3, #20]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	4904      	ldr	r1, [pc, #16]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	40021000 	.word	0x40021000

08005f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e095      	b.n	800606a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d108      	bne.n	8005f58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f4e:	d009      	beq.n	8005f64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	61da      	str	r2, [r3, #28]
 8005f56:	e005      	b.n	8005f64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fb fdf6 	bl	8001b70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fa4:	d902      	bls.n	8005fac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	e002      	b.n	8005fb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005fba:	d007      	beq.n	8005fcc <HAL_SPI_Init+0xa0>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fc4:	d002      	beq.n	8005fcc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600e:	ea42 0103 	orr.w	r1, r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	0c1b      	lsrs	r3, r3, #16
 8006028:	f003 0204 	and.w	r2, r3, #4
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006048:	ea42 0103 	orr.w	r1, r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e049      	b.n	8006118 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d106      	bne.n	800609e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f841 	bl	8006120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2202      	movs	r2, #2
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3304      	adds	r3, #4
 80060ae:	4619      	mov	r1, r3
 80060b0:	4610      	mov	r0, r2
 80060b2:	f000 fc65 	bl	8006980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	d001      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e04f      	b.n	80061ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0201 	orr.w	r2, r2, #1
 8006162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a23      	ldr	r2, [pc, #140]	; (80061f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d01d      	beq.n	80061aa <HAL_TIM_Base_Start_IT+0x76>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006176:	d018      	beq.n	80061aa <HAL_TIM_Base_Start_IT+0x76>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a1f      	ldr	r2, [pc, #124]	; (80061fc <HAL_TIM_Base_Start_IT+0xc8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d013      	beq.n	80061aa <HAL_TIM_Base_Start_IT+0x76>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1e      	ldr	r2, [pc, #120]	; (8006200 <HAL_TIM_Base_Start_IT+0xcc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00e      	beq.n	80061aa <HAL_TIM_Base_Start_IT+0x76>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a1c      	ldr	r2, [pc, #112]	; (8006204 <HAL_TIM_Base_Start_IT+0xd0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d009      	beq.n	80061aa <HAL_TIM_Base_Start_IT+0x76>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1b      	ldr	r2, [pc, #108]	; (8006208 <HAL_TIM_Base_Start_IT+0xd4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_TIM_Base_Start_IT+0x76>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a19      	ldr	r2, [pc, #100]	; (800620c <HAL_TIM_Base_Start_IT+0xd8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d115      	bne.n	80061d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	4b17      	ldr	r3, [pc, #92]	; (8006210 <HAL_TIM_Base_Start_IT+0xdc>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b06      	cmp	r3, #6
 80061ba:	d015      	beq.n	80061e8 <HAL_TIM_Base_Start_IT+0xb4>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c2:	d011      	beq.n	80061e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0201 	orr.w	r2, r2, #1
 80061d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d4:	e008      	b.n	80061e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0201 	orr.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	e000      	b.n	80061ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	40012c00 	.word	0x40012c00
 80061fc:	40000400 	.word	0x40000400
 8006200:	40000800 	.word	0x40000800
 8006204:	40000c00 	.word	0x40000c00
 8006208:	40013400 	.word	0x40013400
 800620c:	40014000 	.word	0x40014000
 8006210:	00010007 	.word	0x00010007

08006214 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e049      	b.n	80062ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fb fcdc 	bl	8001bf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3304      	adds	r3, #4
 8006250:	4619      	mov	r1, r3
 8006252:	4610      	mov	r0, r2
 8006254:	f000 fb94 	bl	8006980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d109      	bne.n	80062e8 <HAL_TIM_PWM_Start+0x24>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	bf14      	ite	ne
 80062e0:	2301      	movne	r3, #1
 80062e2:	2300      	moveq	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	e03c      	b.n	8006362 <HAL_TIM_PWM_Start+0x9e>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d109      	bne.n	8006302 <HAL_TIM_PWM_Start+0x3e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	bf14      	ite	ne
 80062fa:	2301      	movne	r3, #1
 80062fc:	2300      	moveq	r3, #0
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	e02f      	b.n	8006362 <HAL_TIM_PWM_Start+0x9e>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b08      	cmp	r3, #8
 8006306:	d109      	bne.n	800631c <HAL_TIM_PWM_Start+0x58>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b01      	cmp	r3, #1
 8006312:	bf14      	ite	ne
 8006314:	2301      	movne	r3, #1
 8006316:	2300      	moveq	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	e022      	b.n	8006362 <HAL_TIM_PWM_Start+0x9e>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b0c      	cmp	r3, #12
 8006320:	d109      	bne.n	8006336 <HAL_TIM_PWM_Start+0x72>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b01      	cmp	r3, #1
 800632c:	bf14      	ite	ne
 800632e:	2301      	movne	r3, #1
 8006330:	2300      	moveq	r3, #0
 8006332:	b2db      	uxtb	r3, r3
 8006334:	e015      	b.n	8006362 <HAL_TIM_PWM_Start+0x9e>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b10      	cmp	r3, #16
 800633a:	d109      	bne.n	8006350 <HAL_TIM_PWM_Start+0x8c>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	bf14      	ite	ne
 8006348:	2301      	movne	r3, #1
 800634a:	2300      	moveq	r3, #0
 800634c:	b2db      	uxtb	r3, r3
 800634e:	e008      	b.n	8006362 <HAL_TIM_PWM_Start+0x9e>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b01      	cmp	r3, #1
 800635a:	bf14      	ite	ne
 800635c:	2301      	movne	r3, #1
 800635e:	2300      	moveq	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e09c      	b.n	80064a4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <HAL_TIM_PWM_Start+0xb6>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006378:	e023      	b.n	80063c2 <HAL_TIM_PWM_Start+0xfe>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b04      	cmp	r3, #4
 800637e:	d104      	bne.n	800638a <HAL_TIM_PWM_Start+0xc6>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006388:	e01b      	b.n	80063c2 <HAL_TIM_PWM_Start+0xfe>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b08      	cmp	r3, #8
 800638e:	d104      	bne.n	800639a <HAL_TIM_PWM_Start+0xd6>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006398:	e013      	b.n	80063c2 <HAL_TIM_PWM_Start+0xfe>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b0c      	cmp	r3, #12
 800639e:	d104      	bne.n	80063aa <HAL_TIM_PWM_Start+0xe6>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063a8:	e00b      	b.n	80063c2 <HAL_TIM_PWM_Start+0xfe>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b10      	cmp	r3, #16
 80063ae:	d104      	bne.n	80063ba <HAL_TIM_PWM_Start+0xf6>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063b8:	e003      	b.n	80063c2 <HAL_TIM_PWM_Start+0xfe>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2202      	movs	r2, #2
 80063be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2201      	movs	r2, #1
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fe48 	bl	8007060 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a35      	ldr	r2, [pc, #212]	; (80064ac <HAL_TIM_PWM_Start+0x1e8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d013      	beq.n	8006402 <HAL_TIM_PWM_Start+0x13e>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a34      	ldr	r2, [pc, #208]	; (80064b0 <HAL_TIM_PWM_Start+0x1ec>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00e      	beq.n	8006402 <HAL_TIM_PWM_Start+0x13e>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a32      	ldr	r2, [pc, #200]	; (80064b4 <HAL_TIM_PWM_Start+0x1f0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d009      	beq.n	8006402 <HAL_TIM_PWM_Start+0x13e>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a31      	ldr	r2, [pc, #196]	; (80064b8 <HAL_TIM_PWM_Start+0x1f4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d004      	beq.n	8006402 <HAL_TIM_PWM_Start+0x13e>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a2f      	ldr	r2, [pc, #188]	; (80064bc <HAL_TIM_PWM_Start+0x1f8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d101      	bne.n	8006406 <HAL_TIM_PWM_Start+0x142>
 8006402:	2301      	movs	r3, #1
 8006404:	e000      	b.n	8006408 <HAL_TIM_PWM_Start+0x144>
 8006406:	2300      	movs	r3, #0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d007      	beq.n	800641c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800641a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a22      	ldr	r2, [pc, #136]	; (80064ac <HAL_TIM_PWM_Start+0x1e8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d01d      	beq.n	8006462 <HAL_TIM_PWM_Start+0x19e>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642e:	d018      	beq.n	8006462 <HAL_TIM_PWM_Start+0x19e>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a22      	ldr	r2, [pc, #136]	; (80064c0 <HAL_TIM_PWM_Start+0x1fc>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d013      	beq.n	8006462 <HAL_TIM_PWM_Start+0x19e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a21      	ldr	r2, [pc, #132]	; (80064c4 <HAL_TIM_PWM_Start+0x200>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00e      	beq.n	8006462 <HAL_TIM_PWM_Start+0x19e>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a1f      	ldr	r2, [pc, #124]	; (80064c8 <HAL_TIM_PWM_Start+0x204>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d009      	beq.n	8006462 <HAL_TIM_PWM_Start+0x19e>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a17      	ldr	r2, [pc, #92]	; (80064b0 <HAL_TIM_PWM_Start+0x1ec>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d004      	beq.n	8006462 <HAL_TIM_PWM_Start+0x19e>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a15      	ldr	r2, [pc, #84]	; (80064b4 <HAL_TIM_PWM_Start+0x1f0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d115      	bne.n	800648e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	4b18      	ldr	r3, [pc, #96]	; (80064cc <HAL_TIM_PWM_Start+0x208>)
 800646a:	4013      	ands	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b06      	cmp	r3, #6
 8006472:	d015      	beq.n	80064a0 <HAL_TIM_PWM_Start+0x1dc>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800647a:	d011      	beq.n	80064a0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0201 	orr.w	r2, r2, #1
 800648a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800648c:	e008      	b.n	80064a0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f042 0201 	orr.w	r2, r2, #1
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	e000      	b.n	80064a2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40012c00 	.word	0x40012c00
 80064b0:	40013400 	.word	0x40013400
 80064b4:	40014000 	.word	0x40014000
 80064b8:	40014400 	.word	0x40014400
 80064bc:	40014800 	.word	0x40014800
 80064c0:	40000400 	.word	0x40000400
 80064c4:	40000800 	.word	0x40000800
 80064c8:	40000c00 	.word	0x40000c00
 80064cc:	00010007 	.word	0x00010007

080064d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d122      	bne.n	800652c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d11b      	bne.n	800652c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0202 	mvn.w	r2, #2
 80064fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fa16 	bl	8006944 <HAL_TIM_IC_CaptureCallback>
 8006518:	e005      	b.n	8006526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fa08 	bl	8006930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fa19 	bl	8006958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b04      	cmp	r3, #4
 8006538:	d122      	bne.n	8006580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b04      	cmp	r3, #4
 8006546:	d11b      	bne.n	8006580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0204 	mvn.w	r2, #4
 8006550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2202      	movs	r2, #2
 8006556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f9ec 	bl	8006944 <HAL_TIM_IC_CaptureCallback>
 800656c:	e005      	b.n	800657a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f9de 	bl	8006930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f9ef 	bl	8006958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b08      	cmp	r3, #8
 800658c:	d122      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b08      	cmp	r3, #8
 800659a:	d11b      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f06f 0208 	mvn.w	r2, #8
 80065a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2204      	movs	r2, #4
 80065aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f9c2 	bl	8006944 <HAL_TIM_IC_CaptureCallback>
 80065c0:	e005      	b.n	80065ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f9b4 	bl	8006930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f9c5 	bl	8006958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b10      	cmp	r3, #16
 80065e0:	d122      	bne.n	8006628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0310 	and.w	r3, r3, #16
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d11b      	bne.n	8006628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0210 	mvn.w	r2, #16
 80065f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2208      	movs	r2, #8
 80065fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f998 	bl	8006944 <HAL_TIM_IC_CaptureCallback>
 8006614:	e005      	b.n	8006622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f98a 	bl	8006930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f99b 	bl	8006958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b01      	cmp	r3, #1
 8006634:	d10e      	bne.n	8006654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b01      	cmp	r3, #1
 8006642:	d107      	bne.n	8006654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f06f 0201 	mvn.w	r2, #1
 800664c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fb f95a 	bl	8001908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665e:	2b80      	cmp	r3, #128	; 0x80
 8006660:	d10e      	bne.n	8006680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666c:	2b80      	cmp	r3, #128	; 0x80
 800666e:	d107      	bne.n	8006680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fda8 	bl	80071d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668e:	d10e      	bne.n	80066ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b80      	cmp	r3, #128	; 0x80
 800669c:	d107      	bne.n	80066ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fd9b 	bl	80071e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b8:	2b40      	cmp	r3, #64	; 0x40
 80066ba:	d10e      	bne.n	80066da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d107      	bne.n	80066da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f949 	bl	800696c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d10e      	bne.n	8006706 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d107      	bne.n	8006706 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f06f 0220 	mvn.w	r2, #32
 80066fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fd5b 	bl	80071bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006726:	2302      	movs	r3, #2
 8006728:	e0fd      	b.n	8006926 <HAL_TIM_PWM_ConfigChannel+0x216>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b14      	cmp	r3, #20
 8006736:	f200 80f0 	bhi.w	800691a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800673a:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	08006795 	.word	0x08006795
 8006744:	0800691b 	.word	0x0800691b
 8006748:	0800691b 	.word	0x0800691b
 800674c:	0800691b 	.word	0x0800691b
 8006750:	080067d5 	.word	0x080067d5
 8006754:	0800691b 	.word	0x0800691b
 8006758:	0800691b 	.word	0x0800691b
 800675c:	0800691b 	.word	0x0800691b
 8006760:	08006817 	.word	0x08006817
 8006764:	0800691b 	.word	0x0800691b
 8006768:	0800691b 	.word	0x0800691b
 800676c:	0800691b 	.word	0x0800691b
 8006770:	08006857 	.word	0x08006857
 8006774:	0800691b 	.word	0x0800691b
 8006778:	0800691b 	.word	0x0800691b
 800677c:	0800691b 	.word	0x0800691b
 8006780:	08006899 	.word	0x08006899
 8006784:	0800691b 	.word	0x0800691b
 8006788:	0800691b 	.word	0x0800691b
 800678c:	0800691b 	.word	0x0800691b
 8006790:	080068d9 	.word	0x080068d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68b9      	ldr	r1, [r7, #8]
 800679a:	4618      	mov	r0, r3
 800679c:	f000 f98a 	bl	8006ab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0208 	orr.w	r2, r2, #8
 80067ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	699a      	ldr	r2, [r3, #24]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0204 	bic.w	r2, r2, #4
 80067be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6999      	ldr	r1, [r3, #24]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	619a      	str	r2, [r3, #24]
      break;
 80067d2:	e0a3      	b.n	800691c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68b9      	ldr	r1, [r7, #8]
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 f9fa 	bl	8006bd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	699a      	ldr	r2, [r3, #24]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6999      	ldr	r1, [r3, #24]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	021a      	lsls	r2, r3, #8
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	619a      	str	r2, [r3, #24]
      break;
 8006814:	e082      	b.n	800691c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	4618      	mov	r0, r3
 800681e:	f000 fa63 	bl	8006ce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69da      	ldr	r2, [r3, #28]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0208 	orr.w	r2, r2, #8
 8006830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69da      	ldr	r2, [r3, #28]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 0204 	bic.w	r2, r2, #4
 8006840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69d9      	ldr	r1, [r3, #28]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	691a      	ldr	r2, [r3, #16]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	61da      	str	r2, [r3, #28]
      break;
 8006854:	e062      	b.n	800691c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	4618      	mov	r0, r3
 800685e:	f000 facb 	bl	8006df8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69da      	ldr	r2, [r3, #28]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69d9      	ldr	r1, [r3, #28]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	021a      	lsls	r2, r3, #8
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	61da      	str	r2, [r3, #28]
      break;
 8006896:	e041      	b.n	800691c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68b9      	ldr	r1, [r7, #8]
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 fb14 	bl	8006ecc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0208 	orr.w	r2, r2, #8
 80068b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0204 	bic.w	r2, r2, #4
 80068c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	691a      	ldr	r2, [r3, #16]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068d6:	e021      	b.n	800691c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fb58 	bl	8006f94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006902:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	021a      	lsls	r2, r3, #8
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006918:	e000      	b.n	800691c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800691a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop

08006930 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a40      	ldr	r2, [pc, #256]	; (8006a94 <TIM_Base_SetConfig+0x114>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d013      	beq.n	80069c0 <TIM_Base_SetConfig+0x40>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699e:	d00f      	beq.n	80069c0 <TIM_Base_SetConfig+0x40>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a3d      	ldr	r2, [pc, #244]	; (8006a98 <TIM_Base_SetConfig+0x118>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00b      	beq.n	80069c0 <TIM_Base_SetConfig+0x40>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a3c      	ldr	r2, [pc, #240]	; (8006a9c <TIM_Base_SetConfig+0x11c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d007      	beq.n	80069c0 <TIM_Base_SetConfig+0x40>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a3b      	ldr	r2, [pc, #236]	; (8006aa0 <TIM_Base_SetConfig+0x120>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_Base_SetConfig+0x40>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a3a      	ldr	r2, [pc, #232]	; (8006aa4 <TIM_Base_SetConfig+0x124>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d108      	bne.n	80069d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a2f      	ldr	r2, [pc, #188]	; (8006a94 <TIM_Base_SetConfig+0x114>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d01f      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e0:	d01b      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a2c      	ldr	r2, [pc, #176]	; (8006a98 <TIM_Base_SetConfig+0x118>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d017      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a2b      	ldr	r2, [pc, #172]	; (8006a9c <TIM_Base_SetConfig+0x11c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d013      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a2a      	ldr	r2, [pc, #168]	; (8006aa0 <TIM_Base_SetConfig+0x120>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00f      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a29      	ldr	r2, [pc, #164]	; (8006aa4 <TIM_Base_SetConfig+0x124>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00b      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a28      	ldr	r2, [pc, #160]	; (8006aa8 <TIM_Base_SetConfig+0x128>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d007      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a27      	ldr	r2, [pc, #156]	; (8006aac <TIM_Base_SetConfig+0x12c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a26      	ldr	r2, [pc, #152]	; (8006ab0 <TIM_Base_SetConfig+0x130>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d108      	bne.n	8006a2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a10      	ldr	r2, [pc, #64]	; (8006a94 <TIM_Base_SetConfig+0x114>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00f      	beq.n	8006a78 <TIM_Base_SetConfig+0xf8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a12      	ldr	r2, [pc, #72]	; (8006aa4 <TIM_Base_SetConfig+0x124>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00b      	beq.n	8006a78 <TIM_Base_SetConfig+0xf8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a11      	ldr	r2, [pc, #68]	; (8006aa8 <TIM_Base_SetConfig+0x128>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d007      	beq.n	8006a78 <TIM_Base_SetConfig+0xf8>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a10      	ldr	r2, [pc, #64]	; (8006aac <TIM_Base_SetConfig+0x12c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_Base_SetConfig+0xf8>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a0f      	ldr	r2, [pc, #60]	; (8006ab0 <TIM_Base_SetConfig+0x130>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d103      	bne.n	8006a80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	615a      	str	r2, [r3, #20]
}
 8006a86:	bf00      	nop
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40012c00 	.word	0x40012c00
 8006a98:	40000400 	.word	0x40000400
 8006a9c:	40000800 	.word	0x40000800
 8006aa0:	40000c00 	.word	0x40000c00
 8006aa4:	40013400 	.word	0x40013400
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40014400 	.word	0x40014400
 8006ab0:	40014800 	.word	0x40014800

08006ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	f023 0201 	bic.w	r2, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f023 0302 	bic.w	r3, r3, #2
 8006b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a2c      	ldr	r2, [pc, #176]	; (8006bc0 <TIM_OC1_SetConfig+0x10c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00f      	beq.n	8006b34 <TIM_OC1_SetConfig+0x80>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a2b      	ldr	r2, [pc, #172]	; (8006bc4 <TIM_OC1_SetConfig+0x110>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00b      	beq.n	8006b34 <TIM_OC1_SetConfig+0x80>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a2a      	ldr	r2, [pc, #168]	; (8006bc8 <TIM_OC1_SetConfig+0x114>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d007      	beq.n	8006b34 <TIM_OC1_SetConfig+0x80>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a29      	ldr	r2, [pc, #164]	; (8006bcc <TIM_OC1_SetConfig+0x118>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d003      	beq.n	8006b34 <TIM_OC1_SetConfig+0x80>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a28      	ldr	r2, [pc, #160]	; (8006bd0 <TIM_OC1_SetConfig+0x11c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d10c      	bne.n	8006b4e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 0308 	bic.w	r3, r3, #8
 8006b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f023 0304 	bic.w	r3, r3, #4
 8006b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a1b      	ldr	r2, [pc, #108]	; (8006bc0 <TIM_OC1_SetConfig+0x10c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00f      	beq.n	8006b76 <TIM_OC1_SetConfig+0xc2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a1a      	ldr	r2, [pc, #104]	; (8006bc4 <TIM_OC1_SetConfig+0x110>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00b      	beq.n	8006b76 <TIM_OC1_SetConfig+0xc2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a19      	ldr	r2, [pc, #100]	; (8006bc8 <TIM_OC1_SetConfig+0x114>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d007      	beq.n	8006b76 <TIM_OC1_SetConfig+0xc2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a18      	ldr	r2, [pc, #96]	; (8006bcc <TIM_OC1_SetConfig+0x118>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d003      	beq.n	8006b76 <TIM_OC1_SetConfig+0xc2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a17      	ldr	r2, [pc, #92]	; (8006bd0 <TIM_OC1_SetConfig+0x11c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d111      	bne.n	8006b9a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	621a      	str	r2, [r3, #32]
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40012c00 	.word	0x40012c00
 8006bc4:	40013400 	.word	0x40013400
 8006bc8:	40014000 	.word	0x40014000
 8006bcc:	40014400 	.word	0x40014400
 8006bd0:	40014800 	.word	0x40014800

08006bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f023 0210 	bic.w	r2, r3, #16
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	021b      	lsls	r3, r3, #8
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f023 0320 	bic.w	r3, r3, #32
 8006c22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a28      	ldr	r2, [pc, #160]	; (8006cd4 <TIM_OC2_SetConfig+0x100>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d003      	beq.n	8006c40 <TIM_OC2_SetConfig+0x6c>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a27      	ldr	r2, [pc, #156]	; (8006cd8 <TIM_OC2_SetConfig+0x104>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d10d      	bne.n	8006c5c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a1d      	ldr	r2, [pc, #116]	; (8006cd4 <TIM_OC2_SetConfig+0x100>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00f      	beq.n	8006c84 <TIM_OC2_SetConfig+0xb0>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a1c      	ldr	r2, [pc, #112]	; (8006cd8 <TIM_OC2_SetConfig+0x104>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00b      	beq.n	8006c84 <TIM_OC2_SetConfig+0xb0>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a1b      	ldr	r2, [pc, #108]	; (8006cdc <TIM_OC2_SetConfig+0x108>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d007      	beq.n	8006c84 <TIM_OC2_SetConfig+0xb0>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a1a      	ldr	r2, [pc, #104]	; (8006ce0 <TIM_OC2_SetConfig+0x10c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_OC2_SetConfig+0xb0>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a19      	ldr	r2, [pc, #100]	; (8006ce4 <TIM_OC2_SetConfig+0x110>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d113      	bne.n	8006cac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	621a      	str	r2, [r3, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40012c00 	.word	0x40012c00
 8006cd8:	40013400 	.word	0x40013400
 8006cdc:	40014000 	.word	0x40014000
 8006ce0:	40014400 	.word	0x40014400
 8006ce4:	40014800 	.word	0x40014800

08006ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0303 	bic.w	r3, r3, #3
 8006d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a27      	ldr	r2, [pc, #156]	; (8006de4 <TIM_OC3_SetConfig+0xfc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d003      	beq.n	8006d52 <TIM_OC3_SetConfig+0x6a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a26      	ldr	r2, [pc, #152]	; (8006de8 <TIM_OC3_SetConfig+0x100>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d10d      	bne.n	8006d6e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	021b      	lsls	r3, r3, #8
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a1c      	ldr	r2, [pc, #112]	; (8006de4 <TIM_OC3_SetConfig+0xfc>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00f      	beq.n	8006d96 <TIM_OC3_SetConfig+0xae>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a1b      	ldr	r2, [pc, #108]	; (8006de8 <TIM_OC3_SetConfig+0x100>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00b      	beq.n	8006d96 <TIM_OC3_SetConfig+0xae>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a1a      	ldr	r2, [pc, #104]	; (8006dec <TIM_OC3_SetConfig+0x104>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d007      	beq.n	8006d96 <TIM_OC3_SetConfig+0xae>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a19      	ldr	r2, [pc, #100]	; (8006df0 <TIM_OC3_SetConfig+0x108>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d003      	beq.n	8006d96 <TIM_OC3_SetConfig+0xae>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a18      	ldr	r2, [pc, #96]	; (8006df4 <TIM_OC3_SetConfig+0x10c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d113      	bne.n	8006dbe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	621a      	str	r2, [r3, #32]
}
 8006dd8:	bf00      	nop
 8006dda:	371c      	adds	r7, #28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	40012c00 	.word	0x40012c00
 8006de8:	40013400 	.word	0x40013400
 8006dec:	40014000 	.word	0x40014000
 8006df0:	40014400 	.word	0x40014400
 8006df4:	40014800 	.word	0x40014800

08006df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	021b      	lsls	r3, r3, #8
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	031b      	lsls	r3, r3, #12
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a18      	ldr	r2, [pc, #96]	; (8006eb8 <TIM_OC4_SetConfig+0xc0>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d00f      	beq.n	8006e7c <TIM_OC4_SetConfig+0x84>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a17      	ldr	r2, [pc, #92]	; (8006ebc <TIM_OC4_SetConfig+0xc4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00b      	beq.n	8006e7c <TIM_OC4_SetConfig+0x84>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a16      	ldr	r2, [pc, #88]	; (8006ec0 <TIM_OC4_SetConfig+0xc8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d007      	beq.n	8006e7c <TIM_OC4_SetConfig+0x84>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a15      	ldr	r2, [pc, #84]	; (8006ec4 <TIM_OC4_SetConfig+0xcc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d003      	beq.n	8006e7c <TIM_OC4_SetConfig+0x84>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a14      	ldr	r2, [pc, #80]	; (8006ec8 <TIM_OC4_SetConfig+0xd0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d109      	bne.n	8006e90 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	019b      	lsls	r3, r3, #6
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	621a      	str	r2, [r3, #32]
}
 8006eaa:	bf00      	nop
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	40012c00 	.word	0x40012c00
 8006ebc:	40013400 	.word	0x40013400
 8006ec0:	40014000 	.word	0x40014000
 8006ec4:	40014400 	.word	0x40014400
 8006ec8:	40014800 	.word	0x40014800

08006ecc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	041b      	lsls	r3, r3, #16
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a17      	ldr	r2, [pc, #92]	; (8006f80 <TIM_OC5_SetConfig+0xb4>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00f      	beq.n	8006f46 <TIM_OC5_SetConfig+0x7a>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a16      	ldr	r2, [pc, #88]	; (8006f84 <TIM_OC5_SetConfig+0xb8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d00b      	beq.n	8006f46 <TIM_OC5_SetConfig+0x7a>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a15      	ldr	r2, [pc, #84]	; (8006f88 <TIM_OC5_SetConfig+0xbc>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d007      	beq.n	8006f46 <TIM_OC5_SetConfig+0x7a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a14      	ldr	r2, [pc, #80]	; (8006f8c <TIM_OC5_SetConfig+0xc0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d003      	beq.n	8006f46 <TIM_OC5_SetConfig+0x7a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a13      	ldr	r2, [pc, #76]	; (8006f90 <TIM_OC5_SetConfig+0xc4>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d109      	bne.n	8006f5a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	021b      	lsls	r3, r3, #8
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	621a      	str	r2, [r3, #32]
}
 8006f74:	bf00      	nop
 8006f76:	371c      	adds	r7, #28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	40012c00 	.word	0x40012c00
 8006f84:	40013400 	.word	0x40013400
 8006f88:	40014000 	.word	0x40014000
 8006f8c:	40014400 	.word	0x40014400
 8006f90:	40014800 	.word	0x40014800

08006f94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	021b      	lsls	r3, r3, #8
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	051b      	lsls	r3, r3, #20
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a18      	ldr	r2, [pc, #96]	; (800704c <TIM_OC6_SetConfig+0xb8>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d00f      	beq.n	8007010 <TIM_OC6_SetConfig+0x7c>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a17      	ldr	r2, [pc, #92]	; (8007050 <TIM_OC6_SetConfig+0xbc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00b      	beq.n	8007010 <TIM_OC6_SetConfig+0x7c>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a16      	ldr	r2, [pc, #88]	; (8007054 <TIM_OC6_SetConfig+0xc0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d007      	beq.n	8007010 <TIM_OC6_SetConfig+0x7c>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a15      	ldr	r2, [pc, #84]	; (8007058 <TIM_OC6_SetConfig+0xc4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <TIM_OC6_SetConfig+0x7c>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a14      	ldr	r2, [pc, #80]	; (800705c <TIM_OC6_SetConfig+0xc8>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d109      	bne.n	8007024 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007016:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	029b      	lsls	r3, r3, #10
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	621a      	str	r2, [r3, #32]
}
 800703e:	bf00      	nop
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	40012c00 	.word	0x40012c00
 8007050:	40013400 	.word	0x40013400
 8007054:	40014000 	.word	0x40014000
 8007058:	40014400 	.word	0x40014400
 800705c:	40014800 	.word	0x40014800

08007060 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f003 031f 	and.w	r3, r3, #31
 8007072:	2201      	movs	r2, #1
 8007074:	fa02 f303 	lsl.w	r3, r2, r3
 8007078:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6a1a      	ldr	r2, [r3, #32]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	43db      	mvns	r3, r3
 8007082:	401a      	ands	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a1a      	ldr	r2, [r3, #32]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f003 031f 	and.w	r3, r3, #31
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	fa01 f303 	lsl.w	r3, r1, r3
 8007098:	431a      	orrs	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	621a      	str	r2, [r3, #32]
}
 800709e:	bf00      	nop
 80070a0:	371c      	adds	r7, #28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d101      	bne.n	80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070c0:	2302      	movs	r3, #2
 80070c2:	e068      	b.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a2e      	ldr	r2, [pc, #184]	; (80071a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d004      	beq.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a2d      	ldr	r2, [pc, #180]	; (80071a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d108      	bne.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007110:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a1e      	ldr	r2, [pc, #120]	; (80071a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d01d      	beq.n	800716a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007136:	d018      	beq.n	800716a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a1b      	ldr	r2, [pc, #108]	; (80071ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d013      	beq.n	800716a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a1a      	ldr	r2, [pc, #104]	; (80071b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d00e      	beq.n	800716a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a18      	ldr	r2, [pc, #96]	; (80071b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d009      	beq.n	800716a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a13      	ldr	r2, [pc, #76]	; (80071a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d004      	beq.n	800716a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a14      	ldr	r2, [pc, #80]	; (80071b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d10c      	bne.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007170:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	4313      	orrs	r3, r2
 800717a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	40012c00 	.word	0x40012c00
 80071a8:	40013400 	.word	0x40013400
 80071ac:	40000400 	.word	0x40000400
 80071b0:	40000800 	.word	0x40000800
 80071b4:	40000c00 	.word	0x40000c00
 80071b8:	40014000 	.word	0x40014000

080071bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e040      	b.n	800728c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800720e:	2b00      	cmp	r3, #0
 8007210:	d106      	bne.n	8007220 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7fa fd3e 	bl	8001c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2224      	movs	r2, #36	; 0x24
 8007224:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 0201 	bic.w	r2, r2, #1
 8007234:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f82c 	bl	8007294 <UART_SetConfig>
 800723c:	4603      	mov	r3, r0
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e022      	b.n	800728c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 faaa 	bl	80077a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007262:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007272:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0201 	orr.w	r2, r2, #1
 8007282:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fb31 	bl	80078ec <UART_CheckIdleState>
 800728a:	4603      	mov	r3, r0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007294:	b5b0      	push	{r4, r5, r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	431a      	orrs	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	4bad      	ldr	r3, [pc, #692]	; (8007574 <UART_SetConfig+0x2e0>)
 80072c0:	4013      	ands	r3, r2
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6812      	ldr	r2, [r2, #0]
 80072c6:	69f9      	ldr	r1, [r7, #28]
 80072c8:	430b      	orrs	r3, r1
 80072ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68da      	ldr	r2, [r3, #12]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4aa2      	ldr	r2, [pc, #648]	; (8007578 <UART_SetConfig+0x2e4>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d004      	beq.n	80072fc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	69fa      	ldr	r2, [r7, #28]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	430a      	orrs	r2, r1
 800730e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a99      	ldr	r2, [pc, #612]	; (800757c <UART_SetConfig+0x2e8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d121      	bne.n	800735e <UART_SetConfig+0xca>
 800731a:	4b99      	ldr	r3, [pc, #612]	; (8007580 <UART_SetConfig+0x2ec>)
 800731c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007320:	f003 0303 	and.w	r3, r3, #3
 8007324:	2b03      	cmp	r3, #3
 8007326:	d817      	bhi.n	8007358 <UART_SetConfig+0xc4>
 8007328:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <UART_SetConfig+0x9c>)
 800732a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732e:	bf00      	nop
 8007330:	08007341 	.word	0x08007341
 8007334:	0800734d 	.word	0x0800734d
 8007338:	08007347 	.word	0x08007347
 800733c:	08007353 	.word	0x08007353
 8007340:	2301      	movs	r3, #1
 8007342:	76fb      	strb	r3, [r7, #27]
 8007344:	e0e7      	b.n	8007516 <UART_SetConfig+0x282>
 8007346:	2302      	movs	r3, #2
 8007348:	76fb      	strb	r3, [r7, #27]
 800734a:	e0e4      	b.n	8007516 <UART_SetConfig+0x282>
 800734c:	2304      	movs	r3, #4
 800734e:	76fb      	strb	r3, [r7, #27]
 8007350:	e0e1      	b.n	8007516 <UART_SetConfig+0x282>
 8007352:	2308      	movs	r3, #8
 8007354:	76fb      	strb	r3, [r7, #27]
 8007356:	e0de      	b.n	8007516 <UART_SetConfig+0x282>
 8007358:	2310      	movs	r3, #16
 800735a:	76fb      	strb	r3, [r7, #27]
 800735c:	e0db      	b.n	8007516 <UART_SetConfig+0x282>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a88      	ldr	r2, [pc, #544]	; (8007584 <UART_SetConfig+0x2f0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d132      	bne.n	80073ce <UART_SetConfig+0x13a>
 8007368:	4b85      	ldr	r3, [pc, #532]	; (8007580 <UART_SetConfig+0x2ec>)
 800736a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736e:	f003 030c 	and.w	r3, r3, #12
 8007372:	2b0c      	cmp	r3, #12
 8007374:	d828      	bhi.n	80073c8 <UART_SetConfig+0x134>
 8007376:	a201      	add	r2, pc, #4	; (adr r2, 800737c <UART_SetConfig+0xe8>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	080073b1 	.word	0x080073b1
 8007380:	080073c9 	.word	0x080073c9
 8007384:	080073c9 	.word	0x080073c9
 8007388:	080073c9 	.word	0x080073c9
 800738c:	080073bd 	.word	0x080073bd
 8007390:	080073c9 	.word	0x080073c9
 8007394:	080073c9 	.word	0x080073c9
 8007398:	080073c9 	.word	0x080073c9
 800739c:	080073b7 	.word	0x080073b7
 80073a0:	080073c9 	.word	0x080073c9
 80073a4:	080073c9 	.word	0x080073c9
 80073a8:	080073c9 	.word	0x080073c9
 80073ac:	080073c3 	.word	0x080073c3
 80073b0:	2300      	movs	r3, #0
 80073b2:	76fb      	strb	r3, [r7, #27]
 80073b4:	e0af      	b.n	8007516 <UART_SetConfig+0x282>
 80073b6:	2302      	movs	r3, #2
 80073b8:	76fb      	strb	r3, [r7, #27]
 80073ba:	e0ac      	b.n	8007516 <UART_SetConfig+0x282>
 80073bc:	2304      	movs	r3, #4
 80073be:	76fb      	strb	r3, [r7, #27]
 80073c0:	e0a9      	b.n	8007516 <UART_SetConfig+0x282>
 80073c2:	2308      	movs	r3, #8
 80073c4:	76fb      	strb	r3, [r7, #27]
 80073c6:	e0a6      	b.n	8007516 <UART_SetConfig+0x282>
 80073c8:	2310      	movs	r3, #16
 80073ca:	76fb      	strb	r3, [r7, #27]
 80073cc:	e0a3      	b.n	8007516 <UART_SetConfig+0x282>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a6d      	ldr	r2, [pc, #436]	; (8007588 <UART_SetConfig+0x2f4>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d120      	bne.n	800741a <UART_SetConfig+0x186>
 80073d8:	4b69      	ldr	r3, [pc, #420]	; (8007580 <UART_SetConfig+0x2ec>)
 80073da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073e2:	2b30      	cmp	r3, #48	; 0x30
 80073e4:	d013      	beq.n	800740e <UART_SetConfig+0x17a>
 80073e6:	2b30      	cmp	r3, #48	; 0x30
 80073e8:	d814      	bhi.n	8007414 <UART_SetConfig+0x180>
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	d009      	beq.n	8007402 <UART_SetConfig+0x16e>
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	d810      	bhi.n	8007414 <UART_SetConfig+0x180>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <UART_SetConfig+0x168>
 80073f6:	2b10      	cmp	r3, #16
 80073f8:	d006      	beq.n	8007408 <UART_SetConfig+0x174>
 80073fa:	e00b      	b.n	8007414 <UART_SetConfig+0x180>
 80073fc:	2300      	movs	r3, #0
 80073fe:	76fb      	strb	r3, [r7, #27]
 8007400:	e089      	b.n	8007516 <UART_SetConfig+0x282>
 8007402:	2302      	movs	r3, #2
 8007404:	76fb      	strb	r3, [r7, #27]
 8007406:	e086      	b.n	8007516 <UART_SetConfig+0x282>
 8007408:	2304      	movs	r3, #4
 800740a:	76fb      	strb	r3, [r7, #27]
 800740c:	e083      	b.n	8007516 <UART_SetConfig+0x282>
 800740e:	2308      	movs	r3, #8
 8007410:	76fb      	strb	r3, [r7, #27]
 8007412:	e080      	b.n	8007516 <UART_SetConfig+0x282>
 8007414:	2310      	movs	r3, #16
 8007416:	76fb      	strb	r3, [r7, #27]
 8007418:	e07d      	b.n	8007516 <UART_SetConfig+0x282>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a5b      	ldr	r2, [pc, #364]	; (800758c <UART_SetConfig+0x2f8>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d120      	bne.n	8007466 <UART_SetConfig+0x1d2>
 8007424:	4b56      	ldr	r3, [pc, #344]	; (8007580 <UART_SetConfig+0x2ec>)
 8007426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800742e:	2bc0      	cmp	r3, #192	; 0xc0
 8007430:	d013      	beq.n	800745a <UART_SetConfig+0x1c6>
 8007432:	2bc0      	cmp	r3, #192	; 0xc0
 8007434:	d814      	bhi.n	8007460 <UART_SetConfig+0x1cc>
 8007436:	2b80      	cmp	r3, #128	; 0x80
 8007438:	d009      	beq.n	800744e <UART_SetConfig+0x1ba>
 800743a:	2b80      	cmp	r3, #128	; 0x80
 800743c:	d810      	bhi.n	8007460 <UART_SetConfig+0x1cc>
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <UART_SetConfig+0x1b4>
 8007442:	2b40      	cmp	r3, #64	; 0x40
 8007444:	d006      	beq.n	8007454 <UART_SetConfig+0x1c0>
 8007446:	e00b      	b.n	8007460 <UART_SetConfig+0x1cc>
 8007448:	2300      	movs	r3, #0
 800744a:	76fb      	strb	r3, [r7, #27]
 800744c:	e063      	b.n	8007516 <UART_SetConfig+0x282>
 800744e:	2302      	movs	r3, #2
 8007450:	76fb      	strb	r3, [r7, #27]
 8007452:	e060      	b.n	8007516 <UART_SetConfig+0x282>
 8007454:	2304      	movs	r3, #4
 8007456:	76fb      	strb	r3, [r7, #27]
 8007458:	e05d      	b.n	8007516 <UART_SetConfig+0x282>
 800745a:	2308      	movs	r3, #8
 800745c:	76fb      	strb	r3, [r7, #27]
 800745e:	e05a      	b.n	8007516 <UART_SetConfig+0x282>
 8007460:	2310      	movs	r3, #16
 8007462:	76fb      	strb	r3, [r7, #27]
 8007464:	e057      	b.n	8007516 <UART_SetConfig+0x282>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a49      	ldr	r2, [pc, #292]	; (8007590 <UART_SetConfig+0x2fc>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d125      	bne.n	80074bc <UART_SetConfig+0x228>
 8007470:	4b43      	ldr	r3, [pc, #268]	; (8007580 <UART_SetConfig+0x2ec>)
 8007472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800747a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800747e:	d017      	beq.n	80074b0 <UART_SetConfig+0x21c>
 8007480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007484:	d817      	bhi.n	80074b6 <UART_SetConfig+0x222>
 8007486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800748a:	d00b      	beq.n	80074a4 <UART_SetConfig+0x210>
 800748c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007490:	d811      	bhi.n	80074b6 <UART_SetConfig+0x222>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <UART_SetConfig+0x20a>
 8007496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800749a:	d006      	beq.n	80074aa <UART_SetConfig+0x216>
 800749c:	e00b      	b.n	80074b6 <UART_SetConfig+0x222>
 800749e:	2300      	movs	r3, #0
 80074a0:	76fb      	strb	r3, [r7, #27]
 80074a2:	e038      	b.n	8007516 <UART_SetConfig+0x282>
 80074a4:	2302      	movs	r3, #2
 80074a6:	76fb      	strb	r3, [r7, #27]
 80074a8:	e035      	b.n	8007516 <UART_SetConfig+0x282>
 80074aa:	2304      	movs	r3, #4
 80074ac:	76fb      	strb	r3, [r7, #27]
 80074ae:	e032      	b.n	8007516 <UART_SetConfig+0x282>
 80074b0:	2308      	movs	r3, #8
 80074b2:	76fb      	strb	r3, [r7, #27]
 80074b4:	e02f      	b.n	8007516 <UART_SetConfig+0x282>
 80074b6:	2310      	movs	r3, #16
 80074b8:	76fb      	strb	r3, [r7, #27]
 80074ba:	e02c      	b.n	8007516 <UART_SetConfig+0x282>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a2d      	ldr	r2, [pc, #180]	; (8007578 <UART_SetConfig+0x2e4>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d125      	bne.n	8007512 <UART_SetConfig+0x27e>
 80074c6:	4b2e      	ldr	r3, [pc, #184]	; (8007580 <UART_SetConfig+0x2ec>)
 80074c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074d4:	d017      	beq.n	8007506 <UART_SetConfig+0x272>
 80074d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074da:	d817      	bhi.n	800750c <UART_SetConfig+0x278>
 80074dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074e0:	d00b      	beq.n	80074fa <UART_SetConfig+0x266>
 80074e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074e6:	d811      	bhi.n	800750c <UART_SetConfig+0x278>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <UART_SetConfig+0x260>
 80074ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074f0:	d006      	beq.n	8007500 <UART_SetConfig+0x26c>
 80074f2:	e00b      	b.n	800750c <UART_SetConfig+0x278>
 80074f4:	2300      	movs	r3, #0
 80074f6:	76fb      	strb	r3, [r7, #27]
 80074f8:	e00d      	b.n	8007516 <UART_SetConfig+0x282>
 80074fa:	2302      	movs	r3, #2
 80074fc:	76fb      	strb	r3, [r7, #27]
 80074fe:	e00a      	b.n	8007516 <UART_SetConfig+0x282>
 8007500:	2304      	movs	r3, #4
 8007502:	76fb      	strb	r3, [r7, #27]
 8007504:	e007      	b.n	8007516 <UART_SetConfig+0x282>
 8007506:	2308      	movs	r3, #8
 8007508:	76fb      	strb	r3, [r7, #27]
 800750a:	e004      	b.n	8007516 <UART_SetConfig+0x282>
 800750c:	2310      	movs	r3, #16
 800750e:	76fb      	strb	r3, [r7, #27]
 8007510:	e001      	b.n	8007516 <UART_SetConfig+0x282>
 8007512:	2310      	movs	r3, #16
 8007514:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a17      	ldr	r2, [pc, #92]	; (8007578 <UART_SetConfig+0x2e4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	f040 8087 	bne.w	8007630 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007522:	7efb      	ldrb	r3, [r7, #27]
 8007524:	2b08      	cmp	r3, #8
 8007526:	d837      	bhi.n	8007598 <UART_SetConfig+0x304>
 8007528:	a201      	add	r2, pc, #4	; (adr r2, 8007530 <UART_SetConfig+0x29c>)
 800752a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752e:	bf00      	nop
 8007530:	08007555 	.word	0x08007555
 8007534:	08007599 	.word	0x08007599
 8007538:	0800755d 	.word	0x0800755d
 800753c:	08007599 	.word	0x08007599
 8007540:	08007563 	.word	0x08007563
 8007544:	08007599 	.word	0x08007599
 8007548:	08007599 	.word	0x08007599
 800754c:	08007599 	.word	0x08007599
 8007550:	0800756b 	.word	0x0800756b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007554:	f7fd ff70 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8007558:	6178      	str	r0, [r7, #20]
        break;
 800755a:	e022      	b.n	80075a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800755c:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <UART_SetConfig+0x300>)
 800755e:	617b      	str	r3, [r7, #20]
        break;
 8007560:	e01f      	b.n	80075a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007562:	f7fd fed1 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 8007566:	6178      	str	r0, [r7, #20]
        break;
 8007568:	e01b      	b.n	80075a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800756a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800756e:	617b      	str	r3, [r7, #20]
        break;
 8007570:	e017      	b.n	80075a2 <UART_SetConfig+0x30e>
 8007572:	bf00      	nop
 8007574:	efff69f3 	.word	0xefff69f3
 8007578:	40008000 	.word	0x40008000
 800757c:	40013800 	.word	0x40013800
 8007580:	40021000 	.word	0x40021000
 8007584:	40004400 	.word	0x40004400
 8007588:	40004800 	.word	0x40004800
 800758c:	40004c00 	.word	0x40004c00
 8007590:	40005000 	.word	0x40005000
 8007594:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	76bb      	strb	r3, [r7, #26]
        break;
 80075a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 80f1 	beq.w	800778c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	4613      	mov	r3, r2
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	4413      	add	r3, r2
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d305      	bcc.n	80075c6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d902      	bls.n	80075cc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	76bb      	strb	r3, [r7, #26]
 80075ca:	e0df      	b.n	800778c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f04f 0100 	mov.w	r1, #0
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	f04f 0300 	mov.w	r3, #0
 80075dc:	020b      	lsls	r3, r1, #8
 80075de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075e2:	0202      	lsls	r2, r0, #8
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	6849      	ldr	r1, [r1, #4]
 80075e8:	0849      	lsrs	r1, r1, #1
 80075ea:	4608      	mov	r0, r1
 80075ec:	f04f 0100 	mov.w	r1, #0
 80075f0:	1814      	adds	r4, r2, r0
 80075f2:	eb43 0501 	adc.w	r5, r3, r1
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	4620      	mov	r0, r4
 8007602:	4629      	mov	r1, r5
 8007604:	f7f9 f820 	bl	8000648 <__aeabi_uldivmod>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	4613      	mov	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007616:	d308      	bcc.n	800762a <UART_SetConfig+0x396>
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800761e:	d204      	bcs.n	800762a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	60da      	str	r2, [r3, #12]
 8007628:	e0b0      	b.n	800778c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	76bb      	strb	r3, [r7, #26]
 800762e:	e0ad      	b.n	800778c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007638:	d15c      	bne.n	80076f4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800763a:	7efb      	ldrb	r3, [r7, #27]
 800763c:	2b08      	cmp	r3, #8
 800763e:	d828      	bhi.n	8007692 <UART_SetConfig+0x3fe>
 8007640:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <UART_SetConfig+0x3b4>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	0800766d 	.word	0x0800766d
 800764c:	08007675 	.word	0x08007675
 8007650:	0800767d 	.word	0x0800767d
 8007654:	08007693 	.word	0x08007693
 8007658:	08007683 	.word	0x08007683
 800765c:	08007693 	.word	0x08007693
 8007660:	08007693 	.word	0x08007693
 8007664:	08007693 	.word	0x08007693
 8007668:	0800768b 	.word	0x0800768b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800766c:	f7fd fee4 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8007670:	6178      	str	r0, [r7, #20]
        break;
 8007672:	e013      	b.n	800769c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007674:	f7fd fef6 	bl	8005464 <HAL_RCC_GetPCLK2Freq>
 8007678:	6178      	str	r0, [r7, #20]
        break;
 800767a:	e00f      	b.n	800769c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800767c:	4b49      	ldr	r3, [pc, #292]	; (80077a4 <UART_SetConfig+0x510>)
 800767e:	617b      	str	r3, [r7, #20]
        break;
 8007680:	e00c      	b.n	800769c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007682:	f7fd fe41 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 8007686:	6178      	str	r0, [r7, #20]
        break;
 8007688:	e008      	b.n	800769c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800768a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800768e:	617b      	str	r3, [r7, #20]
        break;
 8007690:	e004      	b.n	800769c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	76bb      	strb	r3, [r7, #26]
        break;
 800769a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d074      	beq.n	800778c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	005a      	lsls	r2, r3, #1
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	085b      	lsrs	r3, r3, #1
 80076ac:	441a      	add	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	2b0f      	cmp	r3, #15
 80076be:	d916      	bls.n	80076ee <UART_SetConfig+0x45a>
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076c6:	d212      	bcs.n	80076ee <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	f023 030f 	bic.w	r3, r3, #15
 80076d0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	085b      	lsrs	r3, r3, #1
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	b29a      	uxth	r2, r3
 80076de:	89fb      	ldrh	r3, [r7, #14]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	89fa      	ldrh	r2, [r7, #14]
 80076ea:	60da      	str	r2, [r3, #12]
 80076ec:	e04e      	b.n	800778c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	76bb      	strb	r3, [r7, #26]
 80076f2:	e04b      	b.n	800778c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076f4:	7efb      	ldrb	r3, [r7, #27]
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d827      	bhi.n	800774a <UART_SetConfig+0x4b6>
 80076fa:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <UART_SetConfig+0x46c>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007725 	.word	0x08007725
 8007704:	0800772d 	.word	0x0800772d
 8007708:	08007735 	.word	0x08007735
 800770c:	0800774b 	.word	0x0800774b
 8007710:	0800773b 	.word	0x0800773b
 8007714:	0800774b 	.word	0x0800774b
 8007718:	0800774b 	.word	0x0800774b
 800771c:	0800774b 	.word	0x0800774b
 8007720:	08007743 	.word	0x08007743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007724:	f7fd fe88 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8007728:	6178      	str	r0, [r7, #20]
        break;
 800772a:	e013      	b.n	8007754 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800772c:	f7fd fe9a 	bl	8005464 <HAL_RCC_GetPCLK2Freq>
 8007730:	6178      	str	r0, [r7, #20]
        break;
 8007732:	e00f      	b.n	8007754 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007734:	4b1b      	ldr	r3, [pc, #108]	; (80077a4 <UART_SetConfig+0x510>)
 8007736:	617b      	str	r3, [r7, #20]
        break;
 8007738:	e00c      	b.n	8007754 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800773a:	f7fd fde5 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 800773e:	6178      	str	r0, [r7, #20]
        break;
 8007740:	e008      	b.n	8007754 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007746:	617b      	str	r3, [r7, #20]
        break;
 8007748:	e004      	b.n	8007754 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	76bb      	strb	r3, [r7, #26]
        break;
 8007752:	bf00      	nop
    }

    if (pclk != 0U)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d018      	beq.n	800778c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	085a      	lsrs	r2, r3, #1
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	441a      	add	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	fbb2 f3f3 	udiv	r3, r2, r3
 800776c:	b29b      	uxth	r3, r3
 800776e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	2b0f      	cmp	r3, #15
 8007774:	d908      	bls.n	8007788 <UART_SetConfig+0x4f4>
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800777c:	d204      	bcs.n	8007788 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	60da      	str	r2, [r3, #12]
 8007786:	e001      	b.n	800778c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007798:	7ebb      	ldrb	r3, [r7, #26]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3720      	adds	r7, #32
 800779e:	46bd      	mov	sp, r7
 80077a0:	bdb0      	pop	{r4, r5, r7, pc}
 80077a2:	bf00      	nop
 80077a4:	00f42400 	.word	0x00f42400

080077a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	f003 0308 	and.w	r3, r3, #8
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01a      	beq.n	80078be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078a6:	d10a      	bne.n	80078be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	605a      	str	r2, [r3, #4]
  }
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078fc:	f7fb fafa 	bl	8002ef4 <HAL_GetTick>
 8007900:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0308 	and.w	r3, r3, #8
 800790c:	2b08      	cmp	r3, #8
 800790e:	d10e      	bne.n	800792e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f82d 	bl	800797e <UART_WaitOnFlagUntilTimeout>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e023      	b.n	8007976 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b04      	cmp	r3, #4
 800793a:	d10e      	bne.n	800795a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800793c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f817 	bl	800797e <UART_WaitOnFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e00d      	b.n	8007976 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2220      	movs	r2, #32
 800795e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2220      	movs	r2, #32
 8007964:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	603b      	str	r3, [r7, #0]
 800798a:	4613      	mov	r3, r2
 800798c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800798e:	e05e      	b.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007996:	d05a      	beq.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007998:	f7fb faac 	bl	8002ef4 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d302      	bcc.n	80079ae <UART_WaitOnFlagUntilTimeout+0x30>
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d11b      	bne.n	80079e6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80079bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0201 	bic.w	r2, r2, #1
 80079cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2220      	movs	r2, #32
 80079d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2220      	movs	r2, #32
 80079d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e043      	b.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d02c      	beq.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a02:	d124      	bne.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a0c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a1c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0201 	bic.w	r2, r2, #1
 8007a2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2220      	movs	r2, #32
 8007a32:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2220      	movs	r2, #32
 8007a38:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e00f      	b.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69da      	ldr	r2, [r3, #28]
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4013      	ands	r3, r2
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	bf0c      	ite	eq
 8007a5e:	2301      	moveq	r3, #1
 8007a60:	2300      	movne	r3, #0
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d091      	beq.n	8007990 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a76:	b084      	sub	sp, #16
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	f107 001c 	add.w	r0, r7, #28
 8007a84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fa23 	bl	8007ee0 <USB_CoreReset>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d106      	bne.n	8007ab2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	639a      	str	r2, [r3, #56]	; 0x38
 8007ab0:	e005      	b.n	8007abe <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007aca:	b004      	add	sp, #16
 8007acc:	4770      	bx	lr

08007ace <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f023 0201 	bic.w	r2, r3, #1
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b08:	78fb      	ldrb	r3, [r7, #3]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d106      	bne.n	8007b1c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60da      	str	r2, [r3, #12]
 8007b1a:	e00b      	b.n	8007b34 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b1c:	78fb      	ldrb	r3, [r7, #3]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d106      	bne.n	8007b30 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60da      	str	r2, [r3, #12]
 8007b2e:	e001      	b.n	8007b34 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e003      	b.n	8007b3c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007b34:	2032      	movs	r0, #50	; 0x32
 8007b36:	f7fb f9e9 	bl	8002f0c <HAL_Delay>

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b44:	b084      	sub	sp, #16
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b086      	sub	sp, #24
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b5e:	2300      	movs	r3, #0
 8007b60:	613b      	str	r3, [r7, #16]
 8007b62:	e009      	b.n	8007b78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	3340      	adds	r3, #64	; 0x40
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	2200      	movs	r2, #0
 8007b70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	3301      	adds	r3, #1
 8007b76:	613b      	str	r3, [r7, #16]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	2b0e      	cmp	r3, #14
 8007b7c:	d9f2      	bls.n	8007b64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d11c      	bne.n	8007bbe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b92:	f043 0302 	orr.w	r3, r3, #2
 8007b96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	e005      	b.n	8007bca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bdc:	4619      	mov	r1, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be4:	461a      	mov	r2, r3
 8007be6:	680b      	ldr	r3, [r1, #0]
 8007be8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007bea:	2103      	movs	r1, #3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f93d 	bl	8007e6c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bf2:	2110      	movs	r1, #16
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f8f1 	bl	8007ddc <USB_FlushTxFifo>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f90f 	bl	8007e28 <USB_FlushRxFifo>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c26:	461a      	mov	r2, r3
 8007c28:	2300      	movs	r3, #0
 8007c2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c32:	461a      	mov	r2, r3
 8007c34:	2300      	movs	r3, #0
 8007c36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c38:	2300      	movs	r3, #0
 8007c3a:	613b      	str	r3, [r7, #16]
 8007c3c:	e043      	b.n	8007cc6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c54:	d118      	bne.n	8007c88 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10a      	bne.n	8007c72 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c68:	461a      	mov	r2, r3
 8007c6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c6e:	6013      	str	r3, [r2, #0]
 8007c70:	e013      	b.n	8007c9a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c84:	6013      	str	r3, [r2, #0]
 8007c86:	e008      	b.n	8007c9a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c94:	461a      	mov	r2, r3
 8007c96:	2300      	movs	r3, #0
 8007c98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	2300      	movs	r3, #0
 8007caa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb8:	461a      	mov	r2, r3
 8007cba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007cbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	613b      	str	r3, [r7, #16]
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d3b7      	bcc.n	8007c3e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cce:	2300      	movs	r3, #0
 8007cd0:	613b      	str	r3, [r7, #16]
 8007cd2:	e043      	b.n	8007d5c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cea:	d118      	bne.n	8007d1e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	015a      	lsls	r2, r3, #5
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	e013      	b.n	8007d30 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d14:	461a      	mov	r2, r3
 8007d16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	e008      	b.n	8007d30 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	2300      	movs	r3, #0
 8007d40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	613b      	str	r3, [r7, #16]
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d3b7      	bcc.n	8007cd4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	f043 0210 	orr.w	r2, r3, #16
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699a      	ldr	r2, [r3, #24]
 8007d96:	4b10      	ldr	r3, [pc, #64]	; (8007dd8 <USB_DevInit+0x294>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d005      	beq.n	8007db0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	f043 0208 	orr.w	r2, r3, #8
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d107      	bne.n	8007dc6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dbe:	f043 0304 	orr.w	r3, r3, #4
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dd2:	b004      	add	sp, #16
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	803c3800 	.word	0x803c3800

08007ddc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	019b      	lsls	r3, r3, #6
 8007dee:	f043 0220 	orr.w	r2, r3, #32
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4a09      	ldr	r2, [pc, #36]	; (8007e24 <USB_FlushTxFifo+0x48>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d901      	bls.n	8007e08 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e006      	b.n	8007e16 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	f003 0320 	and.w	r3, r3, #32
 8007e10:	2b20      	cmp	r3, #32
 8007e12:	d0f0      	beq.n	8007df6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	00030d40 	.word	0x00030d40

08007e28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2210      	movs	r2, #16
 8007e38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4a09      	ldr	r2, [pc, #36]	; (8007e68 <USB_FlushRxFifo+0x40>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d901      	bls.n	8007e4c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e006      	b.n	8007e5a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	f003 0310 	and.w	r3, r3, #16
 8007e54:	2b10      	cmp	r3, #16
 8007e56:	d0f0      	beq.n	8007e3a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	00030d40 	.word	0x00030d40

08007e6c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	68f9      	ldr	r1, [r7, #12]
 8007e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007eb8:	f023 0303 	bic.w	r3, r3, #3
 8007ebc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ecc:	f043 0302 	orr.w	r3, r3, #2
 8007ed0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	4a13      	ldr	r2, [pc, #76]	; (8007f44 <USB_CoreReset+0x64>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d901      	bls.n	8007efe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e01b      	b.n	8007f36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	daf2      	bge.n	8007eec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	f043 0201 	orr.w	r2, r3, #1
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4a09      	ldr	r2, [pc, #36]	; (8007f44 <USB_CoreReset+0x64>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d901      	bls.n	8007f28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e006      	b.n	8007f36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d0f0      	beq.n	8007f16 <USB_CoreReset+0x36>

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	00030d40 	.word	0x00030d40

08007f48 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007f52:	2300      	movs	r3, #0
 8007f54:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f5a:	2b84      	cmp	r3, #132	; 0x84
 8007f5c:	d005      	beq.n	8007f6a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007f5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4413      	add	r3, r2
 8007f66:	3303      	adds	r3, #3
 8007f68:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f7e:	f3ef 8305 	mrs	r3, IPSR
 8007f82:	607b      	str	r3, [r7, #4]
  return(result);
 8007f84:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	bf14      	ite	ne
 8007f8a:	2301      	movne	r3, #1
 8007f8c:	2300      	moveq	r3, #0
 8007f8e:	b2db      	uxtb	r3, r3
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007fa0:	f001 fbce 	bl	8009740 <vTaskStartScheduler>
  
  return osOK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fac:	b089      	sub	sp, #36	; 0x24
 8007fae:	af04      	add	r7, sp, #16
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d020      	beq.n	8007ffe <osThreadCreate+0x54>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01c      	beq.n	8007ffe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685c      	ldr	r4, [r3, #4]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681d      	ldr	r5, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691e      	ldr	r6, [r3, #16]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff ffb6 	bl	8007f48 <makeFreeRtosPriority>
 8007fdc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fe6:	9202      	str	r2, [sp, #8]
 8007fe8:	9301      	str	r3, [sp, #4]
 8007fea:	9100      	str	r1, [sp, #0]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	4632      	mov	r2, r6
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f001 f9dc 	bl	80093b0 <xTaskCreateStatic>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	e01c      	b.n	8008038 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685c      	ldr	r4, [r3, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800800a:	b29e      	uxth	r6, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008012:	4618      	mov	r0, r3
 8008014:	f7ff ff98 	bl	8007f48 <makeFreeRtosPriority>
 8008018:	4602      	mov	r2, r0
 800801a:	f107 030c 	add.w	r3, r7, #12
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	9200      	str	r2, [sp, #0]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	4632      	mov	r2, r6
 8008026:	4629      	mov	r1, r5
 8008028:	4620      	mov	r0, r4
 800802a:	f001 fa1e 	bl	800946a <xTaskCreate>
 800802e:	4603      	mov	r3, r0
 8008030:	2b01      	cmp	r3, #1
 8008032:	d001      	beq.n	8008038 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008034:	2300      	movs	r3, #0
 8008036:	e000      	b.n	800803a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008038:	68fb      	ldr	r3, [r7, #12]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008042 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <osDelay+0x16>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	e000      	b.n	800805a <osDelay+0x18>
 8008058:	2301      	movs	r3, #1
 800805a:	4618      	mov	r0, r3
 800805c:	f001 fb3c 	bl	80096d8 <vTaskDelay>
  
  return osOK;
 8008060:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af02      	add	r7, sp, #8
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	460b      	mov	r3, r1
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d013      	beq.n	80080aa <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8008082:	7afb      	ldrb	r3, [r7, #11]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d101      	bne.n	800808c <osTimerCreate+0x20>
 8008088:	2101      	movs	r1, #1
 800808a:	e000      	b.n	800808e <osTimerCreate+0x22>
 800808c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8008096:	9201      	str	r2, [sp, #4]
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	460a      	mov	r2, r1
 800809e:	2101      	movs	r1, #1
 80080a0:	480b      	ldr	r0, [pc, #44]	; (80080d0 <osTimerCreate+0x64>)
 80080a2:	f002 fa18 	bl	800a4d6 <xTimerCreateStatic>
 80080a6:	4603      	mov	r3, r0
 80080a8:	e00e      	b.n	80080c8 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80080aa:	7afb      	ldrb	r3, [r7, #11]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d101      	bne.n	80080b4 <osTimerCreate+0x48>
 80080b0:	2201      	movs	r2, #1
 80080b2:	e000      	b.n	80080b6 <osTimerCreate+0x4a>
 80080b4:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2101      	movs	r1, #1
 80080c0:	4803      	ldr	r0, [pc, #12]	; (80080d0 <osTimerCreate+0x64>)
 80080c2:	f002 f9e7 	bl	800a494 <xTimerCreate>
 80080c6:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	0800bfb0 	.word	0x0800bfb0

080080d4 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b088      	sub	sp, #32
 80080d8:	af02      	add	r7, sp, #8
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80080de:	2300      	movs	r3, #0
 80080e0:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <osTimerStart+0x20>
    ticks = 1;
 80080f0:	2301      	movs	r3, #1
 80080f2:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80080f4:	f7ff ff40 	bl	8007f78 <inHandlerMode>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d01a      	beq.n	8008134 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80080fe:	f107 030c 	add.w	r3, r7, #12
 8008102:	2200      	movs	r2, #0
 8008104:	9200      	str	r2, [sp, #0]
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	2109      	movs	r1, #9
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f002 fa5c 	bl	800a5c8 <xTimerGenericCommand>
 8008110:	4603      	mov	r3, r0
 8008112:	2b01      	cmp	r3, #1
 8008114:	d002      	beq.n	800811c <osTimerStart+0x48>
    {
      result = osErrorOS;
 8008116:	23ff      	movs	r3, #255	; 0xff
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	e018      	b.n	800814e <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d015      	beq.n	800814e <osTimerStart+0x7a>
 8008122:	4b0d      	ldr	r3, [pc, #52]	; (8008158 <osTimerStart+0x84>)
 8008124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	e00c      	b.n	800814e <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8008134:	2300      	movs	r3, #0
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	2300      	movs	r3, #0
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	2104      	movs	r1, #4
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f002 fa42 	bl	800a5c8 <xTimerGenericCommand>
 8008144:	4603      	mov	r3, r0
 8008146:	2b01      	cmp	r3, #1
 8008148:	d001      	beq.n	800814e <osTimerStart+0x7a>
      result = osErrorOS;
 800814a:	23ff      	movs	r3, #255	; 0xff
 800814c:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800814e:	697b      	ldr	r3, [r7, #20]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	e000ed04 	.word	0xe000ed04

0800815c <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af02      	add	r7, sp, #8
 8008162:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008164:	2300      	movs	r3, #0
 8008166:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8008168:	2300      	movs	r3, #0
 800816a:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 800816c:	f7ff ff04 	bl	8007f78 <inHandlerMode>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d019      	beq.n	80081aa <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8008176:	f107 0308 	add.w	r3, r7, #8
 800817a:	2200      	movs	r2, #0
 800817c:	9200      	str	r2, [sp, #0]
 800817e:	2200      	movs	r2, #0
 8008180:	2108      	movs	r1, #8
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f002 fa20 	bl	800a5c8 <xTimerGenericCommand>
 8008188:	4603      	mov	r3, r0
 800818a:	2b01      	cmp	r3, #1
 800818c:	d001      	beq.n	8008192 <osTimerStop+0x36>
      return osErrorOS;
 800818e:	23ff      	movs	r3, #255	; 0xff
 8008190:	e019      	b.n	80081c6 <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d015      	beq.n	80081c4 <osTimerStop+0x68>
 8008198:	4b0d      	ldr	r3, [pc, #52]	; (80081d0 <osTimerStop+0x74>)
 800819a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	e00c      	b.n	80081c4 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 80081aa:	2300      	movs	r3, #0
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	2300      	movs	r3, #0
 80081b0:	2200      	movs	r2, #0
 80081b2:	2103      	movs	r1, #3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f002 fa07 	bl	800a5c8 <xTimerGenericCommand>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d001      	beq.n	80081c4 <osTimerStop+0x68>
      result = osErrorOS;
 80081c0:	23ff      	movs	r3, #255	; 0xff
 80081c2:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 80081c4:	68fb      	ldr	r3, [r7, #12]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	e000ed04 	.word	0xe000ed04

080081d4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d007      	beq.n	80081f4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	4619      	mov	r1, r3
 80081ea:	2001      	movs	r0, #1
 80081ec:	f000 faad 	bl	800874a <xQueueCreateMutexStatic>
 80081f0:	4603      	mov	r3, r0
 80081f2:	e003      	b.n	80081fc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80081f4:	2001      	movs	r0, #1
 80081f6:	f000 fa90 	bl	800871a <xQueueCreateMutex>
 80081fa:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800820e:	2300      	movs	r3, #0
 8008210:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <osMutexWait+0x18>
    return osErrorParameter;
 8008218:	2380      	movs	r3, #128	; 0x80
 800821a:	e03a      	b.n	8008292 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800821c:	2300      	movs	r3, #0
 800821e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008226:	d103      	bne.n	8008230 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008228:	f04f 33ff 	mov.w	r3, #4294967295
 800822c:	60fb      	str	r3, [r7, #12]
 800822e:	e009      	b.n	8008244 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d006      	beq.n	8008244 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <osMutexWait+0x40>
      ticks = 1;
 8008240:	2301      	movs	r3, #1
 8008242:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008244:	f7ff fe98 	bl	8007f78 <inHandlerMode>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d017      	beq.n	800827e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800824e:	f107 0308 	add.w	r3, r7, #8
 8008252:	461a      	mov	r2, r3
 8008254:	2100      	movs	r1, #0
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fea4 	bl	8008fa4 <xQueueReceiveFromISR>
 800825c:	4603      	mov	r3, r0
 800825e:	2b01      	cmp	r3, #1
 8008260:	d001      	beq.n	8008266 <osMutexWait+0x62>
      return osErrorOS;
 8008262:	23ff      	movs	r3, #255	; 0xff
 8008264:	e015      	b.n	8008292 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d011      	beq.n	8008290 <osMutexWait+0x8c>
 800826c:	4b0b      	ldr	r3, [pc, #44]	; (800829c <osMutexWait+0x98>)
 800826e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	e008      	b.n	8008290 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800827e:	68f9      	ldr	r1, [r7, #12]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fd83 	bl	8008d8c <xQueueSemaphoreTake>
 8008286:	4603      	mov	r3, r0
 8008288:	2b01      	cmp	r3, #1
 800828a:	d001      	beq.n	8008290 <osMutexWait+0x8c>
    return osErrorOS;
 800828c:	23ff      	movs	r3, #255	; 0xff
 800828e:	e000      	b.n	8008292 <osMutexWait+0x8e>
  }
  
  return osOK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	e000ed04 	.word	0xe000ed04

080082a0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80082ac:	2300      	movs	r3, #0
 80082ae:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80082b0:	f7ff fe62 	bl	8007f78 <inHandlerMode>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d016      	beq.n	80082e8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80082ba:	f107 0308 	add.w	r3, r7, #8
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fbf6 	bl	8008ab2 <xQueueGiveFromISR>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d001      	beq.n	80082d0 <osMutexRelease+0x30>
      return osErrorOS;
 80082cc:	23ff      	movs	r3, #255	; 0xff
 80082ce:	e017      	b.n	8008300 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d013      	beq.n	80082fe <osMutexRelease+0x5e>
 80082d6:	4b0c      	ldr	r3, [pc, #48]	; (8008308 <osMutexRelease+0x68>)
 80082d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	e00a      	b.n	80082fe <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80082e8:	2300      	movs	r3, #0
 80082ea:	2200      	movs	r2, #0
 80082ec:	2100      	movs	r1, #0
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa46 	bl	8008780 <xQueueGenericSend>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d001      	beq.n	80082fe <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80082fa:	23ff      	movs	r3, #255	; 0xff
 80082fc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80082fe:	68fb      	ldr	r3, [r7, #12]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	e000ed04 	.word	0xe000ed04

0800830c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f103 0208 	add.w	r2, r3, #8
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f04f 32ff 	mov.w	r2, #4294967295
 8008324:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f103 0208 	add.w	r2, r3, #8
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f103 0208 	add.w	r2, r3, #8
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800835a:	bf00      	nop
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008366:	b480      	push	{r7}
 8008368:	b085      	sub	sp, #20
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	689a      	ldr	r2, [r3, #8]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	1c5a      	adds	r2, r3, #1
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	601a      	str	r2, [r3, #0]
}
 80083a2:	bf00      	nop
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083ae:	b480      	push	{r7}
 80083b0:	b085      	sub	sp, #20
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c4:	d103      	bne.n	80083ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	e00c      	b.n	80083e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	3308      	adds	r3, #8
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	e002      	b.n	80083dc <vListInsert+0x2e>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d2f6      	bcs.n	80083d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	601a      	str	r2, [r3, #0]
}
 8008414:	bf00      	nop
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	6892      	ldr	r2, [r2, #8]
 8008436:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	6852      	ldr	r2, [r2, #4]
 8008440:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	429a      	cmp	r2, r3
 800844a:	d103      	bne.n	8008454 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	689a      	ldr	r2, [r3, #8]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	1e5a      	subs	r2, r3, #1
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10a      	bne.n	800849e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800849a:	bf00      	nop
 800849c:	e7fe      	b.n	800849c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800849e:	f002 fca9 	bl	800adf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084aa:	68f9      	ldr	r1, [r7, #12]
 80084ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80084ae:	fb01 f303 	mul.w	r3, r1, r3
 80084b2:	441a      	add	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ce:	3b01      	subs	r3, #1
 80084d0:	68f9      	ldr	r1, [r7, #12]
 80084d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80084d4:	fb01 f303 	mul.w	r3, r1, r3
 80084d8:	441a      	add	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	22ff      	movs	r2, #255	; 0xff
 80084e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	22ff      	movs	r2, #255	; 0xff
 80084ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d114      	bne.n	800851e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d01a      	beq.n	8008532 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3310      	adds	r3, #16
 8008500:	4618      	mov	r0, r3
 8008502:	f001 fba1 	bl	8009c48 <xTaskRemoveFromEventList>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d012      	beq.n	8008532 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800850c:	4b0c      	ldr	r3, [pc, #48]	; (8008540 <xQueueGenericReset+0xcc>)
 800850e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	e009      	b.n	8008532 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3310      	adds	r3, #16
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff fef2 	bl	800830c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3324      	adds	r3, #36	; 0x24
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff feed 	bl	800830c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008532:	f002 fc8f 	bl	800ae54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008536:	2301      	movs	r3, #1
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	e000ed04 	.word	0xe000ed04

08008544 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008544:	b580      	push	{r7, lr}
 8008546:	b08e      	sub	sp, #56	; 0x38
 8008548:	af02      	add	r7, sp, #8
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800856a:	bf00      	nop
 800856c:	e7fe      	b.n	800856c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10a      	bne.n	800858a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <xQueueGenericCreateStatic+0x52>
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <xQueueGenericCreateStatic+0x56>
 8008596:	2301      	movs	r3, #1
 8008598:	e000      	b.n	800859c <xQueueGenericCreateStatic+0x58>
 800859a:	2300      	movs	r3, #0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10a      	bne.n	80085b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	623b      	str	r3, [r7, #32]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d102      	bne.n	80085c2 <xQueueGenericCreateStatic+0x7e>
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <xQueueGenericCreateStatic+0x82>
 80085c2:	2301      	movs	r3, #1
 80085c4:	e000      	b.n	80085c8 <xQueueGenericCreateStatic+0x84>
 80085c6:	2300      	movs	r3, #0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10a      	bne.n	80085e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	61fb      	str	r3, [r7, #28]
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80085e2:	2348      	movs	r3, #72	; 0x48
 80085e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	2b48      	cmp	r3, #72	; 0x48
 80085ea:	d00a      	beq.n	8008602 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	61bb      	str	r3, [r7, #24]
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008602:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00d      	beq.n	800862a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008616:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	4613      	mov	r3, r2
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	68b9      	ldr	r1, [r7, #8]
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 f83f 	bl	80086a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800862c:	4618      	mov	r0, r3
 800862e:	3730      	adds	r7, #48	; 0x30
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08a      	sub	sp, #40	; 0x28
 8008638:	af02      	add	r7, sp, #8
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	4613      	mov	r3, r2
 8008640:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10a      	bne.n	800865e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	613b      	str	r3, [r7, #16]
}
 800865a:	bf00      	nop
 800865c:	e7fe      	b.n	800865c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	fb02 f303 	mul.w	r3, r2, r3
 8008666:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	3348      	adds	r3, #72	; 0x48
 800866c:	4618      	mov	r0, r3
 800866e:	f002 fce3 	bl	800b038 <pvPortMalloc>
 8008672:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d011      	beq.n	800869e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	3348      	adds	r3, #72	; 0x48
 8008682:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800868c:	79fa      	ldrb	r2, [r7, #7]
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	4613      	mov	r3, r2
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	68b9      	ldr	r1, [r7, #8]
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 f805 	bl	80086a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800869e:	69bb      	ldr	r3, [r7, #24]
	}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3720      	adds	r7, #32
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d103      	bne.n	80086c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	e002      	b.n	80086ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086d6:	2101      	movs	r1, #1
 80086d8:	69b8      	ldr	r0, [r7, #24]
 80086da:	f7ff fecb 	bl	8008474 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80086de:	bf00      	nop
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00e      	beq.n	8008712 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008706:	2300      	movs	r3, #0
 8008708:	2200      	movs	r2, #0
 800870a:	2100      	movs	r1, #0
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f837 	bl	8008780 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008712:	bf00      	nop
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800871a:	b580      	push	{r7, lr}
 800871c:	b086      	sub	sp, #24
 800871e:	af00      	add	r7, sp, #0
 8008720:	4603      	mov	r3, r0
 8008722:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008724:	2301      	movs	r3, #1
 8008726:	617b      	str	r3, [r7, #20]
 8008728:	2300      	movs	r3, #0
 800872a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800872c:	79fb      	ldrb	r3, [r7, #7]
 800872e:	461a      	mov	r2, r3
 8008730:	6939      	ldr	r1, [r7, #16]
 8008732:	6978      	ldr	r0, [r7, #20]
 8008734:	f7ff ff7e 	bl	8008634 <xQueueGenericCreate>
 8008738:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f7ff ffd3 	bl	80086e6 <prvInitialiseMutex>

		return xNewQueue;
 8008740:	68fb      	ldr	r3, [r7, #12]
	}
 8008742:	4618      	mov	r0, r3
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800874a:	b580      	push	{r7, lr}
 800874c:	b088      	sub	sp, #32
 800874e:	af02      	add	r7, sp, #8
 8008750:	4603      	mov	r3, r0
 8008752:	6039      	str	r1, [r7, #0]
 8008754:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008756:	2301      	movs	r3, #1
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	2300      	movs	r3, #0
 800875c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800875e:	79fb      	ldrb	r3, [r7, #7]
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2200      	movs	r2, #0
 8008766:	6939      	ldr	r1, [r7, #16]
 8008768:	6978      	ldr	r0, [r7, #20]
 800876a:	f7ff feeb 	bl	8008544 <xQueueGenericCreateStatic>
 800876e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f7ff ffb8 	bl	80086e6 <prvInitialiseMutex>

		return xNewQueue;
 8008776:	68fb      	ldr	r3, [r7, #12]
	}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b08e      	sub	sp, #56	; 0x38
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
 800878c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800878e:	2300      	movs	r3, #0
 8008790:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10a      	bne.n	80087b2 <xQueueGenericSend+0x32>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087ae:	bf00      	nop
 80087b0:	e7fe      	b.n	80087b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d103      	bne.n	80087c0 <xQueueGenericSend+0x40>
 80087b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <xQueueGenericSend+0x44>
 80087c0:	2301      	movs	r3, #1
 80087c2:	e000      	b.n	80087c6 <xQueueGenericSend+0x46>
 80087c4:	2300      	movs	r3, #0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10a      	bne.n	80087e0 <xQueueGenericSend+0x60>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087dc:	bf00      	nop
 80087de:	e7fe      	b.n	80087de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d103      	bne.n	80087ee <xQueueGenericSend+0x6e>
 80087e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d101      	bne.n	80087f2 <xQueueGenericSend+0x72>
 80087ee:	2301      	movs	r3, #1
 80087f0:	e000      	b.n	80087f4 <xQueueGenericSend+0x74>
 80087f2:	2300      	movs	r3, #0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10a      	bne.n	800880e <xQueueGenericSend+0x8e>
	__asm volatile
 80087f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	623b      	str	r3, [r7, #32]
}
 800880a:	bf00      	nop
 800880c:	e7fe      	b.n	800880c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800880e:	f001 fbd7 	bl	8009fc0 <xTaskGetSchedulerState>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d102      	bne.n	800881e <xQueueGenericSend+0x9e>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <xQueueGenericSend+0xa2>
 800881e:	2301      	movs	r3, #1
 8008820:	e000      	b.n	8008824 <xQueueGenericSend+0xa4>
 8008822:	2300      	movs	r3, #0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10a      	bne.n	800883e <xQueueGenericSend+0xbe>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	61fb      	str	r3, [r7, #28]
}
 800883a:	bf00      	nop
 800883c:	e7fe      	b.n	800883c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800883e:	f002 fad9 	bl	800adf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884a:	429a      	cmp	r2, r3
 800884c:	d302      	bcc.n	8008854 <xQueueGenericSend+0xd4>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2b02      	cmp	r3, #2
 8008852:	d129      	bne.n	80088a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	68b9      	ldr	r1, [r7, #8]
 8008858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800885a:	f000 fc3b 	bl	80090d4 <prvCopyDataToQueue>
 800885e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008864:	2b00      	cmp	r3, #0
 8008866:	d010      	beq.n	800888a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	3324      	adds	r3, #36	; 0x24
 800886c:	4618      	mov	r0, r3
 800886e:	f001 f9eb 	bl	8009c48 <xTaskRemoveFromEventList>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d013      	beq.n	80088a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008878:	4b3f      	ldr	r3, [pc, #252]	; (8008978 <xQueueGenericSend+0x1f8>)
 800887a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	e00a      	b.n	80088a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800888a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888c:	2b00      	cmp	r3, #0
 800888e:	d007      	beq.n	80088a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008890:	4b39      	ldr	r3, [pc, #228]	; (8008978 <xQueueGenericSend+0x1f8>)
 8008892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008896:	601a      	str	r2, [r3, #0]
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088a0:	f002 fad8 	bl	800ae54 <vPortExitCritical>
				return pdPASS;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e063      	b.n	8008970 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d103      	bne.n	80088b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088ae:	f002 fad1 	bl	800ae54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80088b2:	2300      	movs	r3, #0
 80088b4:	e05c      	b.n	8008970 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d106      	bne.n	80088ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088bc:	f107 0314 	add.w	r3, r7, #20
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 fa23 	bl	8009d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088c6:	2301      	movs	r3, #1
 80088c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088ca:	f002 fac3 	bl	800ae54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088ce:	f000 ff9d 	bl	800980c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088d2:	f002 fa8f 	bl	800adf4 <vPortEnterCritical>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088dc:	b25b      	sxtb	r3, r3
 80088de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e2:	d103      	bne.n	80088ec <xQueueGenericSend+0x16c>
 80088e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088f2:	b25b      	sxtb	r3, r3
 80088f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f8:	d103      	bne.n	8008902 <xQueueGenericSend+0x182>
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008902:	f002 faa7 	bl	800ae54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008906:	1d3a      	adds	r2, r7, #4
 8008908:	f107 0314 	add.w	r3, r7, #20
 800890c:	4611      	mov	r1, r2
 800890e:	4618      	mov	r0, r3
 8008910:	f001 fa12 	bl	8009d38 <xTaskCheckForTimeOut>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d124      	bne.n	8008964 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800891a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800891c:	f000 fcd2 	bl	80092c4 <prvIsQueueFull>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d018      	beq.n	8008958 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008928:	3310      	adds	r3, #16
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	4611      	mov	r1, r2
 800892e:	4618      	mov	r0, r3
 8008930:	f001 f93a 	bl	8009ba8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008936:	f000 fc5d 	bl	80091f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800893a:	f000 ff75 	bl	8009828 <xTaskResumeAll>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	f47f af7c 	bne.w	800883e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008946:	4b0c      	ldr	r3, [pc, #48]	; (8008978 <xQueueGenericSend+0x1f8>)
 8008948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	e772      	b.n	800883e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800895a:	f000 fc4b 	bl	80091f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800895e:	f000 ff63 	bl	8009828 <xTaskResumeAll>
 8008962:	e76c      	b.n	800883e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008966:	f000 fc45 	bl	80091f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800896a:	f000 ff5d 	bl	8009828 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800896e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008970:	4618      	mov	r0, r3
 8008972:	3738      	adds	r7, #56	; 0x38
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	e000ed04 	.word	0xe000ed04

0800897c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b090      	sub	sp, #64	; 0x40
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800898e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10a      	bne.n	80089aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089a6:	bf00      	nop
 80089a8:	e7fe      	b.n	80089a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d103      	bne.n	80089b8 <xQueueGenericSendFromISR+0x3c>
 80089b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <xQueueGenericSendFromISR+0x40>
 80089b8:	2301      	movs	r3, #1
 80089ba:	e000      	b.n	80089be <xQueueGenericSendFromISR+0x42>
 80089bc:	2300      	movs	r3, #0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10a      	bne.n	80089d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089d4:	bf00      	nop
 80089d6:	e7fe      	b.n	80089d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d103      	bne.n	80089e6 <xQueueGenericSendFromISR+0x6a>
 80089de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d101      	bne.n	80089ea <xQueueGenericSendFromISR+0x6e>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e000      	b.n	80089ec <xQueueGenericSendFromISR+0x70>
 80089ea:	2300      	movs	r3, #0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10a      	bne.n	8008a06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	623b      	str	r3, [r7, #32]
}
 8008a02:	bf00      	nop
 8008a04:	e7fe      	b.n	8008a04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a06:	f002 fad7 	bl	800afb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a0a:	f3ef 8211 	mrs	r2, BASEPRI
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	61fa      	str	r2, [r7, #28]
 8008a20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d302      	bcc.n	8008a38 <xQueueGenericSendFromISR+0xbc>
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d12f      	bne.n	8008a98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a4e:	f000 fb41 	bl	80090d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5a:	d112      	bne.n	8008a82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d016      	beq.n	8008a92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a66:	3324      	adds	r3, #36	; 0x24
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f001 f8ed 	bl	8009c48 <xTaskRemoveFromEventList>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00e      	beq.n	8008a92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00b      	beq.n	8008a92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	601a      	str	r2, [r3, #0]
 8008a80:	e007      	b.n	8008a92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a86:	3301      	adds	r3, #1
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	b25a      	sxtb	r2, r3
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a92:	2301      	movs	r3, #1
 8008a94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008a96:	e001      	b.n	8008a9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008aa6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3740      	adds	r7, #64	; 0x40
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b08e      	sub	sp, #56	; 0x38
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10a      	bne.n	8008adc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	623b      	str	r3, [r7, #32]
}
 8008ad8:	bf00      	nop
 8008ada:	e7fe      	b.n	8008ada <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00a      	beq.n	8008afa <xQueueGiveFromISR+0x48>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	61fb      	str	r3, [r7, #28]
}
 8008af6:	bf00      	nop
 8008af8:	e7fe      	b.n	8008af8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d103      	bne.n	8008b0a <xQueueGiveFromISR+0x58>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <xQueueGiveFromISR+0x5c>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e000      	b.n	8008b10 <xQueueGiveFromISR+0x5e>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10a      	bne.n	8008b2a <xQueueGiveFromISR+0x78>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	61bb      	str	r3, [r7, #24]
}
 8008b26:	bf00      	nop
 8008b28:	e7fe      	b.n	8008b28 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b2a:	f002 fa45 	bl	800afb8 <vPortValidateInterruptPriority>
	__asm volatile
 8008b2e:	f3ef 8211 	mrs	r2, BASEPRI
 8008b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	617a      	str	r2, [r7, #20]
 8008b44:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008b46:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d22b      	bcs.n	8008bb2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b74:	d112      	bne.n	8008b9c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d016      	beq.n	8008bac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	3324      	adds	r3, #36	; 0x24
 8008b82:	4618      	mov	r0, r3
 8008b84:	f001 f860 	bl	8009c48 <xTaskRemoveFromEventList>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00e      	beq.n	8008bac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2201      	movs	r2, #1
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	e007      	b.n	8008bac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	b25a      	sxtb	r2, r3
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008bac:	2301      	movs	r3, #1
 8008bae:	637b      	str	r3, [r7, #52]	; 0x34
 8008bb0:	e001      	b.n	8008bb6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8008bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f383 8811 	msr	BASEPRI, r3
}
 8008bc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3738      	adds	r7, #56	; 0x38
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08c      	sub	sp, #48	; 0x30
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10a      	bne.n	8008bfc <xQueueReceive+0x30>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	623b      	str	r3, [r7, #32]
}
 8008bf8:	bf00      	nop
 8008bfa:	e7fe      	b.n	8008bfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d103      	bne.n	8008c0a <xQueueReceive+0x3e>
 8008c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <xQueueReceive+0x42>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e000      	b.n	8008c10 <xQueueReceive+0x44>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10a      	bne.n	8008c2a <xQueueReceive+0x5e>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	61fb      	str	r3, [r7, #28]
}
 8008c26:	bf00      	nop
 8008c28:	e7fe      	b.n	8008c28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c2a:	f001 f9c9 	bl	8009fc0 <xTaskGetSchedulerState>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d102      	bne.n	8008c3a <xQueueReceive+0x6e>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <xQueueReceive+0x72>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <xQueueReceive+0x74>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10a      	bne.n	8008c5a <xQueueReceive+0x8e>
	__asm volatile
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	61bb      	str	r3, [r7, #24]
}
 8008c56:	bf00      	nop
 8008c58:	e7fe      	b.n	8008c58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c5a:	f002 f8cb 	bl	800adf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d01f      	beq.n	8008caa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c6a:	68b9      	ldr	r1, [r7, #8]
 8008c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c6e:	f000 fa9b 	bl	80091a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c74:	1e5a      	subs	r2, r3, #1
 8008c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00f      	beq.n	8008ca2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c84:	3310      	adds	r3, #16
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 ffde 	bl	8009c48 <xTaskRemoveFromEventList>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d007      	beq.n	8008ca2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c92:	4b3d      	ldr	r3, [pc, #244]	; (8008d88 <xQueueReceive+0x1bc>)
 8008c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ca2:	f002 f8d7 	bl	800ae54 <vPortExitCritical>
				return pdPASS;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e069      	b.n	8008d7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d103      	bne.n	8008cb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cb0:	f002 f8d0 	bl	800ae54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	e062      	b.n	8008d7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d106      	bne.n	8008ccc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cbe:	f107 0310 	add.w	r3, r7, #16
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f001 f822 	bl	8009d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ccc:	f002 f8c2 	bl	800ae54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cd0:	f000 fd9c 	bl	800980c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cd4:	f002 f88e 	bl	800adf4 <vPortEnterCritical>
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cde:	b25b      	sxtb	r3, r3
 8008ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce4:	d103      	bne.n	8008cee <xQueueReceive+0x122>
 8008ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cf4:	b25b      	sxtb	r3, r3
 8008cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfa:	d103      	bne.n	8008d04 <xQueueReceive+0x138>
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d04:	f002 f8a6 	bl	800ae54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d08:	1d3a      	adds	r2, r7, #4
 8008d0a:	f107 0310 	add.w	r3, r7, #16
 8008d0e:	4611      	mov	r1, r2
 8008d10:	4618      	mov	r0, r3
 8008d12:	f001 f811 	bl	8009d38 <xTaskCheckForTimeOut>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d123      	bne.n	8008d64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d1e:	f000 fabb 	bl	8009298 <prvIsQueueEmpty>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d017      	beq.n	8008d58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2a:	3324      	adds	r3, #36	; 0x24
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	4611      	mov	r1, r2
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 ff39 	bl	8009ba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d38:	f000 fa5c 	bl	80091f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d3c:	f000 fd74 	bl	8009828 <xTaskResumeAll>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d189      	bne.n	8008c5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008d46:	4b10      	ldr	r3, [pc, #64]	; (8008d88 <xQueueReceive+0x1bc>)
 8008d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	e780      	b.n	8008c5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d5a:	f000 fa4b 	bl	80091f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d5e:	f000 fd63 	bl	8009828 <xTaskResumeAll>
 8008d62:	e77a      	b.n	8008c5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d66:	f000 fa45 	bl	80091f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d6a:	f000 fd5d 	bl	8009828 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d70:	f000 fa92 	bl	8009298 <prvIsQueueEmpty>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f43f af6f 	beq.w	8008c5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3730      	adds	r7, #48	; 0x30
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	e000ed04 	.word	0xe000ed04

08008d8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08e      	sub	sp, #56	; 0x38
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d96:	2300      	movs	r3, #0
 8008d98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10a      	bne.n	8008dbe <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	623b      	str	r3, [r7, #32]
}
 8008dba:	bf00      	nop
 8008dbc:	e7fe      	b.n	8008dbc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00a      	beq.n	8008ddc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	61fb      	str	r3, [r7, #28]
}
 8008dd8:	bf00      	nop
 8008dda:	e7fe      	b.n	8008dda <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ddc:	f001 f8f0 	bl	8009fc0 <xTaskGetSchedulerState>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <xQueueSemaphoreTake+0x60>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <xQueueSemaphoreTake+0x64>
 8008dec:	2301      	movs	r3, #1
 8008dee:	e000      	b.n	8008df2 <xQueueSemaphoreTake+0x66>
 8008df0:	2300      	movs	r3, #0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10a      	bne.n	8008e0c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	61bb      	str	r3, [r7, #24]
}
 8008e08:	bf00      	nop
 8008e0a:	e7fe      	b.n	8008e0a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e0c:	f001 fff2 	bl	800adf4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d024      	beq.n	8008e66 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	1e5a      	subs	r2, r3, #1
 8008e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d104      	bne.n	8008e36 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008e2c:	f001 fa70 	bl	800a310 <pvTaskIncrementMutexHeldCount>
 8008e30:	4602      	mov	r2, r0
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00f      	beq.n	8008e5e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	3310      	adds	r3, #16
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 ff00 	bl	8009c48 <xTaskRemoveFromEventList>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d007      	beq.n	8008e5e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e4e:	4b54      	ldr	r3, [pc, #336]	; (8008fa0 <xQueueSemaphoreTake+0x214>)
 8008e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e5e:	f001 fff9 	bl	800ae54 <vPortExitCritical>
				return pdPASS;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e097      	b.n	8008f96 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d111      	bne.n	8008e90 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00a      	beq.n	8008e88 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	617b      	str	r3, [r7, #20]
}
 8008e84:	bf00      	nop
 8008e86:	e7fe      	b.n	8008e86 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008e88:	f001 ffe4 	bl	800ae54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	e082      	b.n	8008f96 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d106      	bne.n	8008ea4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e96:	f107 030c 	add.w	r3, r7, #12
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 ff36 	bl	8009d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ea4:	f001 ffd6 	bl	800ae54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ea8:	f000 fcb0 	bl	800980c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008eac:	f001 ffa2 	bl	800adf4 <vPortEnterCritical>
 8008eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eb6:	b25b      	sxtb	r3, r3
 8008eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebc:	d103      	bne.n	8008ec6 <xQueueSemaphoreTake+0x13a>
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ecc:	b25b      	sxtb	r3, r3
 8008ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed2:	d103      	bne.n	8008edc <xQueueSemaphoreTake+0x150>
 8008ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008edc:	f001 ffba 	bl	800ae54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ee0:	463a      	mov	r2, r7
 8008ee2:	f107 030c 	add.w	r3, r7, #12
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 ff25 	bl	8009d38 <xTaskCheckForTimeOut>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d132      	bne.n	8008f5a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ef6:	f000 f9cf 	bl	8009298 <prvIsQueueEmpty>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d026      	beq.n	8008f4e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d109      	bne.n	8008f1c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008f08:	f001 ff74 	bl	800adf4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f001 f873 	bl	8009ffc <xTaskPriorityInherit>
 8008f16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008f18:	f001 ff9c 	bl	800ae54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1e:	3324      	adds	r3, #36	; 0x24
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	4611      	mov	r1, r2
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 fe3f 	bl	8009ba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f2c:	f000 f962 	bl	80091f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f30:	f000 fc7a 	bl	8009828 <xTaskResumeAll>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f47f af68 	bne.w	8008e0c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008f3c:	4b18      	ldr	r3, [pc, #96]	; (8008fa0 <xQueueSemaphoreTake+0x214>)
 8008f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f42:	601a      	str	r2, [r3, #0]
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	e75e      	b.n	8008e0c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f50:	f000 f950 	bl	80091f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f54:	f000 fc68 	bl	8009828 <xTaskResumeAll>
 8008f58:	e758      	b.n	8008e0c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008f5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f5c:	f000 f94a 	bl	80091f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f60:	f000 fc62 	bl	8009828 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f66:	f000 f997 	bl	8009298 <prvIsQueueEmpty>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f43f af4d 	beq.w	8008e0c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00d      	beq.n	8008f94 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008f78:	f001 ff3c 	bl	800adf4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f7e:	f000 f891 	bl	80090a4 <prvGetDisinheritPriorityAfterTimeout>
 8008f82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f001 f932 	bl	800a1f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008f90:	f001 ff60 	bl	800ae54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3738      	adds	r7, #56	; 0x38
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	e000ed04 	.word	0xe000ed04

08008fa4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08e      	sub	sp, #56	; 0x38
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10a      	bne.n	8008fd0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbe:	f383 8811 	msr	BASEPRI, r3
 8008fc2:	f3bf 8f6f 	isb	sy
 8008fc6:	f3bf 8f4f 	dsb	sy
 8008fca:	623b      	str	r3, [r7, #32]
}
 8008fcc:	bf00      	nop
 8008fce:	e7fe      	b.n	8008fce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d103      	bne.n	8008fde <xQueueReceiveFromISR+0x3a>
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <xQueueReceiveFromISR+0x3e>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e000      	b.n	8008fe4 <xQueueReceiveFromISR+0x40>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10a      	bne.n	8008ffe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	61fb      	str	r3, [r7, #28]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ffe:	f001 ffdb 	bl	800afb8 <vPortValidateInterruptPriority>
	__asm volatile
 8009002:	f3ef 8211 	mrs	r2, BASEPRI
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	61ba      	str	r2, [r7, #24]
 8009018:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800901a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800901c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009022:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009026:	2b00      	cmp	r3, #0
 8009028:	d02f      	beq.n	800908a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009034:	68b9      	ldr	r1, [r7, #8]
 8009036:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009038:	f000 f8b6 	bl	80091a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	1e5a      	subs	r2, r3, #1
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009044:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904c:	d112      	bne.n	8009074 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d016      	beq.n	8009084 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	3310      	adds	r3, #16
 800905a:	4618      	mov	r0, r3
 800905c:	f000 fdf4 	bl	8009c48 <xTaskRemoveFromEventList>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00e      	beq.n	8009084 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00b      	beq.n	8009084 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	e007      	b.n	8009084 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009078:	3301      	adds	r3, #1
 800907a:	b2db      	uxtb	r3, r3
 800907c:	b25a      	sxtb	r2, r3
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009084:	2301      	movs	r3, #1
 8009086:	637b      	str	r3, [r7, #52]	; 0x34
 8009088:	e001      	b.n	800908e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800908a:	2300      	movs	r3, #0
 800908c:	637b      	str	r3, [r7, #52]	; 0x34
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f383 8811 	msr	BASEPRI, r3
}
 8009098:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800909a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800909c:	4618      	mov	r0, r3
 800909e:	3738      	adds	r7, #56	; 0x38
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d006      	beq.n	80090c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f1c3 0307 	rsb	r3, r3, #7
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	e001      	b.n	80090c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80090c2:	2300      	movs	r3, #0
 80090c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80090c6:	68fb      	ldr	r3, [r7, #12]
	}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80090e0:	2300      	movs	r3, #0
 80090e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10d      	bne.n	800910e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d14d      	bne.n	8009196 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 fff2 	bl	800a0e8 <xTaskPriorityDisinherit>
 8009104:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	609a      	str	r2, [r3, #8]
 800910c:	e043      	b.n	8009196 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d119      	bne.n	8009148 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6858      	ldr	r0, [r3, #4]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911c:	461a      	mov	r2, r3
 800911e:	68b9      	ldr	r1, [r7, #8]
 8009120:	f002 f99e 	bl	800b460 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912c:	441a      	add	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	429a      	cmp	r2, r3
 800913c:	d32b      	bcc.n	8009196 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	605a      	str	r2, [r3, #4]
 8009146:	e026      	b.n	8009196 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	68d8      	ldr	r0, [r3, #12]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009150:	461a      	mov	r2, r3
 8009152:	68b9      	ldr	r1, [r7, #8]
 8009154:	f002 f984 	bl	800b460 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	68da      	ldr	r2, [r3, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009160:	425b      	negs	r3, r3
 8009162:	441a      	add	r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	68da      	ldr	r2, [r3, #12]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	429a      	cmp	r2, r3
 8009172:	d207      	bcs.n	8009184 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	689a      	ldr	r2, [r3, #8]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917c:	425b      	negs	r3, r3
 800917e:	441a      	add	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2b02      	cmp	r3, #2
 8009188:	d105      	bne.n	8009196 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	3b01      	subs	r3, #1
 8009194:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	1c5a      	adds	r2, r3, #1
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800919e:	697b      	ldr	r3, [r7, #20]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3718      	adds	r7, #24
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d018      	beq.n	80091ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	441a      	add	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68da      	ldr	r2, [r3, #12]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d303      	bcc.n	80091dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	68d9      	ldr	r1, [r3, #12]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e4:	461a      	mov	r2, r3
 80091e6:	6838      	ldr	r0, [r7, #0]
 80091e8:	f002 f93a 	bl	800b460 <memcpy>
	}
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80091fc:	f001 fdfa 	bl	800adf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009206:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009208:	e011      	b.n	800922e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920e:	2b00      	cmp	r3, #0
 8009210:	d012      	beq.n	8009238 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	3324      	adds	r3, #36	; 0x24
 8009216:	4618      	mov	r0, r3
 8009218:	f000 fd16 	bl	8009c48 <xTaskRemoveFromEventList>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009222:	f000 fdeb 	bl	8009dfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009226:	7bfb      	ldrb	r3, [r7, #15]
 8009228:	3b01      	subs	r3, #1
 800922a:	b2db      	uxtb	r3, r3
 800922c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800922e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009232:	2b00      	cmp	r3, #0
 8009234:	dce9      	bgt.n	800920a <prvUnlockQueue+0x16>
 8009236:	e000      	b.n	800923a <prvUnlockQueue+0x46>
					break;
 8009238:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	22ff      	movs	r2, #255	; 0xff
 800923e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009242:	f001 fe07 	bl	800ae54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009246:	f001 fdd5 	bl	800adf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009250:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009252:	e011      	b.n	8009278 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d012      	beq.n	8009282 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	3310      	adds	r3, #16
 8009260:	4618      	mov	r0, r3
 8009262:	f000 fcf1 	bl	8009c48 <xTaskRemoveFromEventList>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800926c:	f000 fdc6 	bl	8009dfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009270:	7bbb      	ldrb	r3, [r7, #14]
 8009272:	3b01      	subs	r3, #1
 8009274:	b2db      	uxtb	r3, r3
 8009276:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800927c:	2b00      	cmp	r3, #0
 800927e:	dce9      	bgt.n	8009254 <prvUnlockQueue+0x60>
 8009280:	e000      	b.n	8009284 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009282:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	22ff      	movs	r2, #255	; 0xff
 8009288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800928c:	f001 fde2 	bl	800ae54 <vPortExitCritical>
}
 8009290:	bf00      	nop
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092a0:	f001 fda8 	bl	800adf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d102      	bne.n	80092b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092ac:	2301      	movs	r3, #1
 80092ae:	60fb      	str	r3, [r7, #12]
 80092b0:	e001      	b.n	80092b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092b6:	f001 fdcd 	bl	800ae54 <vPortExitCritical>

	return xReturn;
 80092ba:	68fb      	ldr	r3, [r7, #12]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092cc:	f001 fd92 	bl	800adf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d8:	429a      	cmp	r2, r3
 80092da:	d102      	bne.n	80092e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80092dc:	2301      	movs	r3, #1
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	e001      	b.n	80092e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092e6:	f001 fdb5 	bl	800ae54 <vPortExitCritical>

	return xReturn;
 80092ea:	68fb      	ldr	r3, [r7, #12]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092fe:	2300      	movs	r3, #0
 8009300:	60fb      	str	r3, [r7, #12]
 8009302:	e014      	b.n	800932e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009304:	4a0f      	ldr	r2, [pc, #60]	; (8009344 <vQueueAddToRegistry+0x50>)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10b      	bne.n	8009328 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009310:	490c      	ldr	r1, [pc, #48]	; (8009344 <vQueueAddToRegistry+0x50>)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800931a:	4a0a      	ldr	r2, [pc, #40]	; (8009344 <vQueueAddToRegistry+0x50>)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	00db      	lsls	r3, r3, #3
 8009320:	4413      	add	r3, r2
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009326:	e006      	b.n	8009336 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3301      	adds	r3, #1
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2b07      	cmp	r3, #7
 8009332:	d9e7      	bls.n	8009304 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	3714      	adds	r7, #20
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	20003144 	.word	0x20003144

08009348 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009358:	f001 fd4c 	bl	800adf4 <vPortEnterCritical>
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009362:	b25b      	sxtb	r3, r3
 8009364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009368:	d103      	bne.n	8009372 <vQueueWaitForMessageRestricted+0x2a>
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009378:	b25b      	sxtb	r3, r3
 800937a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800937e:	d103      	bne.n	8009388 <vQueueWaitForMessageRestricted+0x40>
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009388:	f001 fd64 	bl	800ae54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009390:	2b00      	cmp	r3, #0
 8009392:	d106      	bne.n	80093a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	3324      	adds	r3, #36	; 0x24
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	68b9      	ldr	r1, [r7, #8]
 800939c:	4618      	mov	r0, r3
 800939e:	f000 fc27 	bl	8009bf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80093a2:	6978      	ldr	r0, [r7, #20]
 80093a4:	f7ff ff26 	bl	80091f4 <prvUnlockQueue>
	}
 80093a8:	bf00      	nop
 80093aa:	3718      	adds	r7, #24
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b08e      	sub	sp, #56	; 0x38
 80093b4:	af04      	add	r7, sp, #16
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
 80093bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80093be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10a      	bne.n	80093da <xTaskCreateStatic+0x2a>
	__asm volatile
 80093c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	623b      	str	r3, [r7, #32]
}
 80093d6:	bf00      	nop
 80093d8:	e7fe      	b.n	80093d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80093da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10a      	bne.n	80093f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	61fb      	str	r3, [r7, #28]
}
 80093f2:	bf00      	nop
 80093f4:	e7fe      	b.n	80093f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80093f6:	2354      	movs	r3, #84	; 0x54
 80093f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	2b54      	cmp	r3, #84	; 0x54
 80093fe:	d00a      	beq.n	8009416 <xTaskCreateStatic+0x66>
	__asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	61bb      	str	r3, [r7, #24]
}
 8009412:	bf00      	nop
 8009414:	e7fe      	b.n	8009414 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009416:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941a:	2b00      	cmp	r3, #0
 800941c:	d01e      	beq.n	800945c <xTaskCreateStatic+0xac>
 800941e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009420:	2b00      	cmp	r3, #0
 8009422:	d01b      	beq.n	800945c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800942c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800942e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009430:	2202      	movs	r2, #2
 8009432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009436:	2300      	movs	r3, #0
 8009438:	9303      	str	r3, [sp, #12]
 800943a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943c:	9302      	str	r3, [sp, #8]
 800943e:	f107 0314 	add.w	r3, r7, #20
 8009442:	9301      	str	r3, [sp, #4]
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	68b9      	ldr	r1, [r7, #8]
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f850 	bl	80094f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009454:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009456:	f000 f8d5 	bl	8009604 <prvAddNewTaskToReadyList>
 800945a:	e001      	b.n	8009460 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800945c:	2300      	movs	r3, #0
 800945e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009460:	697b      	ldr	r3, [r7, #20]
	}
 8009462:	4618      	mov	r0, r3
 8009464:	3728      	adds	r7, #40	; 0x28
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800946a:	b580      	push	{r7, lr}
 800946c:	b08c      	sub	sp, #48	; 0x30
 800946e:	af04      	add	r7, sp, #16
 8009470:	60f8      	str	r0, [r7, #12]
 8009472:	60b9      	str	r1, [r7, #8]
 8009474:	603b      	str	r3, [r7, #0]
 8009476:	4613      	mov	r3, r2
 8009478:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800947a:	88fb      	ldrh	r3, [r7, #6]
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4618      	mov	r0, r3
 8009480:	f001 fdda 	bl	800b038 <pvPortMalloc>
 8009484:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00e      	beq.n	80094aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800948c:	2054      	movs	r0, #84	; 0x54
 800948e:	f001 fdd3 	bl	800b038 <pvPortMalloc>
 8009492:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d003      	beq.n	80094a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	697a      	ldr	r2, [r7, #20]
 800949e:	631a      	str	r2, [r3, #48]	; 0x30
 80094a0:	e005      	b.n	80094ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80094a2:	6978      	ldr	r0, [r7, #20]
 80094a4:	f001 fe94 	bl	800b1d0 <vPortFree>
 80094a8:	e001      	b.n	80094ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80094aa:	2300      	movs	r3, #0
 80094ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d017      	beq.n	80094e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80094bc:	88fa      	ldrh	r2, [r7, #6]
 80094be:	2300      	movs	r3, #0
 80094c0:	9303      	str	r3, [sp, #12]
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	9302      	str	r3, [sp, #8]
 80094c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c8:	9301      	str	r3, [sp, #4]
 80094ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094cc:	9300      	str	r3, [sp, #0]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	68b9      	ldr	r1, [r7, #8]
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 f80e 	bl	80094f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094d8:	69f8      	ldr	r0, [r7, #28]
 80094da:	f000 f893 	bl	8009604 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80094de:	2301      	movs	r3, #1
 80094e0:	61bb      	str	r3, [r7, #24]
 80094e2:	e002      	b.n	80094ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80094e4:	f04f 33ff 	mov.w	r3, #4294967295
 80094e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80094ea:	69bb      	ldr	r3, [r7, #24]
	}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3720      	adds	r7, #32
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b088      	sub	sp, #32
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
 8009500:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800950c:	3b01      	subs	r3, #1
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	f023 0307 	bic.w	r3, r3, #7
 800951a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	f003 0307 	and.w	r3, r3, #7
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00a      	beq.n	800953c <prvInitialiseNewTask+0x48>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	617b      	str	r3, [r7, #20]
}
 8009538:	bf00      	nop
 800953a:	e7fe      	b.n	800953a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d01f      	beq.n	8009582 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009542:	2300      	movs	r3, #0
 8009544:	61fb      	str	r3, [r7, #28]
 8009546:	e012      	b.n	800956e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	4413      	add	r3, r2
 800954e:	7819      	ldrb	r1, [r3, #0]
 8009550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	4413      	add	r3, r2
 8009556:	3334      	adds	r3, #52	; 0x34
 8009558:	460a      	mov	r2, r1
 800955a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	4413      	add	r3, r2
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d006      	beq.n	8009576 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	3301      	adds	r3, #1
 800956c:	61fb      	str	r3, [r7, #28]
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	2b0f      	cmp	r3, #15
 8009572:	d9e9      	bls.n	8009548 <prvInitialiseNewTask+0x54>
 8009574:	e000      	b.n	8009578 <prvInitialiseNewTask+0x84>
			{
				break;
 8009576:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009580:	e003      	b.n	800958a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800958a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958c:	2b06      	cmp	r3, #6
 800958e:	d901      	bls.n	8009594 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009590:	2306      	movs	r3, #6
 8009592:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009598:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800959e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80095a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a2:	2200      	movs	r2, #0
 80095a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80095a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a8:	3304      	adds	r3, #4
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe fece 	bl	800834c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80095b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b2:	3318      	adds	r3, #24
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fe fec9 	bl	800834c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80095ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c2:	f1c3 0207 	rsb	r2, r3, #7
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80095ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80095d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d2:	2200      	movs	r2, #0
 80095d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	68f9      	ldr	r1, [r7, #12]
 80095e2:	69b8      	ldr	r0, [r7, #24]
 80095e4:	f001 fada 	bl	800ab9c <pxPortInitialiseStack>
 80095e8:	4602      	mov	r2, r0
 80095ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80095ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80095f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095fa:	bf00      	nop
 80095fc:	3720      	adds	r7, #32
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
	...

08009604 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800960c:	f001 fbf2 	bl	800adf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009610:	4b2a      	ldr	r3, [pc, #168]	; (80096bc <prvAddNewTaskToReadyList+0xb8>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3301      	adds	r3, #1
 8009616:	4a29      	ldr	r2, [pc, #164]	; (80096bc <prvAddNewTaskToReadyList+0xb8>)
 8009618:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800961a:	4b29      	ldr	r3, [pc, #164]	; (80096c0 <prvAddNewTaskToReadyList+0xbc>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d109      	bne.n	8009636 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009622:	4a27      	ldr	r2, [pc, #156]	; (80096c0 <prvAddNewTaskToReadyList+0xbc>)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009628:	4b24      	ldr	r3, [pc, #144]	; (80096bc <prvAddNewTaskToReadyList+0xb8>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d110      	bne.n	8009652 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009630:	f000 fc08 	bl	8009e44 <prvInitialiseTaskLists>
 8009634:	e00d      	b.n	8009652 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009636:	4b23      	ldr	r3, [pc, #140]	; (80096c4 <prvAddNewTaskToReadyList+0xc0>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d109      	bne.n	8009652 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800963e:	4b20      	ldr	r3, [pc, #128]	; (80096c0 <prvAddNewTaskToReadyList+0xbc>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009648:	429a      	cmp	r2, r3
 800964a:	d802      	bhi.n	8009652 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800964c:	4a1c      	ldr	r2, [pc, #112]	; (80096c0 <prvAddNewTaskToReadyList+0xbc>)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009652:	4b1d      	ldr	r3, [pc, #116]	; (80096c8 <prvAddNewTaskToReadyList+0xc4>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3301      	adds	r3, #1
 8009658:	4a1b      	ldr	r2, [pc, #108]	; (80096c8 <prvAddNewTaskToReadyList+0xc4>)
 800965a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009660:	2201      	movs	r2, #1
 8009662:	409a      	lsls	r2, r3
 8009664:	4b19      	ldr	r3, [pc, #100]	; (80096cc <prvAddNewTaskToReadyList+0xc8>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4313      	orrs	r3, r2
 800966a:	4a18      	ldr	r2, [pc, #96]	; (80096cc <prvAddNewTaskToReadyList+0xc8>)
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009672:	4613      	mov	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4a15      	ldr	r2, [pc, #84]	; (80096d0 <prvAddNewTaskToReadyList+0xcc>)
 800967c:	441a      	add	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	3304      	adds	r3, #4
 8009682:	4619      	mov	r1, r3
 8009684:	4610      	mov	r0, r2
 8009686:	f7fe fe6e 	bl	8008366 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800968a:	f001 fbe3 	bl	800ae54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800968e:	4b0d      	ldr	r3, [pc, #52]	; (80096c4 <prvAddNewTaskToReadyList+0xc0>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00e      	beq.n	80096b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009696:	4b0a      	ldr	r3, [pc, #40]	; (80096c0 <prvAddNewTaskToReadyList+0xbc>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d207      	bcs.n	80096b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096a4:	4b0b      	ldr	r3, [pc, #44]	; (80096d4 <prvAddNewTaskToReadyList+0xd0>)
 80096a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	20000898 	.word	0x20000898
 80096c0:	20000798 	.word	0x20000798
 80096c4:	200008a4 	.word	0x200008a4
 80096c8:	200008b4 	.word	0x200008b4
 80096cc:	200008a0 	.word	0x200008a0
 80096d0:	2000079c 	.word	0x2000079c
 80096d4:	e000ed04 	.word	0xe000ed04

080096d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80096e0:	2300      	movs	r3, #0
 80096e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d017      	beq.n	800971a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80096ea:	4b13      	ldr	r3, [pc, #76]	; (8009738 <vTaskDelay+0x60>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00a      	beq.n	8009708 <vTaskDelay+0x30>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	60bb      	str	r3, [r7, #8]
}
 8009704:	bf00      	nop
 8009706:	e7fe      	b.n	8009706 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009708:	f000 f880 	bl	800980c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800970c:	2100      	movs	r1, #0
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fe12 	bl	800a338 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009714:	f000 f888 	bl	8009828 <xTaskResumeAll>
 8009718:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d107      	bne.n	8009730 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009720:	4b06      	ldr	r3, [pc, #24]	; (800973c <vTaskDelay+0x64>)
 8009722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009726:	601a      	str	r2, [r3, #0]
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009730:	bf00      	nop
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	200008c0 	.word	0x200008c0
 800973c:	e000ed04 	.word	0xe000ed04

08009740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08a      	sub	sp, #40	; 0x28
 8009744:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009746:	2300      	movs	r3, #0
 8009748:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800974a:	2300      	movs	r3, #0
 800974c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800974e:	463a      	mov	r2, r7
 8009750:	1d39      	adds	r1, r7, #4
 8009752:	f107 0308 	add.w	r3, r7, #8
 8009756:	4618      	mov	r0, r3
 8009758:	f7f7 f8f2 	bl	8000940 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	9202      	str	r2, [sp, #8]
 8009764:	9301      	str	r3, [sp, #4]
 8009766:	2300      	movs	r3, #0
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	2300      	movs	r3, #0
 800976c:	460a      	mov	r2, r1
 800976e:	4921      	ldr	r1, [pc, #132]	; (80097f4 <vTaskStartScheduler+0xb4>)
 8009770:	4821      	ldr	r0, [pc, #132]	; (80097f8 <vTaskStartScheduler+0xb8>)
 8009772:	f7ff fe1d 	bl	80093b0 <xTaskCreateStatic>
 8009776:	4603      	mov	r3, r0
 8009778:	4a20      	ldr	r2, [pc, #128]	; (80097fc <vTaskStartScheduler+0xbc>)
 800977a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800977c:	4b1f      	ldr	r3, [pc, #124]	; (80097fc <vTaskStartScheduler+0xbc>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009784:	2301      	movs	r3, #1
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	e001      	b.n	800978e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800978a:	2300      	movs	r3, #0
 800978c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d102      	bne.n	800979a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009794:	f000 fe36 	bl	800a404 <xTimerCreateTimerTask>
 8009798:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d116      	bne.n	80097ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	613b      	str	r3, [r7, #16]
}
 80097b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80097b4:	4b12      	ldr	r3, [pc, #72]	; (8009800 <vTaskStartScheduler+0xc0>)
 80097b6:	f04f 32ff 	mov.w	r2, #4294967295
 80097ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097bc:	4b11      	ldr	r3, [pc, #68]	; (8009804 <vTaskStartScheduler+0xc4>)
 80097be:	2201      	movs	r2, #1
 80097c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80097c2:	4b11      	ldr	r3, [pc, #68]	; (8009808 <vTaskStartScheduler+0xc8>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80097c8:	f001 fa72 	bl	800acb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80097cc:	e00e      	b.n	80097ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d10a      	bne.n	80097ec <vTaskStartScheduler+0xac>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	60fb      	str	r3, [r7, #12]
}
 80097e8:	bf00      	nop
 80097ea:	e7fe      	b.n	80097ea <vTaskStartScheduler+0xaa>
}
 80097ec:	bf00      	nop
 80097ee:	3718      	adds	r7, #24
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	0800bfb4 	.word	0x0800bfb4
 80097f8:	08009e15 	.word	0x08009e15
 80097fc:	200008bc 	.word	0x200008bc
 8009800:	200008b8 	.word	0x200008b8
 8009804:	200008a4 	.word	0x200008a4
 8009808:	2000089c 	.word	0x2000089c

0800980c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800980c:	b480      	push	{r7}
 800980e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009810:	4b04      	ldr	r3, [pc, #16]	; (8009824 <vTaskSuspendAll+0x18>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3301      	adds	r3, #1
 8009816:	4a03      	ldr	r2, [pc, #12]	; (8009824 <vTaskSuspendAll+0x18>)
 8009818:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800981a:	bf00      	nop
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	200008c0 	.word	0x200008c0

08009828 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800982e:	2300      	movs	r3, #0
 8009830:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009832:	2300      	movs	r3, #0
 8009834:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009836:	4b41      	ldr	r3, [pc, #260]	; (800993c <xTaskResumeAll+0x114>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10a      	bne.n	8009854 <xTaskResumeAll+0x2c>
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	603b      	str	r3, [r7, #0]
}
 8009850:	bf00      	nop
 8009852:	e7fe      	b.n	8009852 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009854:	f001 face 	bl	800adf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009858:	4b38      	ldr	r3, [pc, #224]	; (800993c <xTaskResumeAll+0x114>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3b01      	subs	r3, #1
 800985e:	4a37      	ldr	r2, [pc, #220]	; (800993c <xTaskResumeAll+0x114>)
 8009860:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009862:	4b36      	ldr	r3, [pc, #216]	; (800993c <xTaskResumeAll+0x114>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d161      	bne.n	800992e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800986a:	4b35      	ldr	r3, [pc, #212]	; (8009940 <xTaskResumeAll+0x118>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d05d      	beq.n	800992e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009872:	e02e      	b.n	80098d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009874:	4b33      	ldr	r3, [pc, #204]	; (8009944 <xTaskResumeAll+0x11c>)
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	3318      	adds	r3, #24
 8009880:	4618      	mov	r0, r3
 8009882:	f7fe fdcd 	bl	8008420 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3304      	adds	r3, #4
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe fdc8 	bl	8008420 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009894:	2201      	movs	r2, #1
 8009896:	409a      	lsls	r2, r3
 8009898:	4b2b      	ldr	r3, [pc, #172]	; (8009948 <xTaskResumeAll+0x120>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4313      	orrs	r3, r2
 800989e:	4a2a      	ldr	r2, [pc, #168]	; (8009948 <xTaskResumeAll+0x120>)
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a6:	4613      	mov	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4a27      	ldr	r2, [pc, #156]	; (800994c <xTaskResumeAll+0x124>)
 80098b0:	441a      	add	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3304      	adds	r3, #4
 80098b6:	4619      	mov	r1, r3
 80098b8:	4610      	mov	r0, r2
 80098ba:	f7fe fd54 	bl	8008366 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c2:	4b23      	ldr	r3, [pc, #140]	; (8009950 <xTaskResumeAll+0x128>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d302      	bcc.n	80098d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80098cc:	4b21      	ldr	r3, [pc, #132]	; (8009954 <xTaskResumeAll+0x12c>)
 80098ce:	2201      	movs	r2, #1
 80098d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098d2:	4b1c      	ldr	r3, [pc, #112]	; (8009944 <xTaskResumeAll+0x11c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1cc      	bne.n	8009874 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d001      	beq.n	80098e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098e0:	f000 fb4e 	bl	8009f80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80098e4:	4b1c      	ldr	r3, [pc, #112]	; (8009958 <xTaskResumeAll+0x130>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d010      	beq.n	8009912 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098f0:	f000 f846 	bl	8009980 <xTaskIncrementTick>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80098fa:	4b16      	ldr	r3, [pc, #88]	; (8009954 <xTaskResumeAll+0x12c>)
 80098fc:	2201      	movs	r2, #1
 80098fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3b01      	subs	r3, #1
 8009904:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1f1      	bne.n	80098f0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800990c:	4b12      	ldr	r3, [pc, #72]	; (8009958 <xTaskResumeAll+0x130>)
 800990e:	2200      	movs	r2, #0
 8009910:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009912:	4b10      	ldr	r3, [pc, #64]	; (8009954 <xTaskResumeAll+0x12c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d009      	beq.n	800992e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800991a:	2301      	movs	r3, #1
 800991c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800991e:	4b0f      	ldr	r3, [pc, #60]	; (800995c <xTaskResumeAll+0x134>)
 8009920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800992e:	f001 fa91 	bl	800ae54 <vPortExitCritical>

	return xAlreadyYielded;
 8009932:	68bb      	ldr	r3, [r7, #8]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	200008c0 	.word	0x200008c0
 8009940:	20000898 	.word	0x20000898
 8009944:	20000858 	.word	0x20000858
 8009948:	200008a0 	.word	0x200008a0
 800994c:	2000079c 	.word	0x2000079c
 8009950:	20000798 	.word	0x20000798
 8009954:	200008ac 	.word	0x200008ac
 8009958:	200008a8 	.word	0x200008a8
 800995c:	e000ed04 	.word	0xe000ed04

08009960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009966:	4b05      	ldr	r3, [pc, #20]	; (800997c <xTaskGetTickCount+0x1c>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800996c:	687b      	ldr	r3, [r7, #4]
}
 800996e:	4618      	mov	r0, r3
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	2000089c 	.word	0x2000089c

08009980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009986:	2300      	movs	r3, #0
 8009988:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800998a:	4b4e      	ldr	r3, [pc, #312]	; (8009ac4 <xTaskIncrementTick+0x144>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	f040 808e 	bne.w	8009ab0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009994:	4b4c      	ldr	r3, [pc, #304]	; (8009ac8 <xTaskIncrementTick+0x148>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3301      	adds	r3, #1
 800999a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800999c:	4a4a      	ldr	r2, [pc, #296]	; (8009ac8 <xTaskIncrementTick+0x148>)
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d120      	bne.n	80099ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80099a8:	4b48      	ldr	r3, [pc, #288]	; (8009acc <xTaskIncrementTick+0x14c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00a      	beq.n	80099c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	603b      	str	r3, [r7, #0]
}
 80099c4:	bf00      	nop
 80099c6:	e7fe      	b.n	80099c6 <xTaskIncrementTick+0x46>
 80099c8:	4b40      	ldr	r3, [pc, #256]	; (8009acc <xTaskIncrementTick+0x14c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	60fb      	str	r3, [r7, #12]
 80099ce:	4b40      	ldr	r3, [pc, #256]	; (8009ad0 <xTaskIncrementTick+0x150>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a3e      	ldr	r2, [pc, #248]	; (8009acc <xTaskIncrementTick+0x14c>)
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	4a3e      	ldr	r2, [pc, #248]	; (8009ad0 <xTaskIncrementTick+0x150>)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	4b3d      	ldr	r3, [pc, #244]	; (8009ad4 <xTaskIncrementTick+0x154>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3301      	adds	r3, #1
 80099e2:	4a3c      	ldr	r2, [pc, #240]	; (8009ad4 <xTaskIncrementTick+0x154>)
 80099e4:	6013      	str	r3, [r2, #0]
 80099e6:	f000 facb 	bl	8009f80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80099ea:	4b3b      	ldr	r3, [pc, #236]	; (8009ad8 <xTaskIncrementTick+0x158>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d348      	bcc.n	8009a86 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099f4:	4b35      	ldr	r3, [pc, #212]	; (8009acc <xTaskIncrementTick+0x14c>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d104      	bne.n	8009a08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099fe:	4b36      	ldr	r3, [pc, #216]	; (8009ad8 <xTaskIncrementTick+0x158>)
 8009a00:	f04f 32ff 	mov.w	r2, #4294967295
 8009a04:	601a      	str	r2, [r3, #0]
					break;
 8009a06:	e03e      	b.n	8009a86 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a08:	4b30      	ldr	r3, [pc, #192]	; (8009acc <xTaskIncrementTick+0x14c>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d203      	bcs.n	8009a28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a20:	4a2d      	ldr	r2, [pc, #180]	; (8009ad8 <xTaskIncrementTick+0x158>)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a26:	e02e      	b.n	8009a86 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fe fcf7 	bl	8008420 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d004      	beq.n	8009a44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	3318      	adds	r3, #24
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fcee 	bl	8008420 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a48:	2201      	movs	r2, #1
 8009a4a:	409a      	lsls	r2, r3
 8009a4c:	4b23      	ldr	r3, [pc, #140]	; (8009adc <xTaskIncrementTick+0x15c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	4a22      	ldr	r2, [pc, #136]	; (8009adc <xTaskIncrementTick+0x15c>)
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4413      	add	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4a1f      	ldr	r2, [pc, #124]	; (8009ae0 <xTaskIncrementTick+0x160>)
 8009a64:	441a      	add	r2, r3
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	3304      	adds	r3, #4
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	f7fe fc7a 	bl	8008366 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a76:	4b1b      	ldr	r3, [pc, #108]	; (8009ae4 <xTaskIncrementTick+0x164>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d3b9      	bcc.n	80099f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009a80:	2301      	movs	r3, #1
 8009a82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a84:	e7b6      	b.n	80099f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a86:	4b17      	ldr	r3, [pc, #92]	; (8009ae4 <xTaskIncrementTick+0x164>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a8c:	4914      	ldr	r1, [pc, #80]	; (8009ae0 <xTaskIncrementTick+0x160>)
 8009a8e:	4613      	mov	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	440b      	add	r3, r1
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d901      	bls.n	8009aa2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009aa2:	4b11      	ldr	r3, [pc, #68]	; (8009ae8 <xTaskIncrementTick+0x168>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d007      	beq.n	8009aba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	617b      	str	r3, [r7, #20]
 8009aae:	e004      	b.n	8009aba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ab0:	4b0e      	ldr	r3, [pc, #56]	; (8009aec <xTaskIncrementTick+0x16c>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	4a0d      	ldr	r2, [pc, #52]	; (8009aec <xTaskIncrementTick+0x16c>)
 8009ab8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009aba:	697b      	ldr	r3, [r7, #20]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	200008c0 	.word	0x200008c0
 8009ac8:	2000089c 	.word	0x2000089c
 8009acc:	20000850 	.word	0x20000850
 8009ad0:	20000854 	.word	0x20000854
 8009ad4:	200008b0 	.word	0x200008b0
 8009ad8:	200008b8 	.word	0x200008b8
 8009adc:	200008a0 	.word	0x200008a0
 8009ae0:	2000079c 	.word	0x2000079c
 8009ae4:	20000798 	.word	0x20000798
 8009ae8:	200008ac 	.word	0x200008ac
 8009aec:	200008a8 	.word	0x200008a8

08009af0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009af0:	b480      	push	{r7}
 8009af2:	b087      	sub	sp, #28
 8009af4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009af6:	4b27      	ldr	r3, [pc, #156]	; (8009b94 <vTaskSwitchContext+0xa4>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009afe:	4b26      	ldr	r3, [pc, #152]	; (8009b98 <vTaskSwitchContext+0xa8>)
 8009b00:	2201      	movs	r2, #1
 8009b02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b04:	e03f      	b.n	8009b86 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009b06:	4b24      	ldr	r3, [pc, #144]	; (8009b98 <vTaskSwitchContext+0xa8>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b0c:	4b23      	ldr	r3, [pc, #140]	; (8009b9c <vTaskSwitchContext+0xac>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	fab3 f383 	clz	r3, r3
 8009b18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009b1a:	7afb      	ldrb	r3, [r7, #11]
 8009b1c:	f1c3 031f 	rsb	r3, r3, #31
 8009b20:	617b      	str	r3, [r7, #20]
 8009b22:	491f      	ldr	r1, [pc, #124]	; (8009ba0 <vTaskSwitchContext+0xb0>)
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	4613      	mov	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	440b      	add	r3, r1
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10a      	bne.n	8009b4c <vTaskSwitchContext+0x5c>
	__asm volatile
 8009b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	607b      	str	r3, [r7, #4]
}
 8009b48:	bf00      	nop
 8009b4a:	e7fe      	b.n	8009b4a <vTaskSwitchContext+0x5a>
 8009b4c:	697a      	ldr	r2, [r7, #20]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4a12      	ldr	r2, [pc, #72]	; (8009ba0 <vTaskSwitchContext+0xb0>)
 8009b58:	4413      	add	r3, r2
 8009b5a:	613b      	str	r3, [r7, #16]
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	605a      	str	r2, [r3, #4]
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	685a      	ldr	r2, [r3, #4]
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	3308      	adds	r3, #8
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d104      	bne.n	8009b7c <vTaskSwitchContext+0x8c>
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	685a      	ldr	r2, [r3, #4]
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	605a      	str	r2, [r3, #4]
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	4a08      	ldr	r2, [pc, #32]	; (8009ba4 <vTaskSwitchContext+0xb4>)
 8009b84:	6013      	str	r3, [r2, #0]
}
 8009b86:	bf00      	nop
 8009b88:	371c      	adds	r7, #28
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	200008c0 	.word	0x200008c0
 8009b98:	200008ac 	.word	0x200008ac
 8009b9c:	200008a0 	.word	0x200008a0
 8009ba0:	2000079c 	.word	0x2000079c
 8009ba4:	20000798 	.word	0x20000798

08009ba8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10a      	bne.n	8009bce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	60fb      	str	r3, [r7, #12]
}
 8009bca:	bf00      	nop
 8009bcc:	e7fe      	b.n	8009bcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bce:	4b07      	ldr	r3, [pc, #28]	; (8009bec <vTaskPlaceOnEventList+0x44>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3318      	adds	r3, #24
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f7fe fbe9 	bl	80083ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009bdc:	2101      	movs	r1, #1
 8009bde:	6838      	ldr	r0, [r7, #0]
 8009be0:	f000 fbaa 	bl	800a338 <prvAddCurrentTaskToDelayedList>
}
 8009be4:	bf00      	nop
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	20000798 	.word	0x20000798

08009bf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10a      	bne.n	8009c18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	617b      	str	r3, [r7, #20]
}
 8009c14:	bf00      	nop
 8009c16:	e7fe      	b.n	8009c16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c18:	4b0a      	ldr	r3, [pc, #40]	; (8009c44 <vTaskPlaceOnEventListRestricted+0x54>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3318      	adds	r3, #24
 8009c1e:	4619      	mov	r1, r3
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f7fe fba0 	bl	8008366 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c32:	6879      	ldr	r1, [r7, #4]
 8009c34:	68b8      	ldr	r0, [r7, #8]
 8009c36:	f000 fb7f 	bl	800a338 <prvAddCurrentTaskToDelayedList>
	}
 8009c3a:	bf00      	nop
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	20000798 	.word	0x20000798

08009c48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10a      	bne.n	8009c74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	60fb      	str	r3, [r7, #12]
}
 8009c70:	bf00      	nop
 8009c72:	e7fe      	b.n	8009c72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	3318      	adds	r3, #24
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fe fbd1 	bl	8008420 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c7e:	4b1d      	ldr	r3, [pc, #116]	; (8009cf4 <xTaskRemoveFromEventList+0xac>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d11c      	bne.n	8009cc0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe fbc8 	bl	8008420 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c94:	2201      	movs	r2, #1
 8009c96:	409a      	lsls	r2, r3
 8009c98:	4b17      	ldr	r3, [pc, #92]	; (8009cf8 <xTaskRemoveFromEventList+0xb0>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	4a16      	ldr	r2, [pc, #88]	; (8009cf8 <xTaskRemoveFromEventList+0xb0>)
 8009ca0:	6013      	str	r3, [r2, #0]
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4a13      	ldr	r2, [pc, #76]	; (8009cfc <xTaskRemoveFromEventList+0xb4>)
 8009cb0:	441a      	add	r2, r3
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	4610      	mov	r0, r2
 8009cba:	f7fe fb54 	bl	8008366 <vListInsertEnd>
 8009cbe:	e005      	b.n	8009ccc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	3318      	adds	r3, #24
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	480e      	ldr	r0, [pc, #56]	; (8009d00 <xTaskRemoveFromEventList+0xb8>)
 8009cc8:	f7fe fb4d 	bl	8008366 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd0:	4b0c      	ldr	r3, [pc, #48]	; (8009d04 <xTaskRemoveFromEventList+0xbc>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d905      	bls.n	8009ce6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009cde:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <xTaskRemoveFromEventList+0xc0>)
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	e001      	b.n	8009cea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009cea:	697b      	ldr	r3, [r7, #20]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3718      	adds	r7, #24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	200008c0 	.word	0x200008c0
 8009cf8:	200008a0 	.word	0x200008a0
 8009cfc:	2000079c 	.word	0x2000079c
 8009d00:	20000858 	.word	0x20000858
 8009d04:	20000798 	.word	0x20000798
 8009d08:	200008ac 	.word	0x200008ac

08009d0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d14:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <vTaskInternalSetTimeOutState+0x24>)
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d1c:	4b05      	ldr	r3, [pc, #20]	; (8009d34 <vTaskInternalSetTimeOutState+0x28>)
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	605a      	str	r2, [r3, #4]
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr
 8009d30:	200008b0 	.word	0x200008b0
 8009d34:	2000089c 	.word	0x2000089c

08009d38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b088      	sub	sp, #32
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10a      	bne.n	8009d5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	613b      	str	r3, [r7, #16]
}
 8009d5a:	bf00      	nop
 8009d5c:	e7fe      	b.n	8009d5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10a      	bne.n	8009d7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	60fb      	str	r3, [r7, #12]
}
 8009d76:	bf00      	nop
 8009d78:	e7fe      	b.n	8009d78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009d7a:	f001 f83b 	bl	800adf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d7e:	4b1d      	ldr	r3, [pc, #116]	; (8009df4 <xTaskCheckForTimeOut+0xbc>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	69ba      	ldr	r2, [r7, #24]
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d96:	d102      	bne.n	8009d9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	61fb      	str	r3, [r7, #28]
 8009d9c:	e023      	b.n	8009de6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	4b15      	ldr	r3, [pc, #84]	; (8009df8 <xTaskCheckForTimeOut+0xc0>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d007      	beq.n	8009dba <xTaskCheckForTimeOut+0x82>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	69ba      	ldr	r2, [r7, #24]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d302      	bcc.n	8009dba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009db4:	2301      	movs	r3, #1
 8009db6:	61fb      	str	r3, [r7, #28]
 8009db8:	e015      	b.n	8009de6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d20b      	bcs.n	8009ddc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	1ad2      	subs	r2, r2, r3
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff ff9b 	bl	8009d0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	61fb      	str	r3, [r7, #28]
 8009dda:	e004      	b.n	8009de6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	2200      	movs	r2, #0
 8009de0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009de2:	2301      	movs	r3, #1
 8009de4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009de6:	f001 f835 	bl	800ae54 <vPortExitCritical>

	return xReturn;
 8009dea:	69fb      	ldr	r3, [r7, #28]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3720      	adds	r7, #32
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	2000089c 	.word	0x2000089c
 8009df8:	200008b0 	.word	0x200008b0

08009dfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009e00:	4b03      	ldr	r3, [pc, #12]	; (8009e10 <vTaskMissedYield+0x14>)
 8009e02:	2201      	movs	r2, #1
 8009e04:	601a      	str	r2, [r3, #0]
}
 8009e06:	bf00      	nop
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	200008ac 	.word	0x200008ac

08009e14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e1c:	f000 f852 	bl	8009ec4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e20:	4b06      	ldr	r3, [pc, #24]	; (8009e3c <prvIdleTask+0x28>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d9f9      	bls.n	8009e1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e28:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <prvIdleTask+0x2c>)
 8009e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e2e:	601a      	str	r2, [r3, #0]
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e38:	e7f0      	b.n	8009e1c <prvIdleTask+0x8>
 8009e3a:	bf00      	nop
 8009e3c:	2000079c 	.word	0x2000079c
 8009e40:	e000ed04 	.word	0xe000ed04

08009e44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	607b      	str	r3, [r7, #4]
 8009e4e:	e00c      	b.n	8009e6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	4613      	mov	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	4413      	add	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4a12      	ldr	r2, [pc, #72]	; (8009ea4 <prvInitialiseTaskLists+0x60>)
 8009e5c:	4413      	add	r3, r2
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fa54 	bl	800830c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3301      	adds	r3, #1
 8009e68:	607b      	str	r3, [r7, #4]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b06      	cmp	r3, #6
 8009e6e:	d9ef      	bls.n	8009e50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e70:	480d      	ldr	r0, [pc, #52]	; (8009ea8 <prvInitialiseTaskLists+0x64>)
 8009e72:	f7fe fa4b 	bl	800830c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e76:	480d      	ldr	r0, [pc, #52]	; (8009eac <prvInitialiseTaskLists+0x68>)
 8009e78:	f7fe fa48 	bl	800830c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e7c:	480c      	ldr	r0, [pc, #48]	; (8009eb0 <prvInitialiseTaskLists+0x6c>)
 8009e7e:	f7fe fa45 	bl	800830c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e82:	480c      	ldr	r0, [pc, #48]	; (8009eb4 <prvInitialiseTaskLists+0x70>)
 8009e84:	f7fe fa42 	bl	800830c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e88:	480b      	ldr	r0, [pc, #44]	; (8009eb8 <prvInitialiseTaskLists+0x74>)
 8009e8a:	f7fe fa3f 	bl	800830c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e8e:	4b0b      	ldr	r3, [pc, #44]	; (8009ebc <prvInitialiseTaskLists+0x78>)
 8009e90:	4a05      	ldr	r2, [pc, #20]	; (8009ea8 <prvInitialiseTaskLists+0x64>)
 8009e92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e94:	4b0a      	ldr	r3, [pc, #40]	; (8009ec0 <prvInitialiseTaskLists+0x7c>)
 8009e96:	4a05      	ldr	r2, [pc, #20]	; (8009eac <prvInitialiseTaskLists+0x68>)
 8009e98:	601a      	str	r2, [r3, #0]
}
 8009e9a:	bf00      	nop
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	2000079c 	.word	0x2000079c
 8009ea8:	20000828 	.word	0x20000828
 8009eac:	2000083c 	.word	0x2000083c
 8009eb0:	20000858 	.word	0x20000858
 8009eb4:	2000086c 	.word	0x2000086c
 8009eb8:	20000884 	.word	0x20000884
 8009ebc:	20000850 	.word	0x20000850
 8009ec0:	20000854 	.word	0x20000854

08009ec4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009eca:	e019      	b.n	8009f00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ecc:	f000 ff92 	bl	800adf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ed0:	4b10      	ldr	r3, [pc, #64]	; (8009f14 <prvCheckTasksWaitingTermination+0x50>)
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	3304      	adds	r3, #4
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fe fa9f 	bl	8008420 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009ee2:	4b0d      	ldr	r3, [pc, #52]	; (8009f18 <prvCheckTasksWaitingTermination+0x54>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	4a0b      	ldr	r2, [pc, #44]	; (8009f18 <prvCheckTasksWaitingTermination+0x54>)
 8009eea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009eec:	4b0b      	ldr	r3, [pc, #44]	; (8009f1c <prvCheckTasksWaitingTermination+0x58>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	4a0a      	ldr	r2, [pc, #40]	; (8009f1c <prvCheckTasksWaitingTermination+0x58>)
 8009ef4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ef6:	f000 ffad 	bl	800ae54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f810 	bl	8009f20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f00:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <prvCheckTasksWaitingTermination+0x58>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1e1      	bne.n	8009ecc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f08:	bf00      	nop
 8009f0a:	bf00      	nop
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	2000086c 	.word	0x2000086c
 8009f18:	20000898 	.word	0x20000898
 8009f1c:	20000880 	.word	0x20000880

08009f20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d108      	bne.n	8009f44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f36:	4618      	mov	r0, r3
 8009f38:	f001 f94a 	bl	800b1d0 <vPortFree>
				vPortFree( pxTCB );
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 f947 	bl	800b1d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f42:	e018      	b.n	8009f76 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d103      	bne.n	8009f56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f001 f93e 	bl	800b1d0 <vPortFree>
	}
 8009f54:	e00f      	b.n	8009f76 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d00a      	beq.n	8009f76 <prvDeleteTCB+0x56>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	60fb      	str	r3, [r7, #12]
}
 8009f72:	bf00      	nop
 8009f74:	e7fe      	b.n	8009f74 <prvDeleteTCB+0x54>
	}
 8009f76:	bf00      	nop
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
	...

08009f80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f86:	4b0c      	ldr	r3, [pc, #48]	; (8009fb8 <prvResetNextTaskUnblockTime+0x38>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d104      	bne.n	8009f9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f90:	4b0a      	ldr	r3, [pc, #40]	; (8009fbc <prvResetNextTaskUnblockTime+0x3c>)
 8009f92:	f04f 32ff 	mov.w	r2, #4294967295
 8009f96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f98:	e008      	b.n	8009fac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f9a:	4b07      	ldr	r3, [pc, #28]	; (8009fb8 <prvResetNextTaskUnblockTime+0x38>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	4a04      	ldr	r2, [pc, #16]	; (8009fbc <prvResetNextTaskUnblockTime+0x3c>)
 8009faa:	6013      	str	r3, [r2, #0]
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	20000850 	.word	0x20000850
 8009fbc:	200008b8 	.word	0x200008b8

08009fc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009fc6:	4b0b      	ldr	r3, [pc, #44]	; (8009ff4 <xTaskGetSchedulerState+0x34>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d102      	bne.n	8009fd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	607b      	str	r3, [r7, #4]
 8009fd2:	e008      	b.n	8009fe6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fd4:	4b08      	ldr	r3, [pc, #32]	; (8009ff8 <xTaskGetSchedulerState+0x38>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d102      	bne.n	8009fe2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009fdc:	2302      	movs	r3, #2
 8009fde:	607b      	str	r3, [r7, #4]
 8009fe0:	e001      	b.n	8009fe6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009fe6:	687b      	ldr	r3, [r7, #4]
	}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	200008a4 	.word	0x200008a4
 8009ff8:	200008c0 	.word	0x200008c0

08009ffc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a008:	2300      	movs	r3, #0
 800a00a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d05e      	beq.n	800a0d0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a016:	4b31      	ldr	r3, [pc, #196]	; (800a0dc <xTaskPriorityInherit+0xe0>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d24e      	bcs.n	800a0be <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	2b00      	cmp	r3, #0
 800a026:	db06      	blt.n	800a036 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a028:	4b2c      	ldr	r3, [pc, #176]	; (800a0dc <xTaskPriorityInherit+0xe0>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02e:	f1c3 0207 	rsb	r2, r3, #7
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	6959      	ldr	r1, [r3, #20]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03e:	4613      	mov	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	4413      	add	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4a26      	ldr	r2, [pc, #152]	; (800a0e0 <xTaskPriorityInherit+0xe4>)
 800a048:	4413      	add	r3, r2
 800a04a:	4299      	cmp	r1, r3
 800a04c:	d12f      	bne.n	800a0ae <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	3304      	adds	r3, #4
 800a052:	4618      	mov	r0, r3
 800a054:	f7fe f9e4 	bl	8008420 <uxListRemove>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10a      	bne.n	800a074 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a062:	2201      	movs	r2, #1
 800a064:	fa02 f303 	lsl.w	r3, r2, r3
 800a068:	43da      	mvns	r2, r3
 800a06a:	4b1e      	ldr	r3, [pc, #120]	; (800a0e4 <xTaskPriorityInherit+0xe8>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4013      	ands	r3, r2
 800a070:	4a1c      	ldr	r2, [pc, #112]	; (800a0e4 <xTaskPriorityInherit+0xe8>)
 800a072:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a074:	4b19      	ldr	r3, [pc, #100]	; (800a0dc <xTaskPriorityInherit+0xe0>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a082:	2201      	movs	r2, #1
 800a084:	409a      	lsls	r2, r3
 800a086:	4b17      	ldr	r3, [pc, #92]	; (800a0e4 <xTaskPriorityInherit+0xe8>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	4a15      	ldr	r2, [pc, #84]	; (800a0e4 <xTaskPriorityInherit+0xe8>)
 800a08e:	6013      	str	r3, [r2, #0]
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a094:	4613      	mov	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4a10      	ldr	r2, [pc, #64]	; (800a0e0 <xTaskPriorityInherit+0xe4>)
 800a09e:	441a      	add	r2, r3
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	f7fe f95d 	bl	8008366 <vListInsertEnd>
 800a0ac:	e004      	b.n	800a0b8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a0ae:	4b0b      	ldr	r3, [pc, #44]	; (800a0dc <xTaskPriorityInherit+0xe0>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	60fb      	str	r3, [r7, #12]
 800a0bc:	e008      	b.n	800a0d0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0c2:	4b06      	ldr	r3, [pc, #24]	; (800a0dc <xTaskPriorityInherit+0xe0>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d201      	bcs.n	800a0d0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
	}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20000798 	.word	0x20000798
 800a0e0:	2000079c 	.word	0x2000079c
 800a0e4:	200008a0 	.word	0x200008a0

0800a0e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d06e      	beq.n	800a1dc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a0fe:	4b3a      	ldr	r3, [pc, #232]	; (800a1e8 <xTaskPriorityDisinherit+0x100>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	429a      	cmp	r2, r3
 800a106:	d00a      	beq.n	800a11e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	60fb      	str	r3, [r7, #12]
}
 800a11a:	bf00      	nop
 800a11c:	e7fe      	b.n	800a11c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10a      	bne.n	800a13c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	60bb      	str	r3, [r7, #8]
}
 800a138:	bf00      	nop
 800a13a:	e7fe      	b.n	800a13a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a140:	1e5a      	subs	r2, r3, #1
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a14e:	429a      	cmp	r2, r3
 800a150:	d044      	beq.n	800a1dc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a156:	2b00      	cmp	r3, #0
 800a158:	d140      	bne.n	800a1dc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	3304      	adds	r3, #4
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe f95e 	bl	8008420 <uxListRemove>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d115      	bne.n	800a196 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a16e:	491f      	ldr	r1, [pc, #124]	; (800a1ec <xTaskPriorityDisinherit+0x104>)
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	440b      	add	r3, r1
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10a      	bne.n	800a196 <xTaskPriorityDisinherit+0xae>
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a184:	2201      	movs	r2, #1
 800a186:	fa02 f303 	lsl.w	r3, r2, r3
 800a18a:	43da      	mvns	r2, r3
 800a18c:	4b18      	ldr	r3, [pc, #96]	; (800a1f0 <xTaskPriorityDisinherit+0x108>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4013      	ands	r3, r2
 800a192:	4a17      	ldr	r2, [pc, #92]	; (800a1f0 <xTaskPriorityDisinherit+0x108>)
 800a194:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a2:	f1c3 0207 	rsb	r2, r3, #7
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	409a      	lsls	r2, r3
 800a1b2:	4b0f      	ldr	r3, [pc, #60]	; (800a1f0 <xTaskPriorityDisinherit+0x108>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	4a0d      	ldr	r2, [pc, #52]	; (800a1f0 <xTaskPriorityDisinherit+0x108>)
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4413      	add	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4a08      	ldr	r2, [pc, #32]	; (800a1ec <xTaskPriorityDisinherit+0x104>)
 800a1ca:	441a      	add	r2, r3
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	4610      	mov	r0, r2
 800a1d4:	f7fe f8c7 	bl	8008366 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a1dc:	697b      	ldr	r3, [r7, #20]
	}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3718      	adds	r7, #24
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	20000798 	.word	0x20000798
 800a1ec:	2000079c 	.word	0x2000079c
 800a1f0:	200008a0 	.word	0x200008a0

0800a1f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b088      	sub	sp, #32
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a202:	2301      	movs	r3, #1
 800a204:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d077      	beq.n	800a2fc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10a      	bne.n	800a22a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	60fb      	str	r3, [r7, #12]
}
 800a226:	bf00      	nop
 800a228:	e7fe      	b.n	800a228 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a22e:	683a      	ldr	r2, [r7, #0]
 800a230:	429a      	cmp	r2, r3
 800a232:	d902      	bls.n	800a23a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	61fb      	str	r3, [r7, #28]
 800a238:	e002      	b.n	800a240 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a23e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a244:	69fa      	ldr	r2, [r7, #28]
 800a246:	429a      	cmp	r2, r3
 800a248:	d058      	beq.n	800a2fc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	429a      	cmp	r2, r3
 800a252:	d153      	bne.n	800a2fc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a254:	4b2b      	ldr	r3, [pc, #172]	; (800a304 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	69ba      	ldr	r2, [r7, #24]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d10a      	bne.n	800a274 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	60bb      	str	r3, [r7, #8]
}
 800a270:	bf00      	nop
 800a272:	e7fe      	b.n	800a272 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a278:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	69fa      	ldr	r2, [r7, #28]
 800a27e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	2b00      	cmp	r3, #0
 800a286:	db04      	blt.n	800a292 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	f1c3 0207 	rsb	r2, r3, #7
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	6959      	ldr	r1, [r3, #20]
 800a296:	693a      	ldr	r2, [r7, #16]
 800a298:	4613      	mov	r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	4413      	add	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4a19      	ldr	r2, [pc, #100]	; (800a308 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a2a2:	4413      	add	r3, r2
 800a2a4:	4299      	cmp	r1, r3
 800a2a6:	d129      	bne.n	800a2fc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fe f8b7 	bl	8008420 <uxListRemove>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10a      	bne.n	800a2ce <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2bc:	2201      	movs	r2, #1
 800a2be:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c2:	43da      	mvns	r2, r3
 800a2c4:	4b11      	ldr	r3, [pc, #68]	; (800a30c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	4a10      	ldr	r2, [pc, #64]	; (800a30c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a2cc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	409a      	lsls	r2, r3
 800a2d6:	4b0d      	ldr	r3, [pc, #52]	; (800a30c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	4a0b      	ldr	r2, [pc, #44]	; (800a30c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4413      	add	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4a06      	ldr	r2, [pc, #24]	; (800a308 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a2ee:	441a      	add	r2, r3
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	3304      	adds	r3, #4
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	4610      	mov	r0, r2
 800a2f8:	f7fe f835 	bl	8008366 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2fc:	bf00      	nop
 800a2fe:	3720      	adds	r7, #32
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	20000798 	.word	0x20000798
 800a308:	2000079c 	.word	0x2000079c
 800a30c:	200008a0 	.word	0x200008a0

0800a310 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a310:	b480      	push	{r7}
 800a312:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a314:	4b07      	ldr	r3, [pc, #28]	; (800a334 <pvTaskIncrementMutexHeldCount+0x24>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d004      	beq.n	800a326 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a31c:	4b05      	ldr	r3, [pc, #20]	; (800a334 <pvTaskIncrementMutexHeldCount+0x24>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a322:	3201      	adds	r2, #1
 800a324:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a326:	4b03      	ldr	r3, [pc, #12]	; (800a334 <pvTaskIncrementMutexHeldCount+0x24>)
 800a328:	681b      	ldr	r3, [r3, #0]
	}
 800a32a:	4618      	mov	r0, r3
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	20000798 	.word	0x20000798

0800a338 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a342:	4b29      	ldr	r3, [pc, #164]	; (800a3e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a348:	4b28      	ldr	r3, [pc, #160]	; (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3304      	adds	r3, #4
 800a34e:	4618      	mov	r0, r3
 800a350:	f7fe f866 	bl	8008420 <uxListRemove>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10b      	bne.n	800a372 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a35a:	4b24      	ldr	r3, [pc, #144]	; (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a360:	2201      	movs	r2, #1
 800a362:	fa02 f303 	lsl.w	r3, r2, r3
 800a366:	43da      	mvns	r2, r3
 800a368:	4b21      	ldr	r3, [pc, #132]	; (800a3f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4013      	ands	r3, r2
 800a36e:	4a20      	ldr	r2, [pc, #128]	; (800a3f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a370:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a378:	d10a      	bne.n	800a390 <prvAddCurrentTaskToDelayedList+0x58>
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d007      	beq.n	800a390 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a380:	4b1a      	ldr	r3, [pc, #104]	; (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3304      	adds	r3, #4
 800a386:	4619      	mov	r1, r3
 800a388:	481a      	ldr	r0, [pc, #104]	; (800a3f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a38a:	f7fd ffec 	bl	8008366 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a38e:	e026      	b.n	800a3de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4413      	add	r3, r2
 800a396:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a398:	4b14      	ldr	r3, [pc, #80]	; (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d209      	bcs.n	800a3bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3a8:	4b13      	ldr	r3, [pc, #76]	; (800a3f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	f7fd fffa 	bl	80083ae <vListInsert>
}
 800a3ba:	e010      	b.n	800a3de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3bc:	4b0f      	ldr	r3, [pc, #60]	; (800a3fc <prvAddCurrentTaskToDelayedList+0xc4>)
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	f7fd fff0 	bl	80083ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3ce:	4b0c      	ldr	r3, [pc, #48]	; (800a400 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d202      	bcs.n	800a3de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a3d8:	4a09      	ldr	r2, [pc, #36]	; (800a400 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	6013      	str	r3, [r2, #0]
}
 800a3de:	bf00      	nop
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	2000089c 	.word	0x2000089c
 800a3ec:	20000798 	.word	0x20000798
 800a3f0:	200008a0 	.word	0x200008a0
 800a3f4:	20000884 	.word	0x20000884
 800a3f8:	20000854 	.word	0x20000854
 800a3fc:	20000850 	.word	0x20000850
 800a400:	200008b8 	.word	0x200008b8

0800a404 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08a      	sub	sp, #40	; 0x28
 800a408:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a40a:	2300      	movs	r3, #0
 800a40c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a40e:	f000 fb85 	bl	800ab1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a412:	4b1c      	ldr	r3, [pc, #112]	; (800a484 <xTimerCreateTimerTask+0x80>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d021      	beq.n	800a45e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a41e:	2300      	movs	r3, #0
 800a420:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a422:	1d3a      	adds	r2, r7, #4
 800a424:	f107 0108 	add.w	r1, r7, #8
 800a428:	f107 030c 	add.w	r3, r7, #12
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7f6 faa1 	bl	8000974 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a432:	6879      	ldr	r1, [r7, #4]
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	9202      	str	r2, [sp, #8]
 800a43a:	9301      	str	r3, [sp, #4]
 800a43c:	2302      	movs	r3, #2
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	2300      	movs	r3, #0
 800a442:	460a      	mov	r2, r1
 800a444:	4910      	ldr	r1, [pc, #64]	; (800a488 <xTimerCreateTimerTask+0x84>)
 800a446:	4811      	ldr	r0, [pc, #68]	; (800a48c <xTimerCreateTimerTask+0x88>)
 800a448:	f7fe ffb2 	bl	80093b0 <xTaskCreateStatic>
 800a44c:	4603      	mov	r3, r0
 800a44e:	4a10      	ldr	r2, [pc, #64]	; (800a490 <xTimerCreateTimerTask+0x8c>)
 800a450:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a452:	4b0f      	ldr	r3, [pc, #60]	; (800a490 <xTimerCreateTimerTask+0x8c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a45a:	2301      	movs	r3, #1
 800a45c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10a      	bne.n	800a47a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	613b      	str	r3, [r7, #16]
}
 800a476:	bf00      	nop
 800a478:	e7fe      	b.n	800a478 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a47a:	697b      	ldr	r3, [r7, #20]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3718      	adds	r7, #24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	200008f4 	.word	0x200008f4
 800a488:	0800bfbc 	.word	0x0800bfbc
 800a48c:	0800a6fd 	.word	0x0800a6fd
 800a490:	200008f8 	.word	0x200008f8

0800a494 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a494:	b580      	push	{r7, lr}
 800a496:	b088      	sub	sp, #32
 800a498:	af02      	add	r7, sp, #8
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
 800a4a0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a4a2:	2028      	movs	r0, #40	; 0x28
 800a4a4:	f000 fdc8 	bl	800b038 <pvPortMalloc>
 800a4a8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00d      	beq.n	800a4cc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	68b9      	ldr	r1, [r7, #8]
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f000 f843 	bl	800a552 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a4cc:	697b      	ldr	r3, [r7, #20]
	}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3718      	adds	r7, #24
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b08a      	sub	sp, #40	; 0x28
 800a4da:	af02      	add	r7, sp, #8
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	607a      	str	r2, [r7, #4]
 800a4e2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a4e4:	2328      	movs	r3, #40	; 0x28
 800a4e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	2b28      	cmp	r3, #40	; 0x28
 800a4ec:	d00a      	beq.n	800a504 <xTimerCreateStatic+0x2e>
	__asm volatile
 800a4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	61bb      	str	r3, [r7, #24]
}
 800a500:	bf00      	nop
 800a502:	e7fe      	b.n	800a502 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a504:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10a      	bne.n	800a522 <xTimerCreateStatic+0x4c>
	__asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	617b      	str	r3, [r7, #20]
}
 800a51e:	bf00      	nop
 800a520:	e7fe      	b.n	800a520 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a524:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00d      	beq.n	800a548 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	2202      	movs	r2, #2
 800a530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	68b9      	ldr	r1, [r7, #8]
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 f805 	bl	800a552 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a548:	69fb      	ldr	r3, [r7, #28]
	}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3720      	adds	r7, #32
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b086      	sub	sp, #24
 800a556:	af00      	add	r7, sp, #0
 800a558:	60f8      	str	r0, [r7, #12]
 800a55a:	60b9      	str	r1, [r7, #8]
 800a55c:	607a      	str	r2, [r7, #4]
 800a55e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d10a      	bne.n	800a57c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56a:	f383 8811 	msr	BASEPRI, r3
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	617b      	str	r3, [r7, #20]
}
 800a578:	bf00      	nop
 800a57a:	e7fe      	b.n	800a57a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d01e      	beq.n	800a5c0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a582:	f000 facb 	bl	800ab1c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	6a3a      	ldr	r2, [r7, #32]
 800a59c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	3304      	adds	r3, #4
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fd fed2 	bl	800834c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d008      	beq.n	800a5c0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5b4:	f043 0304 	orr.w	r3, r3, #4
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a5c0:	bf00      	nop
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b08a      	sub	sp, #40	; 0x28
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10a      	bne.n	800a5f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	623b      	str	r3, [r7, #32]
}
 800a5f2:	bf00      	nop
 800a5f4:	e7fe      	b.n	800a5f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a5f6:	4b1a      	ldr	r3, [pc, #104]	; (800a660 <xTimerGenericCommand+0x98>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d02a      	beq.n	800a654 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	2b05      	cmp	r3, #5
 800a60e:	dc18      	bgt.n	800a642 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a610:	f7ff fcd6 	bl	8009fc0 <xTaskGetSchedulerState>
 800a614:	4603      	mov	r3, r0
 800a616:	2b02      	cmp	r3, #2
 800a618:	d109      	bne.n	800a62e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a61a:	4b11      	ldr	r3, [pc, #68]	; (800a660 <xTimerGenericCommand+0x98>)
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	f107 0114 	add.w	r1, r7, #20
 800a622:	2300      	movs	r3, #0
 800a624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a626:	f7fe f8ab 	bl	8008780 <xQueueGenericSend>
 800a62a:	6278      	str	r0, [r7, #36]	; 0x24
 800a62c:	e012      	b.n	800a654 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a62e:	4b0c      	ldr	r3, [pc, #48]	; (800a660 <xTimerGenericCommand+0x98>)
 800a630:	6818      	ldr	r0, [r3, #0]
 800a632:	f107 0114 	add.w	r1, r7, #20
 800a636:	2300      	movs	r3, #0
 800a638:	2200      	movs	r2, #0
 800a63a:	f7fe f8a1 	bl	8008780 <xQueueGenericSend>
 800a63e:	6278      	str	r0, [r7, #36]	; 0x24
 800a640:	e008      	b.n	800a654 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a642:	4b07      	ldr	r3, [pc, #28]	; (800a660 <xTimerGenericCommand+0x98>)
 800a644:	6818      	ldr	r0, [r3, #0]
 800a646:	f107 0114 	add.w	r1, r7, #20
 800a64a:	2300      	movs	r3, #0
 800a64c:	683a      	ldr	r2, [r7, #0]
 800a64e:	f7fe f995 	bl	800897c <xQueueGenericSendFromISR>
 800a652:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a656:	4618      	mov	r0, r3
 800a658:	3728      	adds	r7, #40	; 0x28
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	200008f4 	.word	0x200008f4

0800a664 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b088      	sub	sp, #32
 800a668:	af02      	add	r7, sp, #8
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a66e:	4b22      	ldr	r3, [pc, #136]	; (800a6f8 <prvProcessExpiredTimer+0x94>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	3304      	adds	r3, #4
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fd fecf 	bl	8008420 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a688:	f003 0304 	and.w	r3, r3, #4
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d022      	beq.n	800a6d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	699a      	ldr	r2, [r3, #24]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	18d1      	adds	r1, r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	6978      	ldr	r0, [r7, #20]
 800a69e:	f000 f8d1 	bl	800a844 <prvInsertTimerInActiveList>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d01f      	beq.n	800a6e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	6978      	ldr	r0, [r7, #20]
 800a6b4:	f7ff ff88 	bl	800a5c8 <xTimerGenericCommand>
 800a6b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d113      	bne.n	800a6e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	60fb      	str	r3, [r7, #12]
}
 800a6d2:	bf00      	nop
 800a6d4:	e7fe      	b.n	800a6d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a6dc:	f023 0301 	bic.w	r3, r3, #1
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	6a1b      	ldr	r3, [r3, #32]
 800a6ec:	6978      	ldr	r0, [r7, #20]
 800a6ee:	4798      	blx	r3
}
 800a6f0:	bf00      	nop
 800a6f2:	3718      	adds	r7, #24
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	200008ec 	.word	0x200008ec

0800a6fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a704:	f107 0308 	add.w	r3, r7, #8
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 f857 	bl	800a7bc <prvGetNextExpireTime>
 800a70e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	4619      	mov	r1, r3
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f000 f803 	bl	800a720 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a71a:	f000 f8d5 	bl	800a8c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a71e:	e7f1      	b.n	800a704 <prvTimerTask+0x8>

0800a720 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a72a:	f7ff f86f 	bl	800980c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a72e:	f107 0308 	add.w	r3, r7, #8
 800a732:	4618      	mov	r0, r3
 800a734:	f000 f866 	bl	800a804 <prvSampleTimeNow>
 800a738:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d130      	bne.n	800a7a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10a      	bne.n	800a75c <prvProcessTimerOrBlockTask+0x3c>
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d806      	bhi.n	800a75c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a74e:	f7ff f86b 	bl	8009828 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a752:	68f9      	ldr	r1, [r7, #12]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7ff ff85 	bl	800a664 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a75a:	e024      	b.n	800a7a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d008      	beq.n	800a774 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a762:	4b13      	ldr	r3, [pc, #76]	; (800a7b0 <prvProcessTimerOrBlockTask+0x90>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d101      	bne.n	800a770 <prvProcessTimerOrBlockTask+0x50>
 800a76c:	2301      	movs	r3, #1
 800a76e:	e000      	b.n	800a772 <prvProcessTimerOrBlockTask+0x52>
 800a770:	2300      	movs	r3, #0
 800a772:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a774:	4b0f      	ldr	r3, [pc, #60]	; (800a7b4 <prvProcessTimerOrBlockTask+0x94>)
 800a776:	6818      	ldr	r0, [r3, #0]
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	4619      	mov	r1, r3
 800a782:	f7fe fde1 	bl	8009348 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a786:	f7ff f84f 	bl	8009828 <xTaskResumeAll>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10a      	bne.n	800a7a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a790:	4b09      	ldr	r3, [pc, #36]	; (800a7b8 <prvProcessTimerOrBlockTask+0x98>)
 800a792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	f3bf 8f6f 	isb	sy
}
 800a7a0:	e001      	b.n	800a7a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a7a2:	f7ff f841 	bl	8009828 <xTaskResumeAll>
}
 800a7a6:	bf00      	nop
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	200008f0 	.word	0x200008f0
 800a7b4:	200008f4 	.word	0x200008f4
 800a7b8:	e000ed04 	.word	0xe000ed04

0800a7bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b085      	sub	sp, #20
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a7c4:	4b0e      	ldr	r3, [pc, #56]	; (800a800 <prvGetNextExpireTime+0x44>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <prvGetNextExpireTime+0x16>
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	e000      	b.n	800a7d4 <prvGetNextExpireTime+0x18>
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d105      	bne.n	800a7ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7e0:	4b07      	ldr	r3, [pc, #28]	; (800a800 <prvGetNextExpireTime+0x44>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	60fb      	str	r3, [r7, #12]
 800a7ea:	e001      	b.n	800a7f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3714      	adds	r7, #20
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	200008ec 	.word	0x200008ec

0800a804 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a80c:	f7ff f8a8 	bl	8009960 <xTaskGetTickCount>
 800a810:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a812:	4b0b      	ldr	r3, [pc, #44]	; (800a840 <prvSampleTimeNow+0x3c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d205      	bcs.n	800a828 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a81c:	f000 f91a 	bl	800aa54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	e002      	b.n	800a82e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a82e:	4a04      	ldr	r2, [pc, #16]	; (800a840 <prvSampleTimeNow+0x3c>)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a834:	68fb      	ldr	r3, [r7, #12]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	200008fc 	.word	0x200008fc

0800a844 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a852:	2300      	movs	r3, #0
 800a854:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	429a      	cmp	r2, r3
 800a868:	d812      	bhi.n	800a890 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	1ad2      	subs	r2, r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	699b      	ldr	r3, [r3, #24]
 800a874:	429a      	cmp	r2, r3
 800a876:	d302      	bcc.n	800a87e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a878:	2301      	movs	r3, #1
 800a87a:	617b      	str	r3, [r7, #20]
 800a87c:	e01b      	b.n	800a8b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a87e:	4b10      	ldr	r3, [pc, #64]	; (800a8c0 <prvInsertTimerInActiveList+0x7c>)
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3304      	adds	r3, #4
 800a886:	4619      	mov	r1, r3
 800a888:	4610      	mov	r0, r2
 800a88a:	f7fd fd90 	bl	80083ae <vListInsert>
 800a88e:	e012      	b.n	800a8b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	429a      	cmp	r2, r3
 800a896:	d206      	bcs.n	800a8a6 <prvInsertTimerInActiveList+0x62>
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d302      	bcc.n	800a8a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	e007      	b.n	800a8b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8a6:	4b07      	ldr	r3, [pc, #28]	; (800a8c4 <prvInsertTimerInActiveList+0x80>)
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	4610      	mov	r0, r2
 800a8b2:	f7fd fd7c 	bl	80083ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a8b6:	697b      	ldr	r3, [r7, #20]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3718      	adds	r7, #24
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	200008f0 	.word	0x200008f0
 800a8c4:	200008ec 	.word	0x200008ec

0800a8c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b08c      	sub	sp, #48	; 0x30
 800a8cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8ce:	e0ae      	b.n	800aa2e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f2c0 80aa 	blt.w	800aa2c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	695b      	ldr	r3, [r3, #20]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d004      	beq.n	800a8ee <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fd fd99 	bl	8008420 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8ee:	1d3b      	adds	r3, r7, #4
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7ff ff87 	bl	800a804 <prvSampleTimeNow>
 800a8f6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	2b09      	cmp	r3, #9
 800a8fc:	f200 8097 	bhi.w	800aa2e <prvProcessReceivedCommands+0x166>
 800a900:	a201      	add	r2, pc, #4	; (adr r2, 800a908 <prvProcessReceivedCommands+0x40>)
 800a902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a906:	bf00      	nop
 800a908:	0800a931 	.word	0x0800a931
 800a90c:	0800a931 	.word	0x0800a931
 800a910:	0800a931 	.word	0x0800a931
 800a914:	0800a9a5 	.word	0x0800a9a5
 800a918:	0800a9b9 	.word	0x0800a9b9
 800a91c:	0800aa03 	.word	0x0800aa03
 800a920:	0800a931 	.word	0x0800a931
 800a924:	0800a931 	.word	0x0800a931
 800a928:	0800a9a5 	.word	0x0800a9a5
 800a92c:	0800a9b9 	.word	0x0800a9b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a932:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a936:	f043 0301 	orr.w	r3, r3, #1
 800a93a:	b2da      	uxtb	r2, r3
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	18d1      	adds	r1, r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6a3a      	ldr	r2, [r7, #32]
 800a94e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a950:	f7ff ff78 	bl	800a844 <prvInsertTimerInActiveList>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d069      	beq.n	800aa2e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	6a1b      	ldr	r3, [r3, #32]
 800a95e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a960:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a968:	f003 0304 	and.w	r3, r3, #4
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d05e      	beq.n	800aa2e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	441a      	add	r2, r3
 800a978:	2300      	movs	r3, #0
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	2300      	movs	r3, #0
 800a97e:	2100      	movs	r1, #0
 800a980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a982:	f7ff fe21 	bl	800a5c8 <xTimerGenericCommand>
 800a986:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d14f      	bne.n	800aa2e <prvProcessReceivedCommands+0x166>
	__asm volatile
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	61bb      	str	r3, [r7, #24]
}
 800a9a0:	bf00      	nop
 800a9a2:	e7fe      	b.n	800a9a2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a9aa:	f023 0301 	bic.w	r3, r3, #1
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800a9b6:	e03a      	b.n	800aa2e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a9be:	f043 0301 	orr.w	r3, r3, #1
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10a      	bne.n	800a9ee <prvProcessReceivedCommands+0x126>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	617b      	str	r3, [r7, #20]
}
 800a9ea:	bf00      	nop
 800a9ec:	e7fe      	b.n	800a9ec <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f0:	699a      	ldr	r2, [r3, #24]
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	18d1      	adds	r1, r2, r3
 800a9f6:	6a3b      	ldr	r3, [r7, #32]
 800a9f8:	6a3a      	ldr	r2, [r7, #32]
 800a9fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9fc:	f7ff ff22 	bl	800a844 <prvInsertTimerInActiveList>
					break;
 800aa00:	e015      	b.n	800aa2e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aa08:	f003 0302 	and.w	r3, r3, #2
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d103      	bne.n	800aa18 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800aa10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa12:	f000 fbdd 	bl	800b1d0 <vPortFree>
 800aa16:	e00a      	b.n	800aa2e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aa1e:	f023 0301 	bic.w	r3, r3, #1
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa2a:	e000      	b.n	800aa2e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aa2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa2e:	4b08      	ldr	r3, [pc, #32]	; (800aa50 <prvProcessReceivedCommands+0x188>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f107 0108 	add.w	r1, r7, #8
 800aa36:	2200      	movs	r2, #0
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7fe f8c7 	bl	8008bcc <xQueueReceive>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f47f af45 	bne.w	800a8d0 <prvProcessReceivedCommands+0x8>
	}
}
 800aa46:	bf00      	nop
 800aa48:	bf00      	nop
 800aa4a:	3728      	adds	r7, #40	; 0x28
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	200008f4 	.word	0x200008f4

0800aa54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b088      	sub	sp, #32
 800aa58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa5a:	e048      	b.n	800aaee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa5c:	4b2d      	ldr	r3, [pc, #180]	; (800ab14 <prvSwitchTimerLists+0xc0>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa66:	4b2b      	ldr	r3, [pc, #172]	; (800ab14 <prvSwitchTimerLists+0xc0>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	3304      	adds	r3, #4
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7fd fcd3 	bl	8008420 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6a1b      	ldr	r3, [r3, #32]
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aa88:	f003 0304 	and.w	r3, r3, #4
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d02e      	beq.n	800aaee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	699b      	ldr	r3, [r3, #24]
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	4413      	add	r3, r2
 800aa98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d90e      	bls.n	800aac0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aaae:	4b19      	ldr	r3, [pc, #100]	; (800ab14 <prvSwitchTimerLists+0xc0>)
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	3304      	adds	r3, #4
 800aab6:	4619      	mov	r1, r3
 800aab8:	4610      	mov	r0, r2
 800aaba:	f7fd fc78 	bl	80083ae <vListInsert>
 800aabe:	e016      	b.n	800aaee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aac0:	2300      	movs	r3, #0
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	2300      	movs	r3, #0
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	2100      	movs	r1, #0
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f7ff fd7c 	bl	800a5c8 <xTimerGenericCommand>
 800aad0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10a      	bne.n	800aaee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aadc:	f383 8811 	msr	BASEPRI, r3
 800aae0:	f3bf 8f6f 	isb	sy
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	603b      	str	r3, [r7, #0]
}
 800aaea:	bf00      	nop
 800aaec:	e7fe      	b.n	800aaec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aaee:	4b09      	ldr	r3, [pc, #36]	; (800ab14 <prvSwitchTimerLists+0xc0>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1b1      	bne.n	800aa5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aaf8:	4b06      	ldr	r3, [pc, #24]	; (800ab14 <prvSwitchTimerLists+0xc0>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aafe:	4b06      	ldr	r3, [pc, #24]	; (800ab18 <prvSwitchTimerLists+0xc4>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a04      	ldr	r2, [pc, #16]	; (800ab14 <prvSwitchTimerLists+0xc0>)
 800ab04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab06:	4a04      	ldr	r2, [pc, #16]	; (800ab18 <prvSwitchTimerLists+0xc4>)
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	6013      	str	r3, [r2, #0]
}
 800ab0c:	bf00      	nop
 800ab0e:	3718      	adds	r7, #24
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	200008ec 	.word	0x200008ec
 800ab18:	200008f0 	.word	0x200008f0

0800ab1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab22:	f000 f967 	bl	800adf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab26:	4b15      	ldr	r3, [pc, #84]	; (800ab7c <prvCheckForValidListAndQueue+0x60>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d120      	bne.n	800ab70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab2e:	4814      	ldr	r0, [pc, #80]	; (800ab80 <prvCheckForValidListAndQueue+0x64>)
 800ab30:	f7fd fbec 	bl	800830c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab34:	4813      	ldr	r0, [pc, #76]	; (800ab84 <prvCheckForValidListAndQueue+0x68>)
 800ab36:	f7fd fbe9 	bl	800830c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab3a:	4b13      	ldr	r3, [pc, #76]	; (800ab88 <prvCheckForValidListAndQueue+0x6c>)
 800ab3c:	4a10      	ldr	r2, [pc, #64]	; (800ab80 <prvCheckForValidListAndQueue+0x64>)
 800ab3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab40:	4b12      	ldr	r3, [pc, #72]	; (800ab8c <prvCheckForValidListAndQueue+0x70>)
 800ab42:	4a10      	ldr	r2, [pc, #64]	; (800ab84 <prvCheckForValidListAndQueue+0x68>)
 800ab44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab46:	2300      	movs	r3, #0
 800ab48:	9300      	str	r3, [sp, #0]
 800ab4a:	4b11      	ldr	r3, [pc, #68]	; (800ab90 <prvCheckForValidListAndQueue+0x74>)
 800ab4c:	4a11      	ldr	r2, [pc, #68]	; (800ab94 <prvCheckForValidListAndQueue+0x78>)
 800ab4e:	210c      	movs	r1, #12
 800ab50:	200a      	movs	r0, #10
 800ab52:	f7fd fcf7 	bl	8008544 <xQueueGenericCreateStatic>
 800ab56:	4603      	mov	r3, r0
 800ab58:	4a08      	ldr	r2, [pc, #32]	; (800ab7c <prvCheckForValidListAndQueue+0x60>)
 800ab5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab5c:	4b07      	ldr	r3, [pc, #28]	; (800ab7c <prvCheckForValidListAndQueue+0x60>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d005      	beq.n	800ab70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab64:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <prvCheckForValidListAndQueue+0x60>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	490b      	ldr	r1, [pc, #44]	; (800ab98 <prvCheckForValidListAndQueue+0x7c>)
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe fbc2 	bl	80092f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab70:	f000 f970 	bl	800ae54 <vPortExitCritical>
}
 800ab74:	bf00      	nop
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	200008f4 	.word	0x200008f4
 800ab80:	200008c4 	.word	0x200008c4
 800ab84:	200008d8 	.word	0x200008d8
 800ab88:	200008ec 	.word	0x200008ec
 800ab8c:	200008f0 	.word	0x200008f0
 800ab90:	20000978 	.word	0x20000978
 800ab94:	20000900 	.word	0x20000900
 800ab98:	0800bfc4 	.word	0x0800bfc4

0800ab9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	3b04      	subs	r3, #4
 800abac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3b04      	subs	r3, #4
 800abba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	f023 0201 	bic.w	r2, r3, #1
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	3b04      	subs	r3, #4
 800abca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800abcc:	4a0c      	ldr	r2, [pc, #48]	; (800ac00 <pxPortInitialiseStack+0x64>)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	3b14      	subs	r3, #20
 800abd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	3b04      	subs	r3, #4
 800abe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f06f 0202 	mvn.w	r2, #2
 800abea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	3b20      	subs	r3, #32
 800abf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800abf2:	68fb      	ldr	r3, [r7, #12]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	0800ac05 	.word	0x0800ac05

0800ac04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac0e:	4b12      	ldr	r3, [pc, #72]	; (800ac58 <prvTaskExitError+0x54>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac16:	d00a      	beq.n	800ac2e <prvTaskExitError+0x2a>
	__asm volatile
 800ac18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1c:	f383 8811 	msr	BASEPRI, r3
 800ac20:	f3bf 8f6f 	isb	sy
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	60fb      	str	r3, [r7, #12]
}
 800ac2a:	bf00      	nop
 800ac2c:	e7fe      	b.n	800ac2c <prvTaskExitError+0x28>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	60bb      	str	r3, [r7, #8]
}
 800ac40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac42:	bf00      	nop
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d0fc      	beq.n	800ac44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac4a:	bf00      	nop
 800ac4c:	bf00      	nop
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr
 800ac58:	2000002c 	.word	0x2000002c
 800ac5c:	00000000 	.word	0x00000000

0800ac60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac60:	4b07      	ldr	r3, [pc, #28]	; (800ac80 <pxCurrentTCBConst2>)
 800ac62:	6819      	ldr	r1, [r3, #0]
 800ac64:	6808      	ldr	r0, [r1, #0]
 800ac66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6a:	f380 8809 	msr	PSP, r0
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f04f 0000 	mov.w	r0, #0
 800ac76:	f380 8811 	msr	BASEPRI, r0
 800ac7a:	4770      	bx	lr
 800ac7c:	f3af 8000 	nop.w

0800ac80 <pxCurrentTCBConst2>:
 800ac80:	20000798 	.word	0x20000798
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop

0800ac88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac88:	4808      	ldr	r0, [pc, #32]	; (800acac <prvPortStartFirstTask+0x24>)
 800ac8a:	6800      	ldr	r0, [r0, #0]
 800ac8c:	6800      	ldr	r0, [r0, #0]
 800ac8e:	f380 8808 	msr	MSP, r0
 800ac92:	f04f 0000 	mov.w	r0, #0
 800ac96:	f380 8814 	msr	CONTROL, r0
 800ac9a:	b662      	cpsie	i
 800ac9c:	b661      	cpsie	f
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	df00      	svc	0
 800aca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acaa:	bf00      	nop
 800acac:	e000ed08 	.word	0xe000ed08

0800acb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800acb6:	4b46      	ldr	r3, [pc, #280]	; (800add0 <xPortStartScheduler+0x120>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a46      	ldr	r2, [pc, #280]	; (800add4 <xPortStartScheduler+0x124>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d10a      	bne.n	800acd6 <xPortStartScheduler+0x26>
	__asm volatile
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	613b      	str	r3, [r7, #16]
}
 800acd2:	bf00      	nop
 800acd4:	e7fe      	b.n	800acd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800acd6:	4b3e      	ldr	r3, [pc, #248]	; (800add0 <xPortStartScheduler+0x120>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a3f      	ldr	r2, [pc, #252]	; (800add8 <xPortStartScheduler+0x128>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d10a      	bne.n	800acf6 <xPortStartScheduler+0x46>
	__asm volatile
 800ace0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace4:	f383 8811 	msr	BASEPRI, r3
 800ace8:	f3bf 8f6f 	isb	sy
 800acec:	f3bf 8f4f 	dsb	sy
 800acf0:	60fb      	str	r3, [r7, #12]
}
 800acf2:	bf00      	nop
 800acf4:	e7fe      	b.n	800acf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800acf6:	4b39      	ldr	r3, [pc, #228]	; (800addc <xPortStartScheduler+0x12c>)
 800acf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	22ff      	movs	r2, #255	; 0xff
 800ad06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad10:	78fb      	ldrb	r3, [r7, #3]
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad18:	b2da      	uxtb	r2, r3
 800ad1a:	4b31      	ldr	r3, [pc, #196]	; (800ade0 <xPortStartScheduler+0x130>)
 800ad1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad1e:	4b31      	ldr	r3, [pc, #196]	; (800ade4 <xPortStartScheduler+0x134>)
 800ad20:	2207      	movs	r2, #7
 800ad22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad24:	e009      	b.n	800ad3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ad26:	4b2f      	ldr	r3, [pc, #188]	; (800ade4 <xPortStartScheduler+0x134>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	4a2d      	ldr	r2, [pc, #180]	; (800ade4 <xPortStartScheduler+0x134>)
 800ad2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad30:	78fb      	ldrb	r3, [r7, #3]
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	005b      	lsls	r3, r3, #1
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad3a:	78fb      	ldrb	r3, [r7, #3]
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad42:	2b80      	cmp	r3, #128	; 0x80
 800ad44:	d0ef      	beq.n	800ad26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad46:	4b27      	ldr	r3, [pc, #156]	; (800ade4 <xPortStartScheduler+0x134>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f1c3 0307 	rsb	r3, r3, #7
 800ad4e:	2b04      	cmp	r3, #4
 800ad50:	d00a      	beq.n	800ad68 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	60bb      	str	r3, [r7, #8]
}
 800ad64:	bf00      	nop
 800ad66:	e7fe      	b.n	800ad66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad68:	4b1e      	ldr	r3, [pc, #120]	; (800ade4 <xPortStartScheduler+0x134>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	021b      	lsls	r3, r3, #8
 800ad6e:	4a1d      	ldr	r2, [pc, #116]	; (800ade4 <xPortStartScheduler+0x134>)
 800ad70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad72:	4b1c      	ldr	r3, [pc, #112]	; (800ade4 <xPortStartScheduler+0x134>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad7a:	4a1a      	ldr	r2, [pc, #104]	; (800ade4 <xPortStartScheduler+0x134>)
 800ad7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	b2da      	uxtb	r2, r3
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad86:	4b18      	ldr	r3, [pc, #96]	; (800ade8 <xPortStartScheduler+0x138>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a17      	ldr	r2, [pc, #92]	; (800ade8 <xPortStartScheduler+0x138>)
 800ad8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad92:	4b15      	ldr	r3, [pc, #84]	; (800ade8 <xPortStartScheduler+0x138>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a14      	ldr	r2, [pc, #80]	; (800ade8 <xPortStartScheduler+0x138>)
 800ad98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad9e:	f000 f8dd 	bl	800af5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ada2:	4b12      	ldr	r3, [pc, #72]	; (800adec <xPortStartScheduler+0x13c>)
 800ada4:	2200      	movs	r2, #0
 800ada6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ada8:	f000 f8fc 	bl	800afa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800adac:	4b10      	ldr	r3, [pc, #64]	; (800adf0 <xPortStartScheduler+0x140>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a0f      	ldr	r2, [pc, #60]	; (800adf0 <xPortStartScheduler+0x140>)
 800adb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800adb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800adb8:	f7ff ff66 	bl	800ac88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800adbc:	f7fe fe98 	bl	8009af0 <vTaskSwitchContext>
	prvTaskExitError();
 800adc0:	f7ff ff20 	bl	800ac04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3718      	adds	r7, #24
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	e000ed00 	.word	0xe000ed00
 800add4:	410fc271 	.word	0x410fc271
 800add8:	410fc270 	.word	0x410fc270
 800addc:	e000e400 	.word	0xe000e400
 800ade0:	200009c0 	.word	0x200009c0
 800ade4:	200009c4 	.word	0x200009c4
 800ade8:	e000ed20 	.word	0xe000ed20
 800adec:	2000002c 	.word	0x2000002c
 800adf0:	e000ef34 	.word	0xe000ef34

0800adf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
	__asm volatile
 800adfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfe:	f383 8811 	msr	BASEPRI, r3
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	607b      	str	r3, [r7, #4]
}
 800ae0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae0e:	4b0f      	ldr	r3, [pc, #60]	; (800ae4c <vPortEnterCritical+0x58>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3301      	adds	r3, #1
 800ae14:	4a0d      	ldr	r2, [pc, #52]	; (800ae4c <vPortEnterCritical+0x58>)
 800ae16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae18:	4b0c      	ldr	r3, [pc, #48]	; (800ae4c <vPortEnterCritical+0x58>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d10f      	bne.n	800ae40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae20:	4b0b      	ldr	r3, [pc, #44]	; (800ae50 <vPortEnterCritical+0x5c>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00a      	beq.n	800ae40 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2e:	f383 8811 	msr	BASEPRI, r3
 800ae32:	f3bf 8f6f 	isb	sy
 800ae36:	f3bf 8f4f 	dsb	sy
 800ae3a:	603b      	str	r3, [r7, #0]
}
 800ae3c:	bf00      	nop
 800ae3e:	e7fe      	b.n	800ae3e <vPortEnterCritical+0x4a>
	}
}
 800ae40:	bf00      	nop
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr
 800ae4c:	2000002c 	.word	0x2000002c
 800ae50:	e000ed04 	.word	0xe000ed04

0800ae54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae5a:	4b12      	ldr	r3, [pc, #72]	; (800aea4 <vPortExitCritical+0x50>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10a      	bne.n	800ae78 <vPortExitCritical+0x24>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae66:	f383 8811 	msr	BASEPRI, r3
 800ae6a:	f3bf 8f6f 	isb	sy
 800ae6e:	f3bf 8f4f 	dsb	sy
 800ae72:	607b      	str	r3, [r7, #4]
}
 800ae74:	bf00      	nop
 800ae76:	e7fe      	b.n	800ae76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae78:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <vPortExitCritical+0x50>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	4a09      	ldr	r2, [pc, #36]	; (800aea4 <vPortExitCritical+0x50>)
 800ae80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae82:	4b08      	ldr	r3, [pc, #32]	; (800aea4 <vPortExitCritical+0x50>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d105      	bne.n	800ae96 <vPortExitCritical+0x42>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	f383 8811 	msr	BASEPRI, r3
}
 800ae94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae96:	bf00      	nop
 800ae98:	370c      	adds	r7, #12
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	2000002c 	.word	0x2000002c
	...

0800aeb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aeb0:	f3ef 8009 	mrs	r0, PSP
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	4b15      	ldr	r3, [pc, #84]	; (800af10 <pxCurrentTCBConst>)
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	f01e 0f10 	tst.w	lr, #16
 800aec0:	bf08      	it	eq
 800aec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeca:	6010      	str	r0, [r2, #0]
 800aecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aed4:	f380 8811 	msr	BASEPRI, r0
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f7fe fe06 	bl	8009af0 <vTaskSwitchContext>
 800aee4:	f04f 0000 	mov.w	r0, #0
 800aee8:	f380 8811 	msr	BASEPRI, r0
 800aeec:	bc09      	pop	{r0, r3}
 800aeee:	6819      	ldr	r1, [r3, #0]
 800aef0:	6808      	ldr	r0, [r1, #0]
 800aef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef6:	f01e 0f10 	tst.w	lr, #16
 800aefa:	bf08      	it	eq
 800aefc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af00:	f380 8809 	msr	PSP, r0
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	f3af 8000 	nop.w

0800af10 <pxCurrentTCBConst>:
 800af10:	20000798 	.word	0x20000798
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af14:	bf00      	nop
 800af16:	bf00      	nop

0800af18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	607b      	str	r3, [r7, #4]
}
 800af30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af32:	f7fe fd25 	bl	8009980 <xTaskIncrementTick>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d003      	beq.n	800af44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af3c:	4b06      	ldr	r3, [pc, #24]	; (800af58 <SysTick_Handler+0x40>)
 800af3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af42:	601a      	str	r2, [r3, #0]
 800af44:	2300      	movs	r3, #0
 800af46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	f383 8811 	msr	BASEPRI, r3
}
 800af4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af50:	bf00      	nop
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	e000ed04 	.word	0xe000ed04

0800af5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af5c:	b480      	push	{r7}
 800af5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af60:	4b0b      	ldr	r3, [pc, #44]	; (800af90 <vPortSetupTimerInterrupt+0x34>)
 800af62:	2200      	movs	r2, #0
 800af64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af66:	4b0b      	ldr	r3, [pc, #44]	; (800af94 <vPortSetupTimerInterrupt+0x38>)
 800af68:	2200      	movs	r2, #0
 800af6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af6c:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <vPortSetupTimerInterrupt+0x3c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a0a      	ldr	r2, [pc, #40]	; (800af9c <vPortSetupTimerInterrupt+0x40>)
 800af72:	fba2 2303 	umull	r2, r3, r2, r3
 800af76:	099b      	lsrs	r3, r3, #6
 800af78:	4a09      	ldr	r2, [pc, #36]	; (800afa0 <vPortSetupTimerInterrupt+0x44>)
 800af7a:	3b01      	subs	r3, #1
 800af7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af7e:	4b04      	ldr	r3, [pc, #16]	; (800af90 <vPortSetupTimerInterrupt+0x34>)
 800af80:	2207      	movs	r2, #7
 800af82:	601a      	str	r2, [r3, #0]
}
 800af84:	bf00      	nop
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	e000e010 	.word	0xe000e010
 800af94:	e000e018 	.word	0xe000e018
 800af98:	20000000 	.word	0x20000000
 800af9c:	10624dd3 	.word	0x10624dd3
 800afa0:	e000e014 	.word	0xe000e014

0800afa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800afa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800afb4 <vPortEnableVFP+0x10>
 800afa8:	6801      	ldr	r1, [r0, #0]
 800afaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800afae:	6001      	str	r1, [r0, #0]
 800afb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800afb2:	bf00      	nop
 800afb4:	e000ed88 	.word	0xe000ed88

0800afb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800afbe:	f3ef 8305 	mrs	r3, IPSR
 800afc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2b0f      	cmp	r3, #15
 800afc8:	d914      	bls.n	800aff4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afca:	4a17      	ldr	r2, [pc, #92]	; (800b028 <vPortValidateInterruptPriority+0x70>)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	4413      	add	r3, r2
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800afd4:	4b15      	ldr	r3, [pc, #84]	; (800b02c <vPortValidateInterruptPriority+0x74>)
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	7afa      	ldrb	r2, [r7, #11]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d20a      	bcs.n	800aff4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800afde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe2:	f383 8811 	msr	BASEPRI, r3
 800afe6:	f3bf 8f6f 	isb	sy
 800afea:	f3bf 8f4f 	dsb	sy
 800afee:	607b      	str	r3, [r7, #4]
}
 800aff0:	bf00      	nop
 800aff2:	e7fe      	b.n	800aff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aff4:	4b0e      	ldr	r3, [pc, #56]	; (800b030 <vPortValidateInterruptPriority+0x78>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800affc:	4b0d      	ldr	r3, [pc, #52]	; (800b034 <vPortValidateInterruptPriority+0x7c>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	429a      	cmp	r2, r3
 800b002:	d90a      	bls.n	800b01a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b008:	f383 8811 	msr	BASEPRI, r3
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	603b      	str	r3, [r7, #0]
}
 800b016:	bf00      	nop
 800b018:	e7fe      	b.n	800b018 <vPortValidateInterruptPriority+0x60>
	}
 800b01a:	bf00      	nop
 800b01c:	3714      	adds	r7, #20
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	e000e3f0 	.word	0xe000e3f0
 800b02c:	200009c0 	.word	0x200009c0
 800b030:	e000ed0c 	.word	0xe000ed0c
 800b034:	200009c4 	.word	0x200009c4

0800b038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b08a      	sub	sp, #40	; 0x28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b040:	2300      	movs	r3, #0
 800b042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b044:	f7fe fbe2 	bl	800980c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b048:	4b5b      	ldr	r3, [pc, #364]	; (800b1b8 <pvPortMalloc+0x180>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d101      	bne.n	800b054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b050:	f000 f920 	bl	800b294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b054:	4b59      	ldr	r3, [pc, #356]	; (800b1bc <pvPortMalloc+0x184>)
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4013      	ands	r3, r2
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f040 8093 	bne.w	800b188 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d01d      	beq.n	800b0a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b068:	2208      	movs	r2, #8
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4413      	add	r3, r2
 800b06e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f003 0307 	and.w	r3, r3, #7
 800b076:	2b00      	cmp	r3, #0
 800b078:	d014      	beq.n	800b0a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f023 0307 	bic.w	r3, r3, #7
 800b080:	3308      	adds	r3, #8
 800b082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f003 0307 	and.w	r3, r3, #7
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00a      	beq.n	800b0a4 <pvPortMalloc+0x6c>
	__asm volatile
 800b08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b092:	f383 8811 	msr	BASEPRI, r3
 800b096:	f3bf 8f6f 	isb	sy
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	617b      	str	r3, [r7, #20]
}
 800b0a0:	bf00      	nop
 800b0a2:	e7fe      	b.n	800b0a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d06e      	beq.n	800b188 <pvPortMalloc+0x150>
 800b0aa:	4b45      	ldr	r3, [pc, #276]	; (800b1c0 <pvPortMalloc+0x188>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d869      	bhi.n	800b188 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b0b4:	4b43      	ldr	r3, [pc, #268]	; (800b1c4 <pvPortMalloc+0x18c>)
 800b0b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b0b8:	4b42      	ldr	r3, [pc, #264]	; (800b1c4 <pvPortMalloc+0x18c>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0be:	e004      	b.n	800b0ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d903      	bls.n	800b0dc <pvPortMalloc+0xa4>
 800b0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1f1      	bne.n	800b0c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0dc:	4b36      	ldr	r3, [pc, #216]	; (800b1b8 <pvPortMalloc+0x180>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d050      	beq.n	800b188 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0e6:	6a3b      	ldr	r3, [r7, #32]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2208      	movs	r2, #8
 800b0ec:	4413      	add	r3, r2
 800b0ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fa:	685a      	ldr	r2, [r3, #4]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	1ad2      	subs	r2, r2, r3
 800b100:	2308      	movs	r3, #8
 800b102:	005b      	lsls	r3, r3, #1
 800b104:	429a      	cmp	r2, r3
 800b106:	d91f      	bls.n	800b148 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4413      	add	r3, r2
 800b10e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	f003 0307 	and.w	r3, r3, #7
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00a      	beq.n	800b130 <pvPortMalloc+0xf8>
	__asm volatile
 800b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	613b      	str	r3, [r7, #16]
}
 800b12c:	bf00      	nop
 800b12e:	e7fe      	b.n	800b12e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b132:	685a      	ldr	r2, [r3, #4]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	1ad2      	subs	r2, r2, r3
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b142:	69b8      	ldr	r0, [r7, #24]
 800b144:	f000 f908 	bl	800b358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b148:	4b1d      	ldr	r3, [pc, #116]	; (800b1c0 <pvPortMalloc+0x188>)
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	1ad3      	subs	r3, r2, r3
 800b152:	4a1b      	ldr	r2, [pc, #108]	; (800b1c0 <pvPortMalloc+0x188>)
 800b154:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b156:	4b1a      	ldr	r3, [pc, #104]	; (800b1c0 <pvPortMalloc+0x188>)
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	4b1b      	ldr	r3, [pc, #108]	; (800b1c8 <pvPortMalloc+0x190>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d203      	bcs.n	800b16a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b162:	4b17      	ldr	r3, [pc, #92]	; (800b1c0 <pvPortMalloc+0x188>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a18      	ldr	r2, [pc, #96]	; (800b1c8 <pvPortMalloc+0x190>)
 800b168:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	685a      	ldr	r2, [r3, #4]
 800b16e:	4b13      	ldr	r3, [pc, #76]	; (800b1bc <pvPortMalloc+0x184>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	431a      	orrs	r2, r3
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b176:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17a:	2200      	movs	r2, #0
 800b17c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b17e:	4b13      	ldr	r3, [pc, #76]	; (800b1cc <pvPortMalloc+0x194>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	3301      	adds	r3, #1
 800b184:	4a11      	ldr	r2, [pc, #68]	; (800b1cc <pvPortMalloc+0x194>)
 800b186:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b188:	f7fe fb4e 	bl	8009828 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	f003 0307 	and.w	r3, r3, #7
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00a      	beq.n	800b1ac <pvPortMalloc+0x174>
	__asm volatile
 800b196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19a:	f383 8811 	msr	BASEPRI, r3
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f3bf 8f4f 	dsb	sy
 800b1a6:	60fb      	str	r3, [r7, #12]
}
 800b1a8:	bf00      	nop
 800b1aa:	e7fe      	b.n	800b1aa <pvPortMalloc+0x172>
	return pvReturn;
 800b1ac:	69fb      	ldr	r3, [r7, #28]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3728      	adds	r7, #40	; 0x28
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20002910 	.word	0x20002910
 800b1bc:	20002924 	.word	0x20002924
 800b1c0:	20002914 	.word	0x20002914
 800b1c4:	20002908 	.word	0x20002908
 800b1c8:	20002918 	.word	0x20002918
 800b1cc:	2000291c 	.word	0x2000291c

0800b1d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d04d      	beq.n	800b27e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1e2:	2308      	movs	r3, #8
 800b1e4:	425b      	negs	r3, r3
 800b1e6:	697a      	ldr	r2, [r7, #20]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	4b24      	ldr	r3, [pc, #144]	; (800b288 <vPortFree+0xb8>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d10a      	bne.n	800b214 <vPortFree+0x44>
	__asm volatile
 800b1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b202:	f383 8811 	msr	BASEPRI, r3
 800b206:	f3bf 8f6f 	isb	sy
 800b20a:	f3bf 8f4f 	dsb	sy
 800b20e:	60fb      	str	r3, [r7, #12]
}
 800b210:	bf00      	nop
 800b212:	e7fe      	b.n	800b212 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d00a      	beq.n	800b232 <vPortFree+0x62>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	60bb      	str	r3, [r7, #8]
}
 800b22e:	bf00      	nop
 800b230:	e7fe      	b.n	800b230 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	685a      	ldr	r2, [r3, #4]
 800b236:	4b14      	ldr	r3, [pc, #80]	; (800b288 <vPortFree+0xb8>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4013      	ands	r3, r2
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d01e      	beq.n	800b27e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d11a      	bne.n	800b27e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	4b0e      	ldr	r3, [pc, #56]	; (800b288 <vPortFree+0xb8>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	43db      	mvns	r3, r3
 800b252:	401a      	ands	r2, r3
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b258:	f7fe fad8 	bl	800980c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	685a      	ldr	r2, [r3, #4]
 800b260:	4b0a      	ldr	r3, [pc, #40]	; (800b28c <vPortFree+0xbc>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4413      	add	r3, r2
 800b266:	4a09      	ldr	r2, [pc, #36]	; (800b28c <vPortFree+0xbc>)
 800b268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b26a:	6938      	ldr	r0, [r7, #16]
 800b26c:	f000 f874 	bl	800b358 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b270:	4b07      	ldr	r3, [pc, #28]	; (800b290 <vPortFree+0xc0>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3301      	adds	r3, #1
 800b276:	4a06      	ldr	r2, [pc, #24]	; (800b290 <vPortFree+0xc0>)
 800b278:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b27a:	f7fe fad5 	bl	8009828 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b27e:	bf00      	nop
 800b280:	3718      	adds	r7, #24
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	20002924 	.word	0x20002924
 800b28c:	20002914 	.word	0x20002914
 800b290:	20002920 	.word	0x20002920

0800b294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b29a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800b29e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b2a0:	4b27      	ldr	r3, [pc, #156]	; (800b340 <prvHeapInit+0xac>)
 800b2a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f003 0307 	and.w	r3, r3, #7
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00c      	beq.n	800b2c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	3307      	adds	r3, #7
 800b2b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f023 0307 	bic.w	r3, r3, #7
 800b2ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	1ad3      	subs	r3, r2, r3
 800b2c2:	4a1f      	ldr	r2, [pc, #124]	; (800b340 <prvHeapInit+0xac>)
 800b2c4:	4413      	add	r3, r2
 800b2c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2cc:	4a1d      	ldr	r2, [pc, #116]	; (800b344 <prvHeapInit+0xb0>)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b2d2:	4b1c      	ldr	r3, [pc, #112]	; (800b344 <prvHeapInit+0xb0>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	68ba      	ldr	r2, [r7, #8]
 800b2dc:	4413      	add	r3, r2
 800b2de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b2e0:	2208      	movs	r2, #8
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	1a9b      	subs	r3, r3, r2
 800b2e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f023 0307 	bic.w	r3, r3, #7
 800b2ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	4a15      	ldr	r2, [pc, #84]	; (800b348 <prvHeapInit+0xb4>)
 800b2f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2f6:	4b14      	ldr	r3, [pc, #80]	; (800b348 <prvHeapInit+0xb4>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b2fe:	4b12      	ldr	r3, [pc, #72]	; (800b348 <prvHeapInit+0xb4>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2200      	movs	r2, #0
 800b304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	1ad2      	subs	r2, r2, r3
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b314:	4b0c      	ldr	r3, [pc, #48]	; (800b348 <prvHeapInit+0xb4>)
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	4a0a      	ldr	r2, [pc, #40]	; (800b34c <prvHeapInit+0xb8>)
 800b322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	4a09      	ldr	r2, [pc, #36]	; (800b350 <prvHeapInit+0xbc>)
 800b32a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b32c:	4b09      	ldr	r3, [pc, #36]	; (800b354 <prvHeapInit+0xc0>)
 800b32e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b332:	601a      	str	r2, [r3, #0]
}
 800b334:	bf00      	nop
 800b336:	3714      	adds	r7, #20
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr
 800b340:	200009c8 	.word	0x200009c8
 800b344:	20002908 	.word	0x20002908
 800b348:	20002910 	.word	0x20002910
 800b34c:	20002918 	.word	0x20002918
 800b350:	20002914 	.word	0x20002914
 800b354:	20002924 	.word	0x20002924

0800b358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b360:	4b28      	ldr	r3, [pc, #160]	; (800b404 <prvInsertBlockIntoFreeList+0xac>)
 800b362:	60fb      	str	r3, [r7, #12]
 800b364:	e002      	b.n	800b36c <prvInsertBlockIntoFreeList+0x14>
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	60fb      	str	r3, [r7, #12]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	429a      	cmp	r2, r3
 800b374:	d8f7      	bhi.n	800b366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	4413      	add	r3, r2
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	429a      	cmp	r2, r3
 800b386:	d108      	bne.n	800b39a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	685a      	ldr	r2, [r3, #4]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	441a      	add	r2, r3
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	441a      	add	r2, r3
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d118      	bne.n	800b3e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	4b15      	ldr	r3, [pc, #84]	; (800b408 <prvInsertBlockIntoFreeList+0xb0>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d00d      	beq.n	800b3d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	685a      	ldr	r2, [r3, #4]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	441a      	add	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	601a      	str	r2, [r3, #0]
 800b3d4:	e008      	b.n	800b3e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3d6:	4b0c      	ldr	r3, [pc, #48]	; (800b408 <prvInsertBlockIntoFreeList+0xb0>)
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	601a      	str	r2, [r3, #0]
 800b3de:	e003      	b.n	800b3e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d002      	beq.n	800b3f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3f6:	bf00      	nop
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	20002908 	.word	0x20002908
 800b408:	20002910 	.word	0x20002910

0800b40c <__errno>:
 800b40c:	4b01      	ldr	r3, [pc, #4]	; (800b414 <__errno+0x8>)
 800b40e:	6818      	ldr	r0, [r3, #0]
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	20000030 	.word	0x20000030

0800b418 <__libc_init_array>:
 800b418:	b570      	push	{r4, r5, r6, lr}
 800b41a:	4d0d      	ldr	r5, [pc, #52]	; (800b450 <__libc_init_array+0x38>)
 800b41c:	4c0d      	ldr	r4, [pc, #52]	; (800b454 <__libc_init_array+0x3c>)
 800b41e:	1b64      	subs	r4, r4, r5
 800b420:	10a4      	asrs	r4, r4, #2
 800b422:	2600      	movs	r6, #0
 800b424:	42a6      	cmp	r6, r4
 800b426:	d109      	bne.n	800b43c <__libc_init_array+0x24>
 800b428:	4d0b      	ldr	r5, [pc, #44]	; (800b458 <__libc_init_array+0x40>)
 800b42a:	4c0c      	ldr	r4, [pc, #48]	; (800b45c <__libc_init_array+0x44>)
 800b42c:	f000 fc94 	bl	800bd58 <_init>
 800b430:	1b64      	subs	r4, r4, r5
 800b432:	10a4      	asrs	r4, r4, #2
 800b434:	2600      	movs	r6, #0
 800b436:	42a6      	cmp	r6, r4
 800b438:	d105      	bne.n	800b446 <__libc_init_array+0x2e>
 800b43a:	bd70      	pop	{r4, r5, r6, pc}
 800b43c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b440:	4798      	blx	r3
 800b442:	3601      	adds	r6, #1
 800b444:	e7ee      	b.n	800b424 <__libc_init_array+0xc>
 800b446:	f855 3b04 	ldr.w	r3, [r5], #4
 800b44a:	4798      	blx	r3
 800b44c:	3601      	adds	r6, #1
 800b44e:	e7f2      	b.n	800b436 <__libc_init_array+0x1e>
 800b450:	0800c050 	.word	0x0800c050
 800b454:	0800c050 	.word	0x0800c050
 800b458:	0800c050 	.word	0x0800c050
 800b45c:	0800c054 	.word	0x0800c054

0800b460 <memcpy>:
 800b460:	440a      	add	r2, r1
 800b462:	4291      	cmp	r1, r2
 800b464:	f100 33ff 	add.w	r3, r0, #4294967295
 800b468:	d100      	bne.n	800b46c <memcpy+0xc>
 800b46a:	4770      	bx	lr
 800b46c:	b510      	push	{r4, lr}
 800b46e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b472:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b476:	4291      	cmp	r1, r2
 800b478:	d1f9      	bne.n	800b46e <memcpy+0xe>
 800b47a:	bd10      	pop	{r4, pc}

0800b47c <memset>:
 800b47c:	4402      	add	r2, r0
 800b47e:	4603      	mov	r3, r0
 800b480:	4293      	cmp	r3, r2
 800b482:	d100      	bne.n	800b486 <memset+0xa>
 800b484:	4770      	bx	lr
 800b486:	f803 1b01 	strb.w	r1, [r3], #1
 800b48a:	e7f9      	b.n	800b480 <memset+0x4>

0800b48c <sniprintf>:
 800b48c:	b40c      	push	{r2, r3}
 800b48e:	b530      	push	{r4, r5, lr}
 800b490:	4b17      	ldr	r3, [pc, #92]	; (800b4f0 <sniprintf+0x64>)
 800b492:	1e0c      	subs	r4, r1, #0
 800b494:	681d      	ldr	r5, [r3, #0]
 800b496:	b09d      	sub	sp, #116	; 0x74
 800b498:	da08      	bge.n	800b4ac <sniprintf+0x20>
 800b49a:	238b      	movs	r3, #139	; 0x8b
 800b49c:	602b      	str	r3, [r5, #0]
 800b49e:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a2:	b01d      	add	sp, #116	; 0x74
 800b4a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4a8:	b002      	add	sp, #8
 800b4aa:	4770      	bx	lr
 800b4ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b4b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b4b4:	bf14      	ite	ne
 800b4b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b4ba:	4623      	moveq	r3, r4
 800b4bc:	9304      	str	r3, [sp, #16]
 800b4be:	9307      	str	r3, [sp, #28]
 800b4c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4c4:	9002      	str	r0, [sp, #8]
 800b4c6:	9006      	str	r0, [sp, #24]
 800b4c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b4cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b4ce:	ab21      	add	r3, sp, #132	; 0x84
 800b4d0:	a902      	add	r1, sp, #8
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	f000 f869 	bl	800b5ac <_svfiprintf_r>
 800b4da:	1c43      	adds	r3, r0, #1
 800b4dc:	bfbc      	itt	lt
 800b4de:	238b      	movlt	r3, #139	; 0x8b
 800b4e0:	602b      	strlt	r3, [r5, #0]
 800b4e2:	2c00      	cmp	r4, #0
 800b4e4:	d0dd      	beq.n	800b4a2 <sniprintf+0x16>
 800b4e6:	9b02      	ldr	r3, [sp, #8]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	701a      	strb	r2, [r3, #0]
 800b4ec:	e7d9      	b.n	800b4a2 <sniprintf+0x16>
 800b4ee:	bf00      	nop
 800b4f0:	20000030 	.word	0x20000030

0800b4f4 <__ssputs_r>:
 800b4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f8:	688e      	ldr	r6, [r1, #8]
 800b4fa:	429e      	cmp	r6, r3
 800b4fc:	4682      	mov	sl, r0
 800b4fe:	460c      	mov	r4, r1
 800b500:	4690      	mov	r8, r2
 800b502:	461f      	mov	r7, r3
 800b504:	d838      	bhi.n	800b578 <__ssputs_r+0x84>
 800b506:	898a      	ldrh	r2, [r1, #12]
 800b508:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b50c:	d032      	beq.n	800b574 <__ssputs_r+0x80>
 800b50e:	6825      	ldr	r5, [r4, #0]
 800b510:	6909      	ldr	r1, [r1, #16]
 800b512:	eba5 0901 	sub.w	r9, r5, r1
 800b516:	6965      	ldr	r5, [r4, #20]
 800b518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b51c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b520:	3301      	adds	r3, #1
 800b522:	444b      	add	r3, r9
 800b524:	106d      	asrs	r5, r5, #1
 800b526:	429d      	cmp	r5, r3
 800b528:	bf38      	it	cc
 800b52a:	461d      	movcc	r5, r3
 800b52c:	0553      	lsls	r3, r2, #21
 800b52e:	d531      	bpl.n	800b594 <__ssputs_r+0xa0>
 800b530:	4629      	mov	r1, r5
 800b532:	f000 fb39 	bl	800bba8 <_malloc_r>
 800b536:	4606      	mov	r6, r0
 800b538:	b950      	cbnz	r0, 800b550 <__ssputs_r+0x5c>
 800b53a:	230c      	movs	r3, #12
 800b53c:	f8ca 3000 	str.w	r3, [sl]
 800b540:	89a3      	ldrh	r3, [r4, #12]
 800b542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b546:	81a3      	strh	r3, [r4, #12]
 800b548:	f04f 30ff 	mov.w	r0, #4294967295
 800b54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b550:	6921      	ldr	r1, [r4, #16]
 800b552:	464a      	mov	r2, r9
 800b554:	f7ff ff84 	bl	800b460 <memcpy>
 800b558:	89a3      	ldrh	r3, [r4, #12]
 800b55a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b55e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b562:	81a3      	strh	r3, [r4, #12]
 800b564:	6126      	str	r6, [r4, #16]
 800b566:	6165      	str	r5, [r4, #20]
 800b568:	444e      	add	r6, r9
 800b56a:	eba5 0509 	sub.w	r5, r5, r9
 800b56e:	6026      	str	r6, [r4, #0]
 800b570:	60a5      	str	r5, [r4, #8]
 800b572:	463e      	mov	r6, r7
 800b574:	42be      	cmp	r6, r7
 800b576:	d900      	bls.n	800b57a <__ssputs_r+0x86>
 800b578:	463e      	mov	r6, r7
 800b57a:	4632      	mov	r2, r6
 800b57c:	6820      	ldr	r0, [r4, #0]
 800b57e:	4641      	mov	r1, r8
 800b580:	f000 faa8 	bl	800bad4 <memmove>
 800b584:	68a3      	ldr	r3, [r4, #8]
 800b586:	6822      	ldr	r2, [r4, #0]
 800b588:	1b9b      	subs	r3, r3, r6
 800b58a:	4432      	add	r2, r6
 800b58c:	60a3      	str	r3, [r4, #8]
 800b58e:	6022      	str	r2, [r4, #0]
 800b590:	2000      	movs	r0, #0
 800b592:	e7db      	b.n	800b54c <__ssputs_r+0x58>
 800b594:	462a      	mov	r2, r5
 800b596:	f000 fb61 	bl	800bc5c <_realloc_r>
 800b59a:	4606      	mov	r6, r0
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d1e1      	bne.n	800b564 <__ssputs_r+0x70>
 800b5a0:	6921      	ldr	r1, [r4, #16]
 800b5a2:	4650      	mov	r0, sl
 800b5a4:	f000 fab0 	bl	800bb08 <_free_r>
 800b5a8:	e7c7      	b.n	800b53a <__ssputs_r+0x46>
	...

0800b5ac <_svfiprintf_r>:
 800b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b0:	4698      	mov	r8, r3
 800b5b2:	898b      	ldrh	r3, [r1, #12]
 800b5b4:	061b      	lsls	r3, r3, #24
 800b5b6:	b09d      	sub	sp, #116	; 0x74
 800b5b8:	4607      	mov	r7, r0
 800b5ba:	460d      	mov	r5, r1
 800b5bc:	4614      	mov	r4, r2
 800b5be:	d50e      	bpl.n	800b5de <_svfiprintf_r+0x32>
 800b5c0:	690b      	ldr	r3, [r1, #16]
 800b5c2:	b963      	cbnz	r3, 800b5de <_svfiprintf_r+0x32>
 800b5c4:	2140      	movs	r1, #64	; 0x40
 800b5c6:	f000 faef 	bl	800bba8 <_malloc_r>
 800b5ca:	6028      	str	r0, [r5, #0]
 800b5cc:	6128      	str	r0, [r5, #16]
 800b5ce:	b920      	cbnz	r0, 800b5da <_svfiprintf_r+0x2e>
 800b5d0:	230c      	movs	r3, #12
 800b5d2:	603b      	str	r3, [r7, #0]
 800b5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d8:	e0d1      	b.n	800b77e <_svfiprintf_r+0x1d2>
 800b5da:	2340      	movs	r3, #64	; 0x40
 800b5dc:	616b      	str	r3, [r5, #20]
 800b5de:	2300      	movs	r3, #0
 800b5e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b5e2:	2320      	movs	r3, #32
 800b5e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5ec:	2330      	movs	r3, #48	; 0x30
 800b5ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b798 <_svfiprintf_r+0x1ec>
 800b5f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5f6:	f04f 0901 	mov.w	r9, #1
 800b5fa:	4623      	mov	r3, r4
 800b5fc:	469a      	mov	sl, r3
 800b5fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b602:	b10a      	cbz	r2, 800b608 <_svfiprintf_r+0x5c>
 800b604:	2a25      	cmp	r2, #37	; 0x25
 800b606:	d1f9      	bne.n	800b5fc <_svfiprintf_r+0x50>
 800b608:	ebba 0b04 	subs.w	fp, sl, r4
 800b60c:	d00b      	beq.n	800b626 <_svfiprintf_r+0x7a>
 800b60e:	465b      	mov	r3, fp
 800b610:	4622      	mov	r2, r4
 800b612:	4629      	mov	r1, r5
 800b614:	4638      	mov	r0, r7
 800b616:	f7ff ff6d 	bl	800b4f4 <__ssputs_r>
 800b61a:	3001      	adds	r0, #1
 800b61c:	f000 80aa 	beq.w	800b774 <_svfiprintf_r+0x1c8>
 800b620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b622:	445a      	add	r2, fp
 800b624:	9209      	str	r2, [sp, #36]	; 0x24
 800b626:	f89a 3000 	ldrb.w	r3, [sl]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f000 80a2 	beq.w	800b774 <_svfiprintf_r+0x1c8>
 800b630:	2300      	movs	r3, #0
 800b632:	f04f 32ff 	mov.w	r2, #4294967295
 800b636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b63a:	f10a 0a01 	add.w	sl, sl, #1
 800b63e:	9304      	str	r3, [sp, #16]
 800b640:	9307      	str	r3, [sp, #28]
 800b642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b646:	931a      	str	r3, [sp, #104]	; 0x68
 800b648:	4654      	mov	r4, sl
 800b64a:	2205      	movs	r2, #5
 800b64c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b650:	4851      	ldr	r0, [pc, #324]	; (800b798 <_svfiprintf_r+0x1ec>)
 800b652:	f7f4 fdc5 	bl	80001e0 <memchr>
 800b656:	9a04      	ldr	r2, [sp, #16]
 800b658:	b9d8      	cbnz	r0, 800b692 <_svfiprintf_r+0xe6>
 800b65a:	06d0      	lsls	r0, r2, #27
 800b65c:	bf44      	itt	mi
 800b65e:	2320      	movmi	r3, #32
 800b660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b664:	0711      	lsls	r1, r2, #28
 800b666:	bf44      	itt	mi
 800b668:	232b      	movmi	r3, #43	; 0x2b
 800b66a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b66e:	f89a 3000 	ldrb.w	r3, [sl]
 800b672:	2b2a      	cmp	r3, #42	; 0x2a
 800b674:	d015      	beq.n	800b6a2 <_svfiprintf_r+0xf6>
 800b676:	9a07      	ldr	r2, [sp, #28]
 800b678:	4654      	mov	r4, sl
 800b67a:	2000      	movs	r0, #0
 800b67c:	f04f 0c0a 	mov.w	ip, #10
 800b680:	4621      	mov	r1, r4
 800b682:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b686:	3b30      	subs	r3, #48	; 0x30
 800b688:	2b09      	cmp	r3, #9
 800b68a:	d94e      	bls.n	800b72a <_svfiprintf_r+0x17e>
 800b68c:	b1b0      	cbz	r0, 800b6bc <_svfiprintf_r+0x110>
 800b68e:	9207      	str	r2, [sp, #28]
 800b690:	e014      	b.n	800b6bc <_svfiprintf_r+0x110>
 800b692:	eba0 0308 	sub.w	r3, r0, r8
 800b696:	fa09 f303 	lsl.w	r3, r9, r3
 800b69a:	4313      	orrs	r3, r2
 800b69c:	9304      	str	r3, [sp, #16]
 800b69e:	46a2      	mov	sl, r4
 800b6a0:	e7d2      	b.n	800b648 <_svfiprintf_r+0x9c>
 800b6a2:	9b03      	ldr	r3, [sp, #12]
 800b6a4:	1d19      	adds	r1, r3, #4
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	9103      	str	r1, [sp, #12]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	bfbb      	ittet	lt
 800b6ae:	425b      	neglt	r3, r3
 800b6b0:	f042 0202 	orrlt.w	r2, r2, #2
 800b6b4:	9307      	strge	r3, [sp, #28]
 800b6b6:	9307      	strlt	r3, [sp, #28]
 800b6b8:	bfb8      	it	lt
 800b6ba:	9204      	strlt	r2, [sp, #16]
 800b6bc:	7823      	ldrb	r3, [r4, #0]
 800b6be:	2b2e      	cmp	r3, #46	; 0x2e
 800b6c0:	d10c      	bne.n	800b6dc <_svfiprintf_r+0x130>
 800b6c2:	7863      	ldrb	r3, [r4, #1]
 800b6c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b6c6:	d135      	bne.n	800b734 <_svfiprintf_r+0x188>
 800b6c8:	9b03      	ldr	r3, [sp, #12]
 800b6ca:	1d1a      	adds	r2, r3, #4
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	9203      	str	r2, [sp, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	bfb8      	it	lt
 800b6d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6d8:	3402      	adds	r4, #2
 800b6da:	9305      	str	r3, [sp, #20]
 800b6dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b7a8 <_svfiprintf_r+0x1fc>
 800b6e0:	7821      	ldrb	r1, [r4, #0]
 800b6e2:	2203      	movs	r2, #3
 800b6e4:	4650      	mov	r0, sl
 800b6e6:	f7f4 fd7b 	bl	80001e0 <memchr>
 800b6ea:	b140      	cbz	r0, 800b6fe <_svfiprintf_r+0x152>
 800b6ec:	2340      	movs	r3, #64	; 0x40
 800b6ee:	eba0 000a 	sub.w	r0, r0, sl
 800b6f2:	fa03 f000 	lsl.w	r0, r3, r0
 800b6f6:	9b04      	ldr	r3, [sp, #16]
 800b6f8:	4303      	orrs	r3, r0
 800b6fa:	3401      	adds	r4, #1
 800b6fc:	9304      	str	r3, [sp, #16]
 800b6fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b702:	4826      	ldr	r0, [pc, #152]	; (800b79c <_svfiprintf_r+0x1f0>)
 800b704:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b708:	2206      	movs	r2, #6
 800b70a:	f7f4 fd69 	bl	80001e0 <memchr>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d038      	beq.n	800b784 <_svfiprintf_r+0x1d8>
 800b712:	4b23      	ldr	r3, [pc, #140]	; (800b7a0 <_svfiprintf_r+0x1f4>)
 800b714:	bb1b      	cbnz	r3, 800b75e <_svfiprintf_r+0x1b2>
 800b716:	9b03      	ldr	r3, [sp, #12]
 800b718:	3307      	adds	r3, #7
 800b71a:	f023 0307 	bic.w	r3, r3, #7
 800b71e:	3308      	adds	r3, #8
 800b720:	9303      	str	r3, [sp, #12]
 800b722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b724:	4433      	add	r3, r6
 800b726:	9309      	str	r3, [sp, #36]	; 0x24
 800b728:	e767      	b.n	800b5fa <_svfiprintf_r+0x4e>
 800b72a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b72e:	460c      	mov	r4, r1
 800b730:	2001      	movs	r0, #1
 800b732:	e7a5      	b.n	800b680 <_svfiprintf_r+0xd4>
 800b734:	2300      	movs	r3, #0
 800b736:	3401      	adds	r4, #1
 800b738:	9305      	str	r3, [sp, #20]
 800b73a:	4619      	mov	r1, r3
 800b73c:	f04f 0c0a 	mov.w	ip, #10
 800b740:	4620      	mov	r0, r4
 800b742:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b746:	3a30      	subs	r2, #48	; 0x30
 800b748:	2a09      	cmp	r2, #9
 800b74a:	d903      	bls.n	800b754 <_svfiprintf_r+0x1a8>
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d0c5      	beq.n	800b6dc <_svfiprintf_r+0x130>
 800b750:	9105      	str	r1, [sp, #20]
 800b752:	e7c3      	b.n	800b6dc <_svfiprintf_r+0x130>
 800b754:	fb0c 2101 	mla	r1, ip, r1, r2
 800b758:	4604      	mov	r4, r0
 800b75a:	2301      	movs	r3, #1
 800b75c:	e7f0      	b.n	800b740 <_svfiprintf_r+0x194>
 800b75e:	ab03      	add	r3, sp, #12
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	462a      	mov	r2, r5
 800b764:	4b0f      	ldr	r3, [pc, #60]	; (800b7a4 <_svfiprintf_r+0x1f8>)
 800b766:	a904      	add	r1, sp, #16
 800b768:	4638      	mov	r0, r7
 800b76a:	f3af 8000 	nop.w
 800b76e:	1c42      	adds	r2, r0, #1
 800b770:	4606      	mov	r6, r0
 800b772:	d1d6      	bne.n	800b722 <_svfiprintf_r+0x176>
 800b774:	89ab      	ldrh	r3, [r5, #12]
 800b776:	065b      	lsls	r3, r3, #25
 800b778:	f53f af2c 	bmi.w	800b5d4 <_svfiprintf_r+0x28>
 800b77c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b77e:	b01d      	add	sp, #116	; 0x74
 800b780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b784:	ab03      	add	r3, sp, #12
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	462a      	mov	r2, r5
 800b78a:	4b06      	ldr	r3, [pc, #24]	; (800b7a4 <_svfiprintf_r+0x1f8>)
 800b78c:	a904      	add	r1, sp, #16
 800b78e:	4638      	mov	r0, r7
 800b790:	f000 f87a 	bl	800b888 <_printf_i>
 800b794:	e7eb      	b.n	800b76e <_svfiprintf_r+0x1c2>
 800b796:	bf00      	nop
 800b798:	0800c014 	.word	0x0800c014
 800b79c:	0800c01e 	.word	0x0800c01e
 800b7a0:	00000000 	.word	0x00000000
 800b7a4:	0800b4f5 	.word	0x0800b4f5
 800b7a8:	0800c01a 	.word	0x0800c01a

0800b7ac <_printf_common>:
 800b7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b0:	4616      	mov	r6, r2
 800b7b2:	4699      	mov	r9, r3
 800b7b4:	688a      	ldr	r2, [r1, #8]
 800b7b6:	690b      	ldr	r3, [r1, #16]
 800b7b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	bfb8      	it	lt
 800b7c0:	4613      	movlt	r3, r2
 800b7c2:	6033      	str	r3, [r6, #0]
 800b7c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7c8:	4607      	mov	r7, r0
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	b10a      	cbz	r2, 800b7d2 <_printf_common+0x26>
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	6033      	str	r3, [r6, #0]
 800b7d2:	6823      	ldr	r3, [r4, #0]
 800b7d4:	0699      	lsls	r1, r3, #26
 800b7d6:	bf42      	ittt	mi
 800b7d8:	6833      	ldrmi	r3, [r6, #0]
 800b7da:	3302      	addmi	r3, #2
 800b7dc:	6033      	strmi	r3, [r6, #0]
 800b7de:	6825      	ldr	r5, [r4, #0]
 800b7e0:	f015 0506 	ands.w	r5, r5, #6
 800b7e4:	d106      	bne.n	800b7f4 <_printf_common+0x48>
 800b7e6:	f104 0a19 	add.w	sl, r4, #25
 800b7ea:	68e3      	ldr	r3, [r4, #12]
 800b7ec:	6832      	ldr	r2, [r6, #0]
 800b7ee:	1a9b      	subs	r3, r3, r2
 800b7f0:	42ab      	cmp	r3, r5
 800b7f2:	dc26      	bgt.n	800b842 <_printf_common+0x96>
 800b7f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7f8:	1e13      	subs	r3, r2, #0
 800b7fa:	6822      	ldr	r2, [r4, #0]
 800b7fc:	bf18      	it	ne
 800b7fe:	2301      	movne	r3, #1
 800b800:	0692      	lsls	r2, r2, #26
 800b802:	d42b      	bmi.n	800b85c <_printf_common+0xb0>
 800b804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b808:	4649      	mov	r1, r9
 800b80a:	4638      	mov	r0, r7
 800b80c:	47c0      	blx	r8
 800b80e:	3001      	adds	r0, #1
 800b810:	d01e      	beq.n	800b850 <_printf_common+0xa4>
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	68e5      	ldr	r5, [r4, #12]
 800b816:	6832      	ldr	r2, [r6, #0]
 800b818:	f003 0306 	and.w	r3, r3, #6
 800b81c:	2b04      	cmp	r3, #4
 800b81e:	bf08      	it	eq
 800b820:	1aad      	subeq	r5, r5, r2
 800b822:	68a3      	ldr	r3, [r4, #8]
 800b824:	6922      	ldr	r2, [r4, #16]
 800b826:	bf0c      	ite	eq
 800b828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b82c:	2500      	movne	r5, #0
 800b82e:	4293      	cmp	r3, r2
 800b830:	bfc4      	itt	gt
 800b832:	1a9b      	subgt	r3, r3, r2
 800b834:	18ed      	addgt	r5, r5, r3
 800b836:	2600      	movs	r6, #0
 800b838:	341a      	adds	r4, #26
 800b83a:	42b5      	cmp	r5, r6
 800b83c:	d11a      	bne.n	800b874 <_printf_common+0xc8>
 800b83e:	2000      	movs	r0, #0
 800b840:	e008      	b.n	800b854 <_printf_common+0xa8>
 800b842:	2301      	movs	r3, #1
 800b844:	4652      	mov	r2, sl
 800b846:	4649      	mov	r1, r9
 800b848:	4638      	mov	r0, r7
 800b84a:	47c0      	blx	r8
 800b84c:	3001      	adds	r0, #1
 800b84e:	d103      	bne.n	800b858 <_printf_common+0xac>
 800b850:	f04f 30ff 	mov.w	r0, #4294967295
 800b854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b858:	3501      	adds	r5, #1
 800b85a:	e7c6      	b.n	800b7ea <_printf_common+0x3e>
 800b85c:	18e1      	adds	r1, r4, r3
 800b85e:	1c5a      	adds	r2, r3, #1
 800b860:	2030      	movs	r0, #48	; 0x30
 800b862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b866:	4422      	add	r2, r4
 800b868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b86c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b870:	3302      	adds	r3, #2
 800b872:	e7c7      	b.n	800b804 <_printf_common+0x58>
 800b874:	2301      	movs	r3, #1
 800b876:	4622      	mov	r2, r4
 800b878:	4649      	mov	r1, r9
 800b87a:	4638      	mov	r0, r7
 800b87c:	47c0      	blx	r8
 800b87e:	3001      	adds	r0, #1
 800b880:	d0e6      	beq.n	800b850 <_printf_common+0xa4>
 800b882:	3601      	adds	r6, #1
 800b884:	e7d9      	b.n	800b83a <_printf_common+0x8e>
	...

0800b888 <_printf_i>:
 800b888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b88c:	460c      	mov	r4, r1
 800b88e:	4691      	mov	r9, r2
 800b890:	7e27      	ldrb	r7, [r4, #24]
 800b892:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b894:	2f78      	cmp	r7, #120	; 0x78
 800b896:	4680      	mov	r8, r0
 800b898:	469a      	mov	sl, r3
 800b89a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b89e:	d807      	bhi.n	800b8b0 <_printf_i+0x28>
 800b8a0:	2f62      	cmp	r7, #98	; 0x62
 800b8a2:	d80a      	bhi.n	800b8ba <_printf_i+0x32>
 800b8a4:	2f00      	cmp	r7, #0
 800b8a6:	f000 80d8 	beq.w	800ba5a <_printf_i+0x1d2>
 800b8aa:	2f58      	cmp	r7, #88	; 0x58
 800b8ac:	f000 80a3 	beq.w	800b9f6 <_printf_i+0x16e>
 800b8b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b8b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b8b8:	e03a      	b.n	800b930 <_printf_i+0xa8>
 800b8ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b8be:	2b15      	cmp	r3, #21
 800b8c0:	d8f6      	bhi.n	800b8b0 <_printf_i+0x28>
 800b8c2:	a001      	add	r0, pc, #4	; (adr r0, 800b8c8 <_printf_i+0x40>)
 800b8c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b8c8:	0800b921 	.word	0x0800b921
 800b8cc:	0800b935 	.word	0x0800b935
 800b8d0:	0800b8b1 	.word	0x0800b8b1
 800b8d4:	0800b8b1 	.word	0x0800b8b1
 800b8d8:	0800b8b1 	.word	0x0800b8b1
 800b8dc:	0800b8b1 	.word	0x0800b8b1
 800b8e0:	0800b935 	.word	0x0800b935
 800b8e4:	0800b8b1 	.word	0x0800b8b1
 800b8e8:	0800b8b1 	.word	0x0800b8b1
 800b8ec:	0800b8b1 	.word	0x0800b8b1
 800b8f0:	0800b8b1 	.word	0x0800b8b1
 800b8f4:	0800ba41 	.word	0x0800ba41
 800b8f8:	0800b965 	.word	0x0800b965
 800b8fc:	0800ba23 	.word	0x0800ba23
 800b900:	0800b8b1 	.word	0x0800b8b1
 800b904:	0800b8b1 	.word	0x0800b8b1
 800b908:	0800ba63 	.word	0x0800ba63
 800b90c:	0800b8b1 	.word	0x0800b8b1
 800b910:	0800b965 	.word	0x0800b965
 800b914:	0800b8b1 	.word	0x0800b8b1
 800b918:	0800b8b1 	.word	0x0800b8b1
 800b91c:	0800ba2b 	.word	0x0800ba2b
 800b920:	680b      	ldr	r3, [r1, #0]
 800b922:	1d1a      	adds	r2, r3, #4
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	600a      	str	r2, [r1, #0]
 800b928:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b92c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b930:	2301      	movs	r3, #1
 800b932:	e0a3      	b.n	800ba7c <_printf_i+0x1f4>
 800b934:	6825      	ldr	r5, [r4, #0]
 800b936:	6808      	ldr	r0, [r1, #0]
 800b938:	062e      	lsls	r6, r5, #24
 800b93a:	f100 0304 	add.w	r3, r0, #4
 800b93e:	d50a      	bpl.n	800b956 <_printf_i+0xce>
 800b940:	6805      	ldr	r5, [r0, #0]
 800b942:	600b      	str	r3, [r1, #0]
 800b944:	2d00      	cmp	r5, #0
 800b946:	da03      	bge.n	800b950 <_printf_i+0xc8>
 800b948:	232d      	movs	r3, #45	; 0x2d
 800b94a:	426d      	negs	r5, r5
 800b94c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b950:	485e      	ldr	r0, [pc, #376]	; (800bacc <_printf_i+0x244>)
 800b952:	230a      	movs	r3, #10
 800b954:	e019      	b.n	800b98a <_printf_i+0x102>
 800b956:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b95a:	6805      	ldr	r5, [r0, #0]
 800b95c:	600b      	str	r3, [r1, #0]
 800b95e:	bf18      	it	ne
 800b960:	b22d      	sxthne	r5, r5
 800b962:	e7ef      	b.n	800b944 <_printf_i+0xbc>
 800b964:	680b      	ldr	r3, [r1, #0]
 800b966:	6825      	ldr	r5, [r4, #0]
 800b968:	1d18      	adds	r0, r3, #4
 800b96a:	6008      	str	r0, [r1, #0]
 800b96c:	0628      	lsls	r0, r5, #24
 800b96e:	d501      	bpl.n	800b974 <_printf_i+0xec>
 800b970:	681d      	ldr	r5, [r3, #0]
 800b972:	e002      	b.n	800b97a <_printf_i+0xf2>
 800b974:	0669      	lsls	r1, r5, #25
 800b976:	d5fb      	bpl.n	800b970 <_printf_i+0xe8>
 800b978:	881d      	ldrh	r5, [r3, #0]
 800b97a:	4854      	ldr	r0, [pc, #336]	; (800bacc <_printf_i+0x244>)
 800b97c:	2f6f      	cmp	r7, #111	; 0x6f
 800b97e:	bf0c      	ite	eq
 800b980:	2308      	moveq	r3, #8
 800b982:	230a      	movne	r3, #10
 800b984:	2100      	movs	r1, #0
 800b986:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b98a:	6866      	ldr	r6, [r4, #4]
 800b98c:	60a6      	str	r6, [r4, #8]
 800b98e:	2e00      	cmp	r6, #0
 800b990:	bfa2      	ittt	ge
 800b992:	6821      	ldrge	r1, [r4, #0]
 800b994:	f021 0104 	bicge.w	r1, r1, #4
 800b998:	6021      	strge	r1, [r4, #0]
 800b99a:	b90d      	cbnz	r5, 800b9a0 <_printf_i+0x118>
 800b99c:	2e00      	cmp	r6, #0
 800b99e:	d04d      	beq.n	800ba3c <_printf_i+0x1b4>
 800b9a0:	4616      	mov	r6, r2
 800b9a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9a6:	fb03 5711 	mls	r7, r3, r1, r5
 800b9aa:	5dc7      	ldrb	r7, [r0, r7]
 800b9ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9b0:	462f      	mov	r7, r5
 800b9b2:	42bb      	cmp	r3, r7
 800b9b4:	460d      	mov	r5, r1
 800b9b6:	d9f4      	bls.n	800b9a2 <_printf_i+0x11a>
 800b9b8:	2b08      	cmp	r3, #8
 800b9ba:	d10b      	bne.n	800b9d4 <_printf_i+0x14c>
 800b9bc:	6823      	ldr	r3, [r4, #0]
 800b9be:	07df      	lsls	r7, r3, #31
 800b9c0:	d508      	bpl.n	800b9d4 <_printf_i+0x14c>
 800b9c2:	6923      	ldr	r3, [r4, #16]
 800b9c4:	6861      	ldr	r1, [r4, #4]
 800b9c6:	4299      	cmp	r1, r3
 800b9c8:	bfde      	ittt	le
 800b9ca:	2330      	movle	r3, #48	; 0x30
 800b9cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b9d4:	1b92      	subs	r2, r2, r6
 800b9d6:	6122      	str	r2, [r4, #16]
 800b9d8:	f8cd a000 	str.w	sl, [sp]
 800b9dc:	464b      	mov	r3, r9
 800b9de:	aa03      	add	r2, sp, #12
 800b9e0:	4621      	mov	r1, r4
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	f7ff fee2 	bl	800b7ac <_printf_common>
 800b9e8:	3001      	adds	r0, #1
 800b9ea:	d14c      	bne.n	800ba86 <_printf_i+0x1fe>
 800b9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f0:	b004      	add	sp, #16
 800b9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f6:	4835      	ldr	r0, [pc, #212]	; (800bacc <_printf_i+0x244>)
 800b9f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b9fc:	6823      	ldr	r3, [r4, #0]
 800b9fe:	680e      	ldr	r6, [r1, #0]
 800ba00:	061f      	lsls	r7, r3, #24
 800ba02:	f856 5b04 	ldr.w	r5, [r6], #4
 800ba06:	600e      	str	r6, [r1, #0]
 800ba08:	d514      	bpl.n	800ba34 <_printf_i+0x1ac>
 800ba0a:	07d9      	lsls	r1, r3, #31
 800ba0c:	bf44      	itt	mi
 800ba0e:	f043 0320 	orrmi.w	r3, r3, #32
 800ba12:	6023      	strmi	r3, [r4, #0]
 800ba14:	b91d      	cbnz	r5, 800ba1e <_printf_i+0x196>
 800ba16:	6823      	ldr	r3, [r4, #0]
 800ba18:	f023 0320 	bic.w	r3, r3, #32
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	2310      	movs	r3, #16
 800ba20:	e7b0      	b.n	800b984 <_printf_i+0xfc>
 800ba22:	6823      	ldr	r3, [r4, #0]
 800ba24:	f043 0320 	orr.w	r3, r3, #32
 800ba28:	6023      	str	r3, [r4, #0]
 800ba2a:	2378      	movs	r3, #120	; 0x78
 800ba2c:	4828      	ldr	r0, [pc, #160]	; (800bad0 <_printf_i+0x248>)
 800ba2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba32:	e7e3      	b.n	800b9fc <_printf_i+0x174>
 800ba34:	065e      	lsls	r6, r3, #25
 800ba36:	bf48      	it	mi
 800ba38:	b2ad      	uxthmi	r5, r5
 800ba3a:	e7e6      	b.n	800ba0a <_printf_i+0x182>
 800ba3c:	4616      	mov	r6, r2
 800ba3e:	e7bb      	b.n	800b9b8 <_printf_i+0x130>
 800ba40:	680b      	ldr	r3, [r1, #0]
 800ba42:	6826      	ldr	r6, [r4, #0]
 800ba44:	6960      	ldr	r0, [r4, #20]
 800ba46:	1d1d      	adds	r5, r3, #4
 800ba48:	600d      	str	r5, [r1, #0]
 800ba4a:	0635      	lsls	r5, r6, #24
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	d501      	bpl.n	800ba54 <_printf_i+0x1cc>
 800ba50:	6018      	str	r0, [r3, #0]
 800ba52:	e002      	b.n	800ba5a <_printf_i+0x1d2>
 800ba54:	0671      	lsls	r1, r6, #25
 800ba56:	d5fb      	bpl.n	800ba50 <_printf_i+0x1c8>
 800ba58:	8018      	strh	r0, [r3, #0]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	6123      	str	r3, [r4, #16]
 800ba5e:	4616      	mov	r6, r2
 800ba60:	e7ba      	b.n	800b9d8 <_printf_i+0x150>
 800ba62:	680b      	ldr	r3, [r1, #0]
 800ba64:	1d1a      	adds	r2, r3, #4
 800ba66:	600a      	str	r2, [r1, #0]
 800ba68:	681e      	ldr	r6, [r3, #0]
 800ba6a:	6862      	ldr	r2, [r4, #4]
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f7f4 fbb6 	bl	80001e0 <memchr>
 800ba74:	b108      	cbz	r0, 800ba7a <_printf_i+0x1f2>
 800ba76:	1b80      	subs	r0, r0, r6
 800ba78:	6060      	str	r0, [r4, #4]
 800ba7a:	6863      	ldr	r3, [r4, #4]
 800ba7c:	6123      	str	r3, [r4, #16]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba84:	e7a8      	b.n	800b9d8 <_printf_i+0x150>
 800ba86:	6923      	ldr	r3, [r4, #16]
 800ba88:	4632      	mov	r2, r6
 800ba8a:	4649      	mov	r1, r9
 800ba8c:	4640      	mov	r0, r8
 800ba8e:	47d0      	blx	sl
 800ba90:	3001      	adds	r0, #1
 800ba92:	d0ab      	beq.n	800b9ec <_printf_i+0x164>
 800ba94:	6823      	ldr	r3, [r4, #0]
 800ba96:	079b      	lsls	r3, r3, #30
 800ba98:	d413      	bmi.n	800bac2 <_printf_i+0x23a>
 800ba9a:	68e0      	ldr	r0, [r4, #12]
 800ba9c:	9b03      	ldr	r3, [sp, #12]
 800ba9e:	4298      	cmp	r0, r3
 800baa0:	bfb8      	it	lt
 800baa2:	4618      	movlt	r0, r3
 800baa4:	e7a4      	b.n	800b9f0 <_printf_i+0x168>
 800baa6:	2301      	movs	r3, #1
 800baa8:	4632      	mov	r2, r6
 800baaa:	4649      	mov	r1, r9
 800baac:	4640      	mov	r0, r8
 800baae:	47d0      	blx	sl
 800bab0:	3001      	adds	r0, #1
 800bab2:	d09b      	beq.n	800b9ec <_printf_i+0x164>
 800bab4:	3501      	adds	r5, #1
 800bab6:	68e3      	ldr	r3, [r4, #12]
 800bab8:	9903      	ldr	r1, [sp, #12]
 800baba:	1a5b      	subs	r3, r3, r1
 800babc:	42ab      	cmp	r3, r5
 800babe:	dcf2      	bgt.n	800baa6 <_printf_i+0x21e>
 800bac0:	e7eb      	b.n	800ba9a <_printf_i+0x212>
 800bac2:	2500      	movs	r5, #0
 800bac4:	f104 0619 	add.w	r6, r4, #25
 800bac8:	e7f5      	b.n	800bab6 <_printf_i+0x22e>
 800baca:	bf00      	nop
 800bacc:	0800c025 	.word	0x0800c025
 800bad0:	0800c036 	.word	0x0800c036

0800bad4 <memmove>:
 800bad4:	4288      	cmp	r0, r1
 800bad6:	b510      	push	{r4, lr}
 800bad8:	eb01 0402 	add.w	r4, r1, r2
 800badc:	d902      	bls.n	800bae4 <memmove+0x10>
 800bade:	4284      	cmp	r4, r0
 800bae0:	4623      	mov	r3, r4
 800bae2:	d807      	bhi.n	800baf4 <memmove+0x20>
 800bae4:	1e43      	subs	r3, r0, #1
 800bae6:	42a1      	cmp	r1, r4
 800bae8:	d008      	beq.n	800bafc <memmove+0x28>
 800baea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baf2:	e7f8      	b.n	800bae6 <memmove+0x12>
 800baf4:	4402      	add	r2, r0
 800baf6:	4601      	mov	r1, r0
 800baf8:	428a      	cmp	r2, r1
 800bafa:	d100      	bne.n	800bafe <memmove+0x2a>
 800bafc:	bd10      	pop	{r4, pc}
 800bafe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb06:	e7f7      	b.n	800baf8 <memmove+0x24>

0800bb08 <_free_r>:
 800bb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb0a:	2900      	cmp	r1, #0
 800bb0c:	d048      	beq.n	800bba0 <_free_r+0x98>
 800bb0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb12:	9001      	str	r0, [sp, #4]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f1a1 0404 	sub.w	r4, r1, #4
 800bb1a:	bfb8      	it	lt
 800bb1c:	18e4      	addlt	r4, r4, r3
 800bb1e:	f000 f8d3 	bl	800bcc8 <__malloc_lock>
 800bb22:	4a20      	ldr	r2, [pc, #128]	; (800bba4 <_free_r+0x9c>)
 800bb24:	9801      	ldr	r0, [sp, #4]
 800bb26:	6813      	ldr	r3, [r2, #0]
 800bb28:	4615      	mov	r5, r2
 800bb2a:	b933      	cbnz	r3, 800bb3a <_free_r+0x32>
 800bb2c:	6063      	str	r3, [r4, #4]
 800bb2e:	6014      	str	r4, [r2, #0]
 800bb30:	b003      	add	sp, #12
 800bb32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb36:	f000 b8cd 	b.w	800bcd4 <__malloc_unlock>
 800bb3a:	42a3      	cmp	r3, r4
 800bb3c:	d90b      	bls.n	800bb56 <_free_r+0x4e>
 800bb3e:	6821      	ldr	r1, [r4, #0]
 800bb40:	1862      	adds	r2, r4, r1
 800bb42:	4293      	cmp	r3, r2
 800bb44:	bf04      	itt	eq
 800bb46:	681a      	ldreq	r2, [r3, #0]
 800bb48:	685b      	ldreq	r3, [r3, #4]
 800bb4a:	6063      	str	r3, [r4, #4]
 800bb4c:	bf04      	itt	eq
 800bb4e:	1852      	addeq	r2, r2, r1
 800bb50:	6022      	streq	r2, [r4, #0]
 800bb52:	602c      	str	r4, [r5, #0]
 800bb54:	e7ec      	b.n	800bb30 <_free_r+0x28>
 800bb56:	461a      	mov	r2, r3
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	b10b      	cbz	r3, 800bb60 <_free_r+0x58>
 800bb5c:	42a3      	cmp	r3, r4
 800bb5e:	d9fa      	bls.n	800bb56 <_free_r+0x4e>
 800bb60:	6811      	ldr	r1, [r2, #0]
 800bb62:	1855      	adds	r5, r2, r1
 800bb64:	42a5      	cmp	r5, r4
 800bb66:	d10b      	bne.n	800bb80 <_free_r+0x78>
 800bb68:	6824      	ldr	r4, [r4, #0]
 800bb6a:	4421      	add	r1, r4
 800bb6c:	1854      	adds	r4, r2, r1
 800bb6e:	42a3      	cmp	r3, r4
 800bb70:	6011      	str	r1, [r2, #0]
 800bb72:	d1dd      	bne.n	800bb30 <_free_r+0x28>
 800bb74:	681c      	ldr	r4, [r3, #0]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	6053      	str	r3, [r2, #4]
 800bb7a:	4421      	add	r1, r4
 800bb7c:	6011      	str	r1, [r2, #0]
 800bb7e:	e7d7      	b.n	800bb30 <_free_r+0x28>
 800bb80:	d902      	bls.n	800bb88 <_free_r+0x80>
 800bb82:	230c      	movs	r3, #12
 800bb84:	6003      	str	r3, [r0, #0]
 800bb86:	e7d3      	b.n	800bb30 <_free_r+0x28>
 800bb88:	6825      	ldr	r5, [r4, #0]
 800bb8a:	1961      	adds	r1, r4, r5
 800bb8c:	428b      	cmp	r3, r1
 800bb8e:	bf04      	itt	eq
 800bb90:	6819      	ldreq	r1, [r3, #0]
 800bb92:	685b      	ldreq	r3, [r3, #4]
 800bb94:	6063      	str	r3, [r4, #4]
 800bb96:	bf04      	itt	eq
 800bb98:	1949      	addeq	r1, r1, r5
 800bb9a:	6021      	streq	r1, [r4, #0]
 800bb9c:	6054      	str	r4, [r2, #4]
 800bb9e:	e7c7      	b.n	800bb30 <_free_r+0x28>
 800bba0:	b003      	add	sp, #12
 800bba2:	bd30      	pop	{r4, r5, pc}
 800bba4:	20002928 	.word	0x20002928

0800bba8 <_malloc_r>:
 800bba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbaa:	1ccd      	adds	r5, r1, #3
 800bbac:	f025 0503 	bic.w	r5, r5, #3
 800bbb0:	3508      	adds	r5, #8
 800bbb2:	2d0c      	cmp	r5, #12
 800bbb4:	bf38      	it	cc
 800bbb6:	250c      	movcc	r5, #12
 800bbb8:	2d00      	cmp	r5, #0
 800bbba:	4606      	mov	r6, r0
 800bbbc:	db01      	blt.n	800bbc2 <_malloc_r+0x1a>
 800bbbe:	42a9      	cmp	r1, r5
 800bbc0:	d903      	bls.n	800bbca <_malloc_r+0x22>
 800bbc2:	230c      	movs	r3, #12
 800bbc4:	6033      	str	r3, [r6, #0]
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbca:	f000 f87d 	bl	800bcc8 <__malloc_lock>
 800bbce:	4921      	ldr	r1, [pc, #132]	; (800bc54 <_malloc_r+0xac>)
 800bbd0:	680a      	ldr	r2, [r1, #0]
 800bbd2:	4614      	mov	r4, r2
 800bbd4:	b99c      	cbnz	r4, 800bbfe <_malloc_r+0x56>
 800bbd6:	4f20      	ldr	r7, [pc, #128]	; (800bc58 <_malloc_r+0xb0>)
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	b923      	cbnz	r3, 800bbe6 <_malloc_r+0x3e>
 800bbdc:	4621      	mov	r1, r4
 800bbde:	4630      	mov	r0, r6
 800bbe0:	f000 f862 	bl	800bca8 <_sbrk_r>
 800bbe4:	6038      	str	r0, [r7, #0]
 800bbe6:	4629      	mov	r1, r5
 800bbe8:	4630      	mov	r0, r6
 800bbea:	f000 f85d 	bl	800bca8 <_sbrk_r>
 800bbee:	1c43      	adds	r3, r0, #1
 800bbf0:	d123      	bne.n	800bc3a <_malloc_r+0x92>
 800bbf2:	230c      	movs	r3, #12
 800bbf4:	6033      	str	r3, [r6, #0]
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	f000 f86c 	bl	800bcd4 <__malloc_unlock>
 800bbfc:	e7e3      	b.n	800bbc6 <_malloc_r+0x1e>
 800bbfe:	6823      	ldr	r3, [r4, #0]
 800bc00:	1b5b      	subs	r3, r3, r5
 800bc02:	d417      	bmi.n	800bc34 <_malloc_r+0x8c>
 800bc04:	2b0b      	cmp	r3, #11
 800bc06:	d903      	bls.n	800bc10 <_malloc_r+0x68>
 800bc08:	6023      	str	r3, [r4, #0]
 800bc0a:	441c      	add	r4, r3
 800bc0c:	6025      	str	r5, [r4, #0]
 800bc0e:	e004      	b.n	800bc1a <_malloc_r+0x72>
 800bc10:	6863      	ldr	r3, [r4, #4]
 800bc12:	42a2      	cmp	r2, r4
 800bc14:	bf0c      	ite	eq
 800bc16:	600b      	streq	r3, [r1, #0]
 800bc18:	6053      	strne	r3, [r2, #4]
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	f000 f85a 	bl	800bcd4 <__malloc_unlock>
 800bc20:	f104 000b 	add.w	r0, r4, #11
 800bc24:	1d23      	adds	r3, r4, #4
 800bc26:	f020 0007 	bic.w	r0, r0, #7
 800bc2a:	1ac2      	subs	r2, r0, r3
 800bc2c:	d0cc      	beq.n	800bbc8 <_malloc_r+0x20>
 800bc2e:	1a1b      	subs	r3, r3, r0
 800bc30:	50a3      	str	r3, [r4, r2]
 800bc32:	e7c9      	b.n	800bbc8 <_malloc_r+0x20>
 800bc34:	4622      	mov	r2, r4
 800bc36:	6864      	ldr	r4, [r4, #4]
 800bc38:	e7cc      	b.n	800bbd4 <_malloc_r+0x2c>
 800bc3a:	1cc4      	adds	r4, r0, #3
 800bc3c:	f024 0403 	bic.w	r4, r4, #3
 800bc40:	42a0      	cmp	r0, r4
 800bc42:	d0e3      	beq.n	800bc0c <_malloc_r+0x64>
 800bc44:	1a21      	subs	r1, r4, r0
 800bc46:	4630      	mov	r0, r6
 800bc48:	f000 f82e 	bl	800bca8 <_sbrk_r>
 800bc4c:	3001      	adds	r0, #1
 800bc4e:	d1dd      	bne.n	800bc0c <_malloc_r+0x64>
 800bc50:	e7cf      	b.n	800bbf2 <_malloc_r+0x4a>
 800bc52:	bf00      	nop
 800bc54:	20002928 	.word	0x20002928
 800bc58:	2000292c 	.word	0x2000292c

0800bc5c <_realloc_r>:
 800bc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5e:	4607      	mov	r7, r0
 800bc60:	4614      	mov	r4, r2
 800bc62:	460e      	mov	r6, r1
 800bc64:	b921      	cbnz	r1, 800bc70 <_realloc_r+0x14>
 800bc66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	f7ff bf9c 	b.w	800bba8 <_malloc_r>
 800bc70:	b922      	cbnz	r2, 800bc7c <_realloc_r+0x20>
 800bc72:	f7ff ff49 	bl	800bb08 <_free_r>
 800bc76:	4625      	mov	r5, r4
 800bc78:	4628      	mov	r0, r5
 800bc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc7c:	f000 f830 	bl	800bce0 <_malloc_usable_size_r>
 800bc80:	42a0      	cmp	r0, r4
 800bc82:	d20f      	bcs.n	800bca4 <_realloc_r+0x48>
 800bc84:	4621      	mov	r1, r4
 800bc86:	4638      	mov	r0, r7
 800bc88:	f7ff ff8e 	bl	800bba8 <_malloc_r>
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d0f2      	beq.n	800bc78 <_realloc_r+0x1c>
 800bc92:	4631      	mov	r1, r6
 800bc94:	4622      	mov	r2, r4
 800bc96:	f7ff fbe3 	bl	800b460 <memcpy>
 800bc9a:	4631      	mov	r1, r6
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	f7ff ff33 	bl	800bb08 <_free_r>
 800bca2:	e7e9      	b.n	800bc78 <_realloc_r+0x1c>
 800bca4:	4635      	mov	r5, r6
 800bca6:	e7e7      	b.n	800bc78 <_realloc_r+0x1c>

0800bca8 <_sbrk_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4d06      	ldr	r5, [pc, #24]	; (800bcc4 <_sbrk_r+0x1c>)
 800bcac:	2300      	movs	r3, #0
 800bcae:	4604      	mov	r4, r0
 800bcb0:	4608      	mov	r0, r1
 800bcb2:	602b      	str	r3, [r5, #0]
 800bcb4:	f7f6 f974 	bl	8001fa0 <_sbrk>
 800bcb8:	1c43      	adds	r3, r0, #1
 800bcba:	d102      	bne.n	800bcc2 <_sbrk_r+0x1a>
 800bcbc:	682b      	ldr	r3, [r5, #0]
 800bcbe:	b103      	cbz	r3, 800bcc2 <_sbrk_r+0x1a>
 800bcc0:	6023      	str	r3, [r4, #0]
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	20003184 	.word	0x20003184

0800bcc8 <__malloc_lock>:
 800bcc8:	4801      	ldr	r0, [pc, #4]	; (800bcd0 <__malloc_lock+0x8>)
 800bcca:	f000 b811 	b.w	800bcf0 <__retarget_lock_acquire_recursive>
 800bcce:	bf00      	nop
 800bcd0:	2000318c 	.word	0x2000318c

0800bcd4 <__malloc_unlock>:
 800bcd4:	4801      	ldr	r0, [pc, #4]	; (800bcdc <__malloc_unlock+0x8>)
 800bcd6:	f000 b80c 	b.w	800bcf2 <__retarget_lock_release_recursive>
 800bcda:	bf00      	nop
 800bcdc:	2000318c 	.word	0x2000318c

0800bce0 <_malloc_usable_size_r>:
 800bce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bce4:	1f18      	subs	r0, r3, #4
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	bfbc      	itt	lt
 800bcea:	580b      	ldrlt	r3, [r1, r0]
 800bcec:	18c0      	addlt	r0, r0, r3
 800bcee:	4770      	bx	lr

0800bcf0 <__retarget_lock_acquire_recursive>:
 800bcf0:	4770      	bx	lr

0800bcf2 <__retarget_lock_release_recursive>:
 800bcf2:	4770      	bx	lr

0800bcf4 <trunc>:
 800bcf4:	ec51 0b10 	vmov	r0, r1, d0
 800bcf8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bcfc:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800bd00:	2b13      	cmp	r3, #19
 800bd02:	b5d0      	push	{r4, r6, r7, lr}
 800bd04:	460c      	mov	r4, r1
 800bd06:	dc10      	bgt.n	800bd2a <trunc+0x36>
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	bfa5      	ittet	ge
 800bd0c:	4a11      	ldrge	r2, [pc, #68]	; (800bd54 <trunc+0x60>)
 800bd0e:	fa42 f303 	asrge.w	r3, r2, r3
 800bd12:	2100      	movlt	r1, #0
 800bd14:	2100      	movge	r1, #0
 800bd16:	bfb9      	ittee	lt
 800bd18:	2000      	movlt	r0, #0
 800bd1a:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800bd1e:	2000      	movge	r0, #0
 800bd20:	ea24 0103 	bicge.w	r1, r4, r3
 800bd24:	ec41 0b10 	vmov	d0, r0, r1
 800bd28:	bdd0      	pop	{r4, r6, r7, pc}
 800bd2a:	2b33      	cmp	r3, #51	; 0x33
 800bd2c:	dd08      	ble.n	800bd40 <trunc+0x4c>
 800bd2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd32:	d1f7      	bne.n	800bd24 <trunc+0x30>
 800bd34:	ee10 2a10 	vmov	r2, s0
 800bd38:	460b      	mov	r3, r1
 800bd3a:	f7f4 faa7 	bl	800028c <__adddf3>
 800bd3e:	e7f1      	b.n	800bd24 <trunc+0x30>
 800bd40:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800bd44:	f04f 33ff 	mov.w	r3, #4294967295
 800bd48:	fa23 f202 	lsr.w	r2, r3, r2
 800bd4c:	ea20 0602 	bic.w	r6, r0, r2
 800bd50:	4630      	mov	r0, r6
 800bd52:	e7e7      	b.n	800bd24 <trunc+0x30>
 800bd54:	000fffff 	.word	0x000fffff

0800bd58 <_init>:
 800bd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd5a:	bf00      	nop
 800bd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd5e:	bc08      	pop	{r3}
 800bd60:	469e      	mov	lr, r3
 800bd62:	4770      	bx	lr

0800bd64 <_fini>:
 800bd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd66:	bf00      	nop
 800bd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd6a:	bc08      	pop	{r3}
 800bd6c:	469e      	mov	lr, r3
 800bd6e:	4770      	bx	lr
